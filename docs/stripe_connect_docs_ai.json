{"source": "Stripe API Documentation", "version": "1.0", "document_count": 160, "documents": [{"path": "connect.md", "url": "https://docs.stripe.com/connect", "content": "#Platforms and marketplaces with Stripe Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect\n\n#Platforms and marketplaces with Stripe Connect\n#Build a multiparty integration.\nUse Connect to build a platform, marketplace, or other business that manages payments and moves money between multiple parties. Learn more about Connect’s features.\nExplore the demo\nChoose how to onboard accounts, set up dashboards, accept payments, pay out, and more.\n#Learn more\nLearn more about Connect’s features, availability, and use cases.\nOnboard accounts to your platform or marketplace.\nExplore the different funds flows you can use.\n#Example integrations\nUse Payment Links to collect payments from customers and automatically pay out a portion to your sellers or service providers.\nAdd money from your bank to pay out your sellers or service providers.\nFacilitate direct payments between other businesses and their own customers.\n#Onboard accounts\nChoose how to onboard accounts to begin using Connect.\nOnboard accounts through a Stripe-hosted onboarding form.\nOnboard accounts using customizable components you embed in your website.\nOnboard accounts using the Stripe API with full control over your own UI.\n#Accept payments\nChoose a charge type to accept payments.\nCustomers directly transact with your connected account.\nCustomers transact with your platform for products or services provided by your connected account.\nTransactions involves multiple parties and a specific party isn’t known at the time of charge.\n#Collect recurring payments\nEnable other businesses who use your platform to bill their end customers.\nCollect recurring payments from your end customers, optionally splitting the payment with your sellers or service providers.\nCharge a recurring fee to other businesses to use your platform.\n#Manage payouts\nLearn about sending payouts to your platform’s connected accounts.\nManage the automatic payout schedule to your connected accounts.\nLearn how to reverse a payout sent to a connected account.\n#Manage your connected accounts\nCreate Stripe-hosted onboarding or create your own custom flow with the Connect API.\nIncrease conversion by automatically localizing payment methods to each country you sell in.\nConfigure and send 1099-MISC, 1099-K, or 1099-NEC tax forms to your connected accounts.\n#Configure account dashboards\nUse Connect embedded components to add connected account Dashboard functionality to your website.\nLearn about embedding Dashboard functionality for your connected accounts into your website.\nLearn about current and upcoming embedded components.\nLearn how to customize embedded components to match the style and brand of your website.\n#Enhance your Connect integration\nCalculate, collect, and report taxes for your platform or connected accounts.\nLearn how to use Stripe Radar to identify fraud in Connect account charges.\nLearn how a SaaS platform charges its connected accounts with Stripe Billing using Accounts v2.\n#Features\n• Automated onboarding and verificationOnboard and verify sellers using connected accounts with Stripe-hosted flows, or build your own with our APIs.\n• Risk management and fraud preventionUse Connect to help prevent, detect, and mitigate risks and fraud.\n• Account managementEnable sellers to manage their account with Stripe-hosted Dashboards, embedded components, or custom interfaces you can build with our APIs.\n• Accept global paymentsIntegrate payments and route funds to sellers on your platform, and enable users to accept 135+ currencies using common payment methods.\n• PayoutsPay out sellers in 40+ countries with a variety of payout options. Enable cross-border payouts for global sellers.\n• Platform toolsManage your platform or marketplace with a sophisticated suite of platform tooling for monetization, risk management, and tax reporting.\nAutomated onboarding and verificationOnboard and verify sellers using connected accounts with Stripe-hosted flows, or build your own with our APIs.\nRisk management and fraud preventionUse Connect to help prevent, detect, and mitigate risks and fraud.\nAccount managementEnable sellers to manage their account with Stripe-hosted Dashboards, embedded components, or custom interfaces you can build with our APIs.\nAccept global paymentsIntegrate payments and route funds to sellers on your platform, and enable users to accept 135+ currencies using common payment methods.\nPayoutsPay out sellers in 40+ countries with a variety of payout options. Enable cross-border payouts for global sellers.\nPlatform toolsManage your platform or marketplace with a sophisticated suite of platform tooling for monetization, risk management, and tax reporting."}, {"path": "connect\\1099-K.md", "url": "https://docs.stripe.com/connect/1099-K", "content": "#1099-K form state requirements | Stripe Documentation\nURL: https://docs.stripe.com/connect/1099-K\n\n#1099-K form state requirements\n#View the state requirements for 1099-K forms.\n#Warning\nSome participating State regulatory agencies haven’t fully finalized filing requirements and requirements remain subject to change for the 2024 tax season. Updates that occur to this page are automatically reflected in the form status badges and counts in the tax reporting Dashboard.\nFor 1099-K forms, the IRS requires filing if, in a calendar year, the gross amount of total reportable payments exceeds $5,000 and there are more than 0 transactions. Filing requirements for some states might differ from federal requirements.\nWe outline state filing requirements for 1099-K forms to help you identify which states you can file directly in your Dashboard, which states require a state tax registration or withholding ID when filing, and which states you’re responsible for filing directly with.\n#Warning\nIf you have done backup withholding or state withholding, you might have additional reporting requirements with states. We recommend that you consult a tax advisor.\n STATE | 1099-K FILING REQUIRED | DOES STRIPE FILE | FILING DUE DATE | FILING THRESHOLD | IF ISSUED, PROVIDE STATE NUMBER \n --- | --- | --- | --- | --- | --- \n Alabama | State Portal |  | April 30 | Same as IRS | – \n Alaska | No | – | – | - | – \n Arizona | If State Witholding |  | Same as IRS | $0 | – \n Arkansas | CFSF |  | Same as IRS | $2,500 | – \n California | CFSF |  | Same as IRS | Same as IRS | – \n Colorado | If State Witholding |  | Same as IRS | $0 | – \n Connecticut | State Portal |  | April 30 | Same as IRS | Connecticut Tax Registration Number \n Delaware | No | – | – | - | – \n District of Columbia | State Portal |  | Same as IRS | $600 | – \n Florida | State Portal |  | April 30 | Same as IRS | – \n Georgia | State Portal |  | Same as IRS | Same as IRS | – \n Hawaii | CFSF |  | Same as IRS | Same as IRS | – \n Idaho | No | – | – | - | – \n Illinois | State Portal |  | Same as IRS | $1,000 and 4 transactions | – \n Indiana | If State Witholding |  | Same as IRS | $0 | – \n Iowa | If State Witholding |  | February 15 | $0 | – \n Kansas | CFSF |  | Same as IRS | Same as IRS | Kansas Withholding Tax Account Number \n Kentucky | If State Witholding |  | Same as IRS | $0 | – \n Louisiana | If State Witholding |  | Same as IRS | $0 | – \n Maine | State Portal |  | – | Same as IRS | – \n Maryland | State Portal |  | Same as IRS | $600 | Maryland Central Registration Number \n Massachusetts | State Portal |  | Same as IRS | $600 | – \n Michigan | No | – | – | - | – \n Minnesota | If State Witholding |  | Same as IRS | $0 | – \n Mississippi | CFSF |  | – | Same as IRS | – \n Missouri | No | – | – | - | – \n Montana | State Portal |  | April 1 | $600 | – \n Nebraska | No | – | – | - | – \n Nevada | No | – | – | - | – \n New Hampshire | No | – | – | - | – \n New Jersey | CFSF |  | Same as IRS | $1,000 | – \n New Mexico | No | – | – | - | – \n New York | State Portal |  | April 30 | Same as IRS | – \n North Carolina | State Portal |  | Same as IRS | $600 | NC Withholding ID Number or EIN \n North Dakota | If State Witholding |  | Same as IRS | $0 | – \n Ohio | No | – | – | - | – \n Oklahoma | No | – | – | - | – \n Oregon | State Portal |  | Same as IRS | Same as IRS | – \n Pennsylvania | No | – | – | - | – \n Rhode Island | If State Witholding |  | Same as IRS | $100 | – \n South Carolina | If State Witholding |  | Same as IRS | $0 | SC Withholding File Number or EIN \n South Dakota | No | – | – | - | – \n Tennessee | State Portal |  | April 30 | Same as IRS | – \n Texas | No | – | – | - | – \n Utah | If State Witholding |  | Same as IRS | $0 | – \n Vermont | State Portal |  | April 30 | $600 | Vermont Withholding Account Number \n Virginia | State Portal |  | April 30 | $600 | – \n Washington | No | – | – | - | – \n West Virginia | If State Witholding |  | Same as IRS | $0 | – \n Wisconsin | If State Witholding |  | Same as IRS | $0 | Wisconsin Withholding Tax Number \n Wyoming | No | – | – | - | – \n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\nJanuary 22, 2025 is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard\nIf a Wisconsin withholding tax number isn’t provided, Stripe uses the default value of 036888888888801 instead.\n`036888888888801`## How to interpret form state requirements\nStripe supports filing in all states that require 1099-K filing and don’t have withholding-based filing requirements. When you file your 1099-K forms from the Tax forms view in the Dashboard, Stripe submits your forms to the IRS and all qualifying states.\n#1099-K FILING REQUIRED\n State Portal | Stripe submits the forms directly to these states. An additional state filing fee of 1.49 USD applies per 1099-K form filed directly with state revenue authorities. \n CFSF | States listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.Some states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states. \n If State Withholding | You’re required to file a 1099-K form with that state only if you withheld state taxes. In your Dashboard, you can specify the amount withheld by updating the form and updating the statetaxwithheld column. When you file your 1099-K forms in the Dashboard, we automatically export forms eligible for state filing and with statetaxwithheld so you can file directly with applicable states. \nCFSF\nStates listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.\nSome states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states.\n`statetaxwithheld``statetaxwithheld`#### Note\nSome forms that appear to be below the federal filing threshold can also appear as Ready or Needs attention due to Grouped TINs or state filing thresholds. Learn more\n`Ready``Needs attention`### FILING DUE DATE\nWhile the IRS filing deadline for 1099-K forms is March 31 and the IRS deadline to deliver 1099 forms to your payees is January 31, we coupled filing and delivery together to streamline the tax reporting process.  January 22, 2025 is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard. This guarantees forms are filed with the IRS and a copy is sent to the recipients before the IRS delivery deadline of January 31.\n#STATE NUMBERS\nState Tax Registration or Withholding IDs are only required for some states. After you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the Tax forms settings page. In the Dashboard, click Settings. On Product settings, under Connect, click Tax form settings. When filing forms in your Dashboard, you must provide an appropriate ID in states that require one.\n#See also\n• File form with states\n• Add the state tax Registration or withholding ID"}, {"path": "connect\\1099-MISC.md", "url": "https://docs.stripe.com/connect/1099-MISC", "content": "#1099-MISC form state requirements | Stripe Documentation\nURL: https://docs.stripe.com/connect/1099-MISC\n\n#1099-MISC form state requirements\n#View the state requirements for 1099-MISC forms.\n#Warning\nSome participating State regulatory agencies haven’t fully finalized filing requirements and requirements remain subject to change for the 2024 tax season. Updates that occur to this page are automatically reflected in the form status badges and counts in the tax reporting Dashboard.\nFor 1099-MISC forms, the IRS requires filing if the amount of total reportable payments is $600 or more. Filing requirements for some states might differ from federal requirements.\nWe outline state filing requirements for 1099-MISC forms to help you identify which states you can file directly in your Dashboard, which states require a state tax registration or withholding ID when filing, and which states you’re responsible for filing directly with.\n#Note\nIn the case of some box types, we always supply the federal threshold:\n# Royalties - $10\n# Payments in lieu of dividends or interest - $10\n# Fishing boat proceeds - $0.01\n# Excess golden parachute payments - $0.01\n#Warning\nIf you have done backup withholding or state withholding, you might have additional reporting requirements with states. We recommend that you consult a tax advisor.\n STATE | 1099-MISC FILING REQUIRED | DOES STRIPE FILE | FILING DUE DATE | FILING THRESHOLD | IF ISSUED, PROVIDE STATE NUMBER \n --- | --- | --- | --- | --- | --- \n Alabama | If State Witholding |  | Same as IRS | $0 | – \n Alaska | No | – | – | - | – \n Arizona | If State Witholding |  | Same as IRS | $0 | – \n Arkansas | CFSF |  | Same as IRS | $2,500 | – \n California | CFSF |  | Same as IRS | Same as IRS | – \n Colorado | If State Witholding |  | Same as IRS | $0 | – \n Connecticut | If State Witholding |  | Same as IRS | $0 | Connecticut Tax Registration Number \n Delaware | State Portal |  | Same as IRS | Same as IRS | Must use EIN \n District of Columbia | State Portal |  | Same as IRS | Same as IRS | – \n Florida | No | – | – | - | – \n Georgia | If State Witholding |  | Same as IRS | Same as IRS | – \n Hawaii | CFSF |  | Same as IRS | Same as IRS | – \n Idaho | CFSF |  | February 28 | Same as IRS | Idaho Withholding Account Number \n Illinois | No | – | – | - | – \n Indiana | If State Witholding |  | Same as IRS | $0 | – \n Iowa | If State Witholding |  | February 15 | $0 | – \n Kansas | If State Witholding |  | Same as IRS | $0 | Kansas Withholding Tax Account Number \n Kentucky | If State Witholding |  | Same as IRS | $0 | – \n Louisiana | If State Witholding |  | Same as IRS | $0 | – \n Maine | State Portal |  | Same as IRS | Same as IRS | – \n Maryland | If State Witholding |  | Same as IRS | $0 | Maryland Central Registration Number \n Massachusetts | State Portal |  | Same as IRS | Same as IRS | – \n Michigan | CFSF |  | Same as IRS | Same as IRS | – \n Minnesota | If State Witholding |  | Same as IRS | $0 | – \n Mississippi | If State Witholding |  | February 28 | $0 | – \n Missouri | CFSF |  | Same as IRS | Same as IRS | – \n Montana | State Portal |  | February 28 | Same as IRS | – \n Nebraska | If State Witholding |  | Same as IRS | $0 | Nebraska Number \n Nevada | No | – | – | - | – \n New Hampshire | No | – | – | - | – \n New Jersey | CFSF |  | Same as IRS | Same as IRS | – \n New Mexico | CFSF |  | Same as IRS | Same as IRS | – \n New York | No | – | – | - | – \n North Carolina | If State Witholding |  | Same as IRS | $0 | NC Withholding ID Number or EIN \n North Dakota | If State Witholding |  | Same as IRS | $0 | – \n Ohio | If State Witholding |  | Same as IRS | $0 | – \n Oklahoma | CFSF |  | Same as IRS | Same as IRS | Oklahoma Withholding Account ID \n Oregon | State Portal |  | Same as IRS | Same as IRS | – \n Pennsylvania | State Portal |  | Same as IRS | Same as IRS | PA Employer Account ID \n Rhode Island | If State Witholding |  | Same as IRS | $100 | – \n South Carolina | If State Witholding |  | Same as IRS | $0 | SC Withholding File Number or EIN \n South Dakota | No | – | – | - | – \n Tennessee | No | – | – | - | – \n Texas | No | – | – | - | – \n Utah | If State Witholding |  | Same as IRS | $0 | – \n Vermont | If State Witholding |  | Same as IRS | $0 | Vermont Withholding Account Number \n Virginia | If State Witholding |  | Same as IRS | $0 | – \n Washington | No | – | – | - | – \n West Virginia | If State Witholding |  | Same as IRS | $0 | – \n Wisconsin | If State Witholding |  | Same as IRS | $0 | Wisconsin Withholding Tax Number \n Wyoming | No | – | – | - | – \n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\nJanuary 22, 2025 is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard\nIf a Wisconsin withholding tax number isn’t provided, Stripe uses the default value of 036888888888801 instead.\n`036888888888801`## How to interpret form state requirements\nStripe supports filing in all states that require 1099-MISC filing and don’t have withholding-based filing requirements. When you file your 1099-MISC forms from the Tax forms view in the Dashboard, Stripe submits your forms to the IRS and all qualifying states.\n#1099-MISC FILING REQUIRED\n State Portal | Stripe submits the forms directly to these states. An additional state filing fee of 1.49 USD applies per 1099-MISC form filed directly with state revenue authorities. \n CFSF | States listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.Some states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states. \n If State Withholding | You’re required to file a 1099-MISC form with that state only if you withheld state taxes. In your Dashboard, you can specify the amount withheld by updating the form and updating the statetaxwithheld column. When you file your 1099-MISC forms in the Dashboard, we automatically export forms eligible for state filing and with statetaxwithheld so you can file directly with applicable states. \nCFSF\nStates listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.\nSome states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states.\n`statetaxwithheld``statetaxwithheld`#### Note\nSome forms that appear to be below the federal filing threshold can also appear as Ready or Needs attention due to Grouped TINs or state filing thresholds. Learn more\n`Ready``Needs attention`### FILING DUE DATE\nWhile the IRS filing deadline for 1099-MISC forms is March 31 and the IRS deadline to deliver 1099 forms to your payees is January 31, we coupled filing and delivery together to streamline the tax reporting process.  January 22, 2025 is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard. This guarantees forms are filed with the IRS and a copy is sent to the recipients before the IRS delivery deadline of January 31.\n#STATE NUMBERS\nSome states require State Tax Registration or Withholding IDs. Delaware and Pennsylvania typically reject state filings for 1099-MISC, when state IDs are missing and a state ID was issued. After you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the Tax forms settings page. In the Dashboard, click Settings. On Product settings, under Connect, click Tax form settings. When filing forms in your Dashboard, you must provide an appropriate ID in states that require one.\n#See also\n• File form with states\n• Add the state tax Registration or withholding ID"}, {"path": "connect\\1099-NEC.md", "url": "https://docs.stripe.com/connect/1099-NEC", "content": "#1099-NEC form state requirements | Stripe Documentation\nURL: https://docs.stripe.com/connect/1099-NEC\n\n#1099-NEC form state requirements\n#View the state requirements for 1099-NEC forms.\n#Warning\nSome participating State regulatory agencies haven’t fully finalized filing requirements and requirements remain subject to change for the 2024 tax season. Updates that occur to this page are automatically reflected in the form status badges and counts in the tax reporting Dashboard.\nFor 1099-NEC forms, the IRS requires filing if the amount of total reportable payments is $600 or more. Filing requirements for some states might differ from federal requirements.\nWe outline state filing requirements for 1099-NEC forms to help you identify which states you can file directly in your Dashboard, which states require a state tax registration or withholding ID when filing, and which states you’re responsible for filing directly with.\n#Warning\nIf you have done backup withholding or state withholding, you might have additional reporting requirements with states. We recommend that you consult a tax advisor.\n STATE | 1099-NEC FILING REQUIRED | DOES STRIPE FILE | FILING DUE DATE | FILING THRESHOLD | IF ISSUED, PROVIDE STATE NUMBER \n --- | --- | --- | --- | --- | --- \n Alabama | If State Witholding |  | Same as IRS | $0 | – \n Alaska | No | – | – | - | – \n Arizona | If State Witholding |  | Same as IRS | $0 | – \n Arkansas | CFSF |  | Same as IRS | Same as IRS | – \n California | CFSF |  | Same as IRS | Same as IRS | – \n Colorado | If State Witholding |  | March 31 | $0 | – \n Connecticut | If State Witholding |  | Same as IRS | $0 | Connecticut Tax Registration Number \n Delaware | State Portal |  | Same as IRS | Same as IRS | Must use EIN \n District of Columbia | State Portal |  | Same as IRS | Same as IRS | – \n Florida | No | – | – | - | – \n Georgia | If State Witholding |  | Same as IRS | Same as IRS | – \n Hawaii | CFSF |  | Same as IRS | Same as IRS | – \n Idaho | CFSF |  | February 28 | Same as IRS | Idaho Withholding Account Number \n Illinois | No | – | – | - | – \n Indiana | If State Witholding |  | Same as IRS | $0 | – \n Iowa | If State Witholding |  | February 15 | $0 | – \n Kansas | If State Witholding |  | Same as IRS | $0 | Kansas Withholding Tax Account Number \n Kentucky | If State Witholding |  | Same as IRS | $0 | – \n Louisiana | If State Witholding |  | Same as IRS | $0 | – \n Maine | State Portal |  | – | Same as IRS | – \n Maryland | If State Witholding |  | Same as IRS | $0 | Maryland Central Registration Number \n Massachusetts | State Portal |  | Same as IRS | Same as IRS | – \n Michigan | If State Witholding |  | Same as IRS | $0 | – \n Minnesota | If State Witholding |  | Same as IRS | $0 | – \n Mississippi | If State Witholding |  | February 28 | $0 | – \n Missouri | CFSF |  | Same as IRS | Same as IRS | – \n Montana | State Portal |  | Same as IRS | Same as IRS | – \n Nebraska | If State Witholding |  | Same as IRS | $0 | Nebraska Number \n Nevada | No | – | – | - | – \n New Hampshire | No | – | – | - | – \n New Jersey | CFSF |  | Same as IRS | Same as IRS | – \n New Mexico | No | – | – | - | – \n New York | No | – | – | - | – \n North Carolina | If State Witholding |  | Same as IRS | $0 | NC Withholding ID Number or EIN \n North Dakota | If State Witholding |  | Same as IRS | $0 | – \n Ohio | If State Witholding |  | Same as IRS | $0 | – \n Oklahoma | CFSF |  | Same as IRS | Same as IRS | – \n Oregon | State Portal |  | Same as IRS | Same as IRS | – \n Pennsylvania | State Portal |  | Same as IRS | Same as IRS | PA Employer Account ID \n Rhode Island | If State Witholding |  | Same as IRS | $100 | – \n South Carolina | If State Witholding |  | Same as IRS | $0 | SC Withholding File Number or EIN \n South Dakota | No | – | – | - | – \n Tennessee | No | – | – | - | – \n Texas | No | – | – | - | – \n Utah | If State Witholding |  | Same as IRS | $0 | – \n Vermont | If State Witholding |  | Same as IRS | $0 | Vermont Withholding Account Number \n Virginia | If State Witholding |  | Same as IRS | $0 | – \n Washington | No | – | – | - | – \n West Virginia | If State Witholding |  | Same as IRS | $0 | – \n Wisconsin | If State Witholding |  | Same as IRS | $0 | Wisconsin Withholding Tax Number \n Wyoming | No | – | – | - | – \n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\n–\nJanuary 22, 2025 is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard\nIf a Wisconsin withholding tax number isn’t provided, Stripe uses the default value of 036888888888801 instead.\n`036888888888801`## How to interpret form state requirements\nStripe supports filing in all states that require 1099-NEC filing and don’t have withholding-based filing requirements. When you file your 1099-NEC forms from the Tax forms view in the Dashboard, Stripe submits your forms to the IRS and all qualifying states.\n#1099-NEC FILING REQUIRED\n State Portal | Stripe submits the forms directly to these states. An additional state filing fee of 1.49 USD applies per 1099-NEC form filed directly with state revenue authorities. \n CFSF | States listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.Some states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states. \n If State Withholding | You’re required to file a 1099-NEC form with that state only if you withheld state taxes. In your Dashboard, you can specify the amount withheld by updating the form and updating the statetaxwithheld column. When you file your 1099-NEC forms in the Dashboard, we automatically export forms eligible for state filing and with statetaxwithheld so you can file directly with applicable states. \nCFSF\nStates listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.\nSome states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states.\n`statetaxwithheld``statetaxwithheld`#### Note\nSome forms that appear to be below the federal filing threshold can also appear as Ready or Needs attention due to Grouped TINs or state filing thresholds. Learn more\n`Ready``Needs attention`### FILING DUE DATE\nWhile the IRS deadline to file 1099-NEC forms and deliver forms to your payees is January 31, we coupled filing and delivery together to streamline the process. January 22, 2025 is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard. This guarantees forms are filed with the IRS and a copy is sent to the recipients before the IRS delivery deadline of January 31.\n#STATE NUMBERS\nSome states require State Tax Registration or Withholding IDs. Delaware and Pennsylvania typically reject state filings for 1099-NEC, when state IDs are missing and a state ID was issued. After you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the Tax forms settings page. In the Dashboard, click Settings. On Product settings, under Connect, click Tax form settings. When filing forms in your Dashboard, you must provide an appropriate ID in states that require one.\n#See also\n• File form with states\n• Add the state tax Registration or withholding ID"}, {"path": "connect\\account-balances.md", "url": "https://docs.stripe.com/connect/account-balances", "content": "#Understanding Connect account balances | Stripe Documentation\nURL: https://docs.stripe.com/connect/account-balances\n\n#Understanding Connect account balances\n#Learn how Stripe account balances work when using Connect.\nBoth your platform account and a connected account are still just Stripe accounts, each with their own, separate account balance.\nAll Stripe accounts can have balances in two states:\n• pending, meaning the funds are not yet available to pay out\n• available, meaning the funds are available to pay out now\n`pending``available`With non-Connect accounts, processing charges increases the Stripe account balance. The charged amount, less any Stripe fees, is initially reflected on the pending balance, and becomes available on a 2-day rolling basis. (This timing can vary by country and account.) Available funds can be paid out to a bank account or debit card. Payouts reduce the Stripe account balance accordingly.\nWith Connect, your platform account and each connected account has its own pending and available balances. The allocation of funds between them depends on the type of charges that you use.\n`pending``available`Further, a platform account can also have a connectreserved balance, used to offset negative balances on connected accounts.\n`connectreserved`#### Note\nWhen you transfer funds between your platform’s balance and a connected account’s balance, Stripe doesn’t automatically retry failures. For example, if you attempt to transfer funds from your platform’s balance to a connected account’s balance, but your platform has insufficient available funds, that transfer attempt fails. If you then add funds to your available balance, they don’t automatically transfer to the connected account’s balance. You must explicitly attempt the transfer again.\n#Check a connected account’s balance\nTo check the balance of a connected account, perform a retrieve balance call authenticated as the connected account. The returned Balance object reflects the pending and available balances.\n`pending``available`curl https://api.stripe.com/v1/balance \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"\n`curl https://api.stripe.com/v1/balance \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"`## Accounting for negative balances\nSome actions, such as refunds and chargebacks, create negative transactions in a Stripe account. Stripe handles negative transactions to help maintain a positive Stripe balance for related accounts:\n• If at all possible, Stripe automatically offsets negative transactions against future payments\n• Stripe first assigns negative transactions to the account on which the associated charge was made. For example, when charging on a connected account, a refund or chargeback comes from the connected account. When charging on your platform, a refund or chargeback comes from your platform account.\nDespite these measures, if a connected account balance becomes negative, ultimate responsibility depends on the account’s controller.losses.payments property:\n• stripe (Including Standard accounts): The connected account is responsible for covering its own negative Stripe balances.\n• application (Including Express and Custom accounts): The platform is responsible for covering the connected account’s negative Stripe balances.\n`stripe``application`While an account’s balance is negative, you can’t send payouts to the account’s bank or debit card on their behalf. Stripe will resume sending payouts to the connected account when the account’s Stripe balance becomes positive.\n#Automatically debit connected accounts\nIf Stripe hasn’t already attempted to debit a connected account’s external account for a negative balance, you can allow Stripe to do so by setting debitnegativebalances to true.\n#Caution\nStripe can’t correct a negative Stripe account balance using a debit card.\nAuto debit for negative balances is supported for banks in the following countries:\n• Australia\n• Canada\n• Europe (SEPA countries, which includes the UK)\n• New Zealand\n• United States\nSee the Auto Debit FAQ for a detailed breakdown of which countries and account types are supported.\nEnabling debitnegativebalances triggers debits as needed, even when the connected account is on manual payouts. For more details, see Impact from chargebacks and negative balances.\n`debitnegativebalances`## Understanding connected reserve balances\nTo protect against negative connected account available balances that your platform is responsible for, Stripe holds a reserve on your platform account’s available balance. Depending on the connected account’s country, Stripe initiates a bank withdrawal on the account’s bank account to cover the negative balance. Although the available balance for the account zeroes out as soon as the withdrawal is posted, the platform reserve for that account is held for an additional 3 business days. You’ll see this reserve reflected in the Dashboard and exported reports (as a reserve transaction).\n`available``available``available`There are three kinds of balance activities related to reserves:\n• Funds reserved to cover a negative balance on a connected account. When a connected account’s balance becomes negative, Stripe temporarily reserves a portion of your balance to ensure that funds can be covered by creating a balance transaction with the type reservetransaction.\n• Funds released after a positive balance change on a connected account. When a connected account’s previously negative balance becomes less negative due to activity on that account (for example, through new charges), a corresponding portion of your platform’s reserve balance is released through a balance transaction with the type reservetransaction.\n• Funds collected due to a long-standing negative balance on a connected account. When a connected account holds a negative balance amount for 180 days, Stripe transfers a portion of your balance to zero out that account’s balance by creating a balance transaction with the type connectcollectiontransfer.\n`reservetransaction``reservetransaction``connectcollectiontransfer`To see the current reserves held on your account, perform a retrieve balance API call but for your own account (that is, not authorized as another user as in the above).\nTo clear a connected account’s negative balance, and thereby remove the reserve on your account, send a transfer to the applicable account. If a connected account has a negative balance for more than 180 days, Stripe will automatically transfer your reserves to the connected account to zero out the balance. Dashboard pages and reports show these transfers as Connect collection transfers.\n#Caution\nAfter a connected account’s balance is cleared through a collection transfer, we recommend that you reject the account to prevent future losses.\n#Holding funds\nIf you need more granular control over scheduling payouts to connected accounts where your platform is responsible for negative balances, you can take one of the following approaches:\n• Hold funds in the platform balance before transferring them to a connected account balance\n• Hold funds in a connected account’s balance before paying them out to an external account\nWe recommend that platforms hold funds only when there’s a clear purpose and a commitment to transfer them or pay them out when an event occurs or a precondition is satisfied. The typical use case for holding funds is on-demand services platforms, where the marketplace usually waits for the service to be completed and confirmed before paying out to the service provider (for example, rentals, delivery services, and ride-sharing).\nPlatforms should refrain from holding funds arbitrarily, and instead pay out to their connected accounts as soon as they’re identified. This is usually when the charge is made. If you aren’t sure about holding funds, speak with your legal advisor.\nFor compliance reasons, we can hold funds in reserve for a period of time that’s based on the merchant’s country, as shown below:\n Country | Holding Period \n --- | --- \n Thailand | 10 days \n United States | 2 years \n All other countries | 90 days \n#See also\n• Creating Direct Charges\n• Creating Destination Charges on Your Platform\n• Creating Separate Charges and Transfers"}, {"path": "connect\\account-capabilities.md", "url": "https://docs.stripe.com/connect/account-capabilities", "content": "#Account capabilities | Stripe Documentation\nURL: https://docs.stripe.com/connect/account-capabilities\n\n#Account capabilities\n#Learn about capabilities you can enable for accounts and the requirements you must satisfy to use them.\nThe capabilities you request for a connected account determine the information you need to collect for that account. To reduce onboarding effort, only request the capabilities you need. The more capabilities you request, the more information you must collect.\nYou can start by completing the platform profile to understand which capabilities might be appropriate for your platform.\n#Note\nFor some capabilities, requesting them enables them permanently. Attempting to remove or unrequest a permanent capability returns an error.\nAfter creating an account, you can request additional capabilities and remove existing non-permanent capabilities. For connected accounts that other platforms control, you can’t unrequest capabilities.\n#Supported capabilities\nFollowing is a list of available capabilities. Click an item to expand or collapse it.\n#Transfers\n#Card payments\n#US tax reporting\n#Payment methods\n#India international payments\n#Multiple capabilities\nRequesting multiple capabilities for a connected account is common, but involves the following considerations:\n• Capabilities operate independently of each other.\n• If a connected account has both cardpayments and transfers, and the status of either one is inactive, then both capabilities are disabled.\n• You can request or unrequest a capability for a connected account at any time during the account’s lifecycle.\n`cardpayments``transfers``status``inactive`Capabilities also allow you to collect information for multiple purposes at the same time. For example, you can collect both required tax information and the information required for a requested capability. If you’re onboarding a connected account with the transfers capability and they’re required to file an IRS form 1099-MISC (a US federal tax reporting form), you can collect information for both at the same time.\n`transfers`## Create an account with capabilities\nCapabilities are set on the Account object. To get the list of available capabilities for an Account, use the listcapabilities endpoint.\nAccount creation and requesting capabilities differ for connected accounts in different configurations.\n• For connected accounts with access to the full Stripe Dashboard, including Standard accounts, some capabilities are requested automatically, based on their country. You can also request other capabilities for them.\n• For connected accounts with access to the Express Dashboard, including Express accounts, you can either request their capabilities or use the onboarding configuration settings to automate capability requests.\n• For connected accounts without access to a Stripe-hosted dashboard, including Custom accounts, you must request their capabilities.\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true`Information requirements vary depending on the capability, but they often relate to identity verification or other information specific to a payment type.\nWhen your connected account is successfully created, you can retrieve a list of its requirements:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`In the response, the requirements hash specifies the required information. The values for payoutsenabled and chargesenabled indicate whether payouts and charges are enabled for the account.\n`requirements``payoutsenabled``chargesenabled`## Capabilities for existing connected accounts\nThe following sections describe how to preview information requirements or manage capabilities for existing connected accounts using the Capabilities API.\n#Preview information requirements\nYou can preview what information is needed from your connected account for a particular capability either before or after that capability has been requested.\nWhen you request capabilities, account.updated webhooks fire and the account’s requirements can change. To enable a requirement faster and avoid disabling the account, preview the requirements and collect any required information before requesting the capability.\n`account.updated`The following example lists the requirements for the cardpayments capability for a specific account.\n`cardpayments`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/capabilities/cardpayments \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/capabilities/cardpayments \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`In the response, check the requirements hash to see what information is needed:\n`requirements`{\n  \"id\": \"cardpayments\",\n  \"object\": \"capability\",\n  \"account\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requested\": false,\n  \"requestedat\": null,\n  \"requirements\": {\n    \"pastdue\": [],\n    \"currentlydue\": [\"company.taxid\", ...],\n    \"eventuallydue\": [...],\n    \"disabledreason\": ...,\n    \"currentdeadline\": ...,\n  },\n  \"status\": \"unrequested\"\n}\n`{\n  \"id\": \"cardpayments\",\n  \"object\": \"capability\",\n  \"account\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requested\": false,\n  \"requestedat\": null,\n  \"requirements\": {\n    \"pastdue\": [],\n    \"currentlydue\": [\"company.taxid\", ...],\n    \"eventuallydue\": [...],\n    \"disabledreason\": ...,\n    \"currentdeadline\": ...,\n  },\n  \"status\": \"unrequested\"\n}`The value for status identifies whether the capability has been requested. When the value is requested, the account’s requirements are active.\n`status`In addition to previewing a capability’s requirements before requesting it, you can use the same endpoint to view a capability’s current requirements. That can help you stay informed when requirements change.\n#Request and unrequest capabilities\nTo request a capability for an account, set the capability’s requested value to true by updating the account. If the request succeeds, the API returns requested: true in the response.\n`requested``true``requested: true`To unrequest a capability for an account, set the capability’s requested value to false by updating the account. If the capability can’t be removed, the call returns an error. If the call succeeds, the API returns requested: false in the response.\n`requested``false``requested: false`You can also request and remove an account’s capabilities from the Dashboard. If a capability can’t be removed, its Remove button is disabled.\nThe example below requests the transfers capability for a specific connected account:\n`transfers`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/capabilities/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d requested=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/capabilities/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d requested=true`The example below requests multiple capabilities for a specific connected account:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"capabilities[bancontactpayments][requested]\"=true \\\n  -d \"capabilities[epspayments][requested]\"=true \\\n  -d \"capabilities[idealpayments][requested]\"=true \\\n  -d \"capabilities[p24payments][requested]\"=true \\\n  -d \"capabilities[sepadebitpayments][requested]\"=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"capabilities[bancontactpayments][requested]\"=true \\\n  -d \"capabilities[epspayments][requested]\"=true \\\n  -d \"capabilities[idealpayments][requested]\"=true \\\n  -d \"capabilities[p24payments][requested]\"=true \\\n  -d \"capabilities[sepadebitpayments][requested]\"=true`## Deprecated capabilities\nCapabilities described in the following sections are deprecated. If possible, don’t request them for new accounts. If you have existing accounts that use deprecated capabilities, we recommend that you update them to use other capabilities instead.\n#legacypayments\nThe legacypayments capability enables charges, payouts, and transfers. Newer accounts enable those actions using the cardpayments and transfers capabilities, which support more flexible configurations.\n`legacypayments``cardpayments``transfers`We recommend that you take the following steps:\n# Update your connected account onboarding process to request the appropriate combination of cardpayments and transfers instead of legacypayments.\n# Update your existing connected accounts to request the appropriate combination of cardpayments and transfers.\n# Update any code that checks the status of legacypayments to check the status of either legacypayments or the appropriate new capability. For example, update code that relies on an account’s ability to make card payments to run when either legacypayments or cardpayments is active. Similarly, update code that relies on an account’s ability to accept transfers to run when either legacypayments or transfers is active. The updated code works throughout the process of transitioning to the new capabilities, regardless of when the new capabilities become active.\n# After the new capabilities are active for all of your connected accounts, remove references to legacypayments from your code.\nUpdate your connected account onboarding process to request the appropriate combination of cardpayments and transfers instead of legacypayments.\n`cardpayments``transfers``legacypayments`Update your existing connected accounts to request the appropriate combination of cardpayments and transfers.\n`cardpayments``transfers`Update any code that checks the status of legacypayments to check the status of either legacypayments or the appropriate new capability. For example, update code that relies on an account’s ability to make card payments to run when either legacypayments or cardpayments is active. Similarly, update code that relies on an account’s ability to accept transfers to run when either legacypayments or transfers is active. The updated code works throughout the process of transitioning to the new capabilities, regardless of when the new capabilities become active.\n`legacypayments``legacypayments``legacypayments``cardpayments``legacypayments``transfers`After the new capabilities are active for all of your connected accounts, remove references to legacypayments from your code.\n`legacypayments`#### Note\nYou can’t unrequest the legacypayments capability. Stripe will notify you in advance before we remove it.\n`legacypayments`If you do business in Canada, Stripe automatically requests cardpayments and transfers for your accounts that use legacypayments, in order to comply with updated requirements. During the process, you might see the following values in your connected accounts’ API responses.\n`cardpayments``transfers``legacypayments`| Before requesting new capabilities | New capabilities requested | New requirements completed |\n --- | --- | --- \n| capabilities: {\n  legacypayments: \"active\"\n},\nchargesenabled: true,\npayoutsenabled: true | capabilities: {\n  cardpayments: \"inactive\",\n  legacypayments: \"active\",\n  transfers: \"inactive\"\n},\nchargesenabled: true,\npayoutsenabled: true | capabilities: {\n  cardpayments: \"active\",\n  legacypayments: \"active\",\n  transfers: \"active\"\n},\nchargesenabled: true,\npayoutsenabled: true |\ncapabilities: {\n  legacypayments: \"active\"\n},\nchargesenabled: true,\npayoutsenabled: true\n`capabilities: {\n  legacypayments: \"active\"\n},\nchargesenabled: true,\npayoutsenabled: true`capabilities: {\n  cardpayments: \"inactive\",\n  legacypayments: \"active\",\n  transfers: \"inactive\"\n},\nchargesenabled: true,\npayoutsenabled: true\n`capabilities: {\n  cardpayments: \"inactive\",\n  legacypayments: \"active\",\n  transfers: \"inactive\"\n},\nchargesenabled: true,\npayoutsenabled: true`capabilities: {\n  cardpayments: \"active\",\n  legacypayments: \"active\",\n  transfers: \"active\"\n},\nchargesenabled: true,\npayoutsenabled: true\n`capabilities: {\n  cardpayments: \"active\",\n  legacypayments: \"active\",\n  transfers: \"active\"\n},\nchargesenabled: true,\npayoutsenabled: true`#### Note\nDuring the transition, cardpayments and transfers requirements might appear in pastdue. However, if legacypayments is active, then charges, transfers, and payouts remain enabled.\n`cardpayments``transfers``pastdue``legacypayments`## See also\n• Create a charge"}, {"path": "connect\\account-debits.md", "url": "https://docs.stripe.com/connect/account-debits", "content": "#Debit connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/account-debits\n\n#Debit connected accounts\n#Collect funds from a connected account by debiting its Stripe balance.\nAt times, your platform might need to collect funds from your connected accounts:\n• To charge the connected account directly for products or services\n• To recover funds for a previous refund\n• To make other adjustments to connected account balances (for example, to correct an error)\nWhen your platform is responsible for negative balances, such as with Express and Custom connected accounts, you can debit a connected account’s Stripe balance, transferring funds to your platform balance.\n#Note\nTo bill connected accounts where Stripe is responsible for negative balances, create a customer for each connected account and charge them using Stripe Billing subscriptions.\nThis creates a Transfer on the connected account and a Payment on the platform account.\n`Transfer``Payment`#### Caution\nUsing Account Debits requires getting legally binding consent from your connected accounts. This feature is available in Australia, Canada, Europe, Hong Kong, Japan, New Zealand, and the US. Stripe supports Account Debits only when both your platform and the connected account are in the same region (for example, both are in Japan). If you have interest in other regions, contact the sales team. Using Account Debits incurs an additional cost.\n#Requirements\nThis functionality is only supported for connected accounts where your platform is responsible for negative balances, including Express and Custom accounts. Additionally:\n• The connected account and the platform must be in the same region (that is, both must be in Europe or in the US).\n• The currency value must match the default currency of the connected  account.\n• Debiting an account can’t make the connected account balance become negative unless you have reserves enabled (on by default for all new platforms created after January 31, 2017) and have a bank account in the same currency as the debit.\n• If a connected account has a negative balance, Stripe might auto-debit the external account on file, depending on what country the connected account is in. If the external account hasn’t been verified, the debit can fail.\n• The maximum amount is 100,000 USD (or equivalent in your currency).\n`currency``amount`## Charging a connected account\nThe create a charge API call supports providing a connected account ID as the source value:\n`source`curl https://api.stripe.com/v1/charges \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=1500 \\\n  -d currency=usd \\\n  -d source={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/charges \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=1500 \\\n  -d currency=usd \\\n  -d source={{CONNECTEDACCOUNTID}}`The API call returns the Payment created on the platform account (note: it does not return a Charge).\n`Payment``Charge`This approach is appropriate for platforms that charge their connected accounts for goods and services (that is, for using the platform). For example, a platform can charge its connected accounts for additional fees or services through their Stripe balance, minimizing any need to collect an additional payment method and allowing for nearly instant availability of the funds.\n#See also\n• Creating Direct Charges\n• Creating Destination Charges on Your Platform\n• Creating Separate Charges and Transfers"}, {"path": "connect\\account-tokens.md", "url": "https://docs.stripe.com/connect/account-tokens", "content": "#Using tokens to securely transmit account data | Stripe Documentation\nURL: https://docs.stripe.com/connect/account-tokens\n\n#Using tokens to securely transmit account data\n#Connect platforms can use Stripe.js, the API, or mobile client libraries to securely collect account details from their users.\nBefore we can enable charges and payouts for connected accounts, you must fulfill Know Your Customer (KYC) requirements. To do so, provide identity verification information about your accounts to Stripe, which we then verify. Account Tokens and Person Tokens provide a secure and reliable way to perform this task. Tokens ensure that personally identifiable information (PII) doesn’t touch your servers, so your integration can operate securely. These tokens also allow Stripe to more accurately detect potential fraud.\nTokens can be used only for:\n• Legal entity details (information about the business or individual)\n• Person details\n• Indicating acceptance of the Stripe Connected Account Agreement\nTokens cannot be used for any other account information, including:\n• Configuration settings on the account (for example, payout schedules)\n• Non-sensitive info on the account (for example, support url, support phone number)\n• The country of the connected account\nTokens are created using Stripe.js, the API, or one of the mobile client libraries. The process is effectively the same as tokenizing payment details or external accounts. Your connected account’s information is sent directly to Stripe and exchanged for a token that can be used in create and update API calls.\n`create``update`#### Regional considerationsFrance\nFrench platforms must use account tokens, which are an alternative to the agent model for platform PSD2 compliance. The key benefit of tokens for French platforms is that information is transferred from the user directly to Stripe. Not having to store PII data is still a benefit, but not necessarily a requirement. For platforms in other countries, account tokens are optional but recommended.\n#Creating and using tokens\nTokens require both client-side and server-side code:\n# Create the HTML form that takes the user’s input.\n# Add JavaScript that sends the form data to Stripe, receives a token in return, and submits that token to your server.\n# Use the token in a server-side Stripe API call.\nThe following example shows how to use account tokens and person tokens. Both types are required when providing legal entity and person details for companies. If you onboard only individuals, you don’t need person tokens. Instead, create account tokens and pass the individual hash on the Account object to provide the required information.\n#Step 1: Create an HTML form\nThe first step is to create an HTML form that collects the required information for the account and the person. This includes acceptance of the Stripe Connected Account Agreement.\n#Collecting account and person details\nCreate form elements to collect the required information, such as name, address, and anything else that’s required in the user’s country.\n  \n  \n  \n    Business Name\n    \n  \n  \n    Business Address\n    \n      Street Address Line 1\n`\n  \n  \n  \n    Business Name\n    \n  \n  \n    Business Address\n    \n      Street Address Line 1`### Presenting the Stripe Connected Account Agreement\nAs the platform, you must make clear to your users that processing of payments is provided subject to the Stripe Connected Account Agreement. Indicating acceptance of the Stripe Connected Account Agreement is required when using an account token to create a new connected account.\n#Note\nOnly platforms that can accept the service agreement through the API may create Account Tokens that specify tosshownandaccepted.\nWe recommend you include language like the following, including links to both our agreement and your terms of service.\nBy clicking, you agree to our terms and the Stripe Connected Account Agreement.\n`By clicking, you agree to our terms and the Stripe Connected Account Agreement.`### Step 2: Add JavaScript\nNext, the page needs JavaScript that:\n# Interrupts the form submission.\n# Calls the stripe.createToken() method to request account and person tokens.\n# Sends the IDs of the received tokens to your server.\n`stripe.createToken()`For simplicity, data validation and error handling are omitted in the below code, but remember to add both to your actual integration.\nProvide to the stripe.createToken() method two arguments:\n`stripe.createToken()`- The value account or person, to specify the kind of token to create\n• A generic object of information\n`account``person`The JavaScript object provided as the second argument needs to parallel the structure of the Account or Person object you are tokenizing. Account tokens need either a top-level company or individual property, and person tokens need a top-level person property. Follow the object’s structure through all the required attributes. For example, line1 within address in the code block below is provided as person.address.line1.\n`line1``address`To represent the user’s acceptance of the Stripe Connected Account Agreement, provide a top-level tosshownandaccepted property with a value of true (only account tokens are used for this).\n`tosshownandaccepted`You must still use tokens—to create or update a person—using server-side code. You can send the token ID to your server using whatever approach makes sense for your application (for example, an XHR request). For simplicity, this code example stores the token ID in a hidden form input and then submits the form.\n// Assumes you've already included Stripe.js!\nconst stripe = Stripe('pktestf3duw0VsAEM2TJFMtWQ90QAT');\nconst myForm = document.querySelector('.my-form');\nmyForm.addEventListener('submit', handleForm);\nasync function handleForm(event) {\n  event.preventDefault();\n  const accountResult = await stripe.createToken('account', {\n    businesstype: 'company',\n    company: {\n      name: document.querySelector('.inp-company-name').value,\n      address: {\n        line1: document.querySelector('.inp-company-street-address1').value,\n        city: document.querySelector('.inp-company-city').value,\n        state: document.querySelector('.inp-company-state').value,\n        postalcode: document.querySelector('.inp-company-zip').value,\n      },\n    },\n    tosshownandaccepted: true,\n  });\n  const personResult = await stripe.createToken('person', {\n    person: {\n      firstname: document.querySelector('.inp-person-first-name').value,\n      lastname: document.querySelector('.inp-person-last-name').value,\n      address: {\n        line1: document.querySelector('.inp-person-street-address1').value,\n        city: document.querySelector('.inp-person-city').value,\n        state: document.querySelector('.inp-person-state').value,\n        postalcode: document.querySelector('.inp-person-zip').value,\n      },\n    },\n  });\n  if (accountResult.token && personResult.token) {\n    document.querySelector('#token-account').value = accountResult.token.id;\n    document.querySelector('#token-person').value = personResult.token.id;\n    myForm.submit();\n  }\n}\n`// Assumes you've already included Stripe.js!\nconst stripe = Stripe('pktestf3duw0VsAEM2TJFMtWQ90QAT');\nconst myForm = document.querySelector('.my-form');\nmyForm.addEventListener('submit', handleForm);\nasync function handleForm(event) {\n  event.preventDefault();\n  const accountResult = await stripe.createToken('account', {\n    businesstype: 'company',\n    company: {\n      name: document.querySelector('.inp-company-name').value,\n      address: {\n        line1: document.querySelector('.inp-company-street-address1').value,\n        city: document.querySelector('.inp-company-city').value,\n        state: document.querySelector('.inp-company-state').value,\n        postalcode: document.querySelector('.inp-company-zip').value,\n      },\n    },\n    tosshownandaccepted: true,\n  });\n  const personResult = await stripe.createToken('person', {\n    person: {\n      firstname: document.querySelector('.inp-person-first-name').value,\n      lastname: document.querySelector('.inp-person-last-name').value,\n      address: {\n        line1: document.querySelector('.inp-person-street-address1').value,\n        city: document.querySelector('.inp-person-city').value,\n        state: document.querySelector('.inp-person-state').value,\n        postalcode: document.querySelector('.inp-person-zip').value,\n      },\n    },\n  });\n  if (accountResult.token && personResult.token) {\n    document.querySelector('#token-account').value = accountResult.token.id;\n    document.querySelector('#token-person').value = personResult.token.id;\n    myForm.submit();\n  }\n}`Upon successfully receiving the tokens from Stripe, the JavaScript stores the token IDs in a hidden form input and then submits the form (to your server). The final steps are for your server-side code to use the tokens to create an account and a person.\n#Step 3: Create an account\nUse the account token ID to create the account. The country and business type are provided outside the token.\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d accounttoken={{ACCOUNTTOKENID}}\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d accounttoken={{ACCOUNTTOKENID}}`When creating an account token, setting tosshownandaccepted to true automatically populates the date, ip, and useragent attributes of the Account object’s tosacceptance attribute. If you create an account without using an account token, you must provide values for those attributes.\n`tosshownandaccepted``date``ip``useragent``Account`Make sure to note the account ID that’s returned so that you can use it to create person objects for the account.\n#Step 4: Create a person\nCreate a person by providing the ID of the person token as the value for the persontoken parameter (you also need the account ID the person is for). You can use the requirements hash on the Account object to determine what information needs to be collected and from which persons.\n`persontoken`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d firstname=Jane \\\n  -d lastname=Diaz \\\n  -d persontoken={{PERSONID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d firstname=Jane \\\n  -d lastname=Diaz \\\n  -d persontoken={{PERSONID}}`## Creating account tokens with the mobile SDKs\nYou can also create an account token with our Android or iOS SDKs. Note that currently only account tokens are supported on mobile. This is sufficient for creating an individual account, but you must use Stripe.js to create the person token that you need for a company account. Support for person tokens in the mobile SDKs will be available in a future release.\nimport UIKit\nimport StripePayments\nlet companyParams = STPConnectAccountCompanyParams()\ncompanyParams.name = company.name\ncompanyParams.address = STPConnectAccountAddress()\ncompanyParams.address.line1 = company.addressline1\ncompanyParams.address.city = company.addresscity\ncompanyParams.address.state = company.addressstate\ncompanyParams.address.country = company.addresscountry\ncompanyParams.address.postalCode = company.addresspostalcode\nguard let accountParams = STPConnectAccountParams(tosShownAndAccepted: true, company: companyParams) else {\n  // The TOS was not accepted\n  return\n}\nSTPAPIClient.shared.createToken(withConnectAccount: accountParams) { (accountToken, error) in\n    if let error = error {\n        // display an error to your user\n    }\n    else {\n        // use account token to create a Connect account server-side\n    }\n}\n`import UIKit\nimport StripePayments\nlet companyParams = STPConnectAccountCompanyParams()\ncompanyParams.name = company.name\ncompanyParams.address = STPConnectAccountAddress()\ncompanyParams.address.line1 = company.addressline1\ncompanyParams.address.city = company.addresscity\ncompanyParams.address.state = company.addressstate\ncompanyParams.address.country = company.addresscountry\ncompanyParams.address.postalCode = company.addresspostalcode\nguard let accountParams = STPConnectAccountParams(tosShownAndAccepted: true, company: companyParams) else {\n  // The TOS was not accepted\n  return\n}\nSTPAPIClient.shared.createToken(withConnectAccount: accountParams) { (accountToken, error) in\n    if let error = error {\n        // display an error to your user\n    }\n    else {\n        // use account token to create a Connect account server-side\n    }\n}`## Handling a file upload\nWhen a connected account needs to provide Stripe with a scan of an identity document such as a passport, you can use an account token. However, the JavaScript is more complicated because the file must be sent to Stripe as part of an XHR request. In this flow, the JavaScript:\n# Interrupts the form submission.\n# If a file was uploaded, sends that to Stripe, receiving a file token in return.\n# Adds the file token ID to the generic object for the account token request.\n# Calls the stripe.createToken() method to request a token.\n# Sends the ID of the received account token to your server for use.\n`stripe.createToken()`To begin, add a file element to the form. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10MB in size.\n``Next, in your JavaScript that handles the form’s submission, send the uploaded file to Stripe. This needs to happen before creating the account token.\nconst data = new FormData();\ndata.append('file', document.querySelector('#id-file').files[0]);\ndata.append('purpose', 'identitydocument');\nconst fileResult = await fetch('https://uploads.stripe.com/v1/files', {\n  method: 'POST',\n  headers: {'Authorization': 'Bearer pktestf3duw0VsAEM2TJFMtWQ90QAT'},\n  body: data,\n});\nconst fileData = await fileResult.json();\n`const data = new FormData();\ndata.append('file', document.querySelector('#id-file').files[0]);\ndata.append('purpose', 'identitydocument');\nconst fileResult = await fetch('https://uploads.stripe.com/v1/files', {\n  method: 'POST',\n  headers: {'Authorization': 'Bearer pktestf3duw0VsAEM2TJFMtWQ90QAT'},\n  body: data,\n});\nconst fileData = await fileResult.json();`Finally, include the returned file ID as the verification.document.front value in the generic object provided to the createToken() call:\n`verification.document.front``createToken()`const result = await stripe.createToken('account', {\n  person: {\n    firstname: document.querySelector('.inp-first-name').value,\n    lastname: document.querySelector('.inp-last-name').value,\n    address: {\n      line1: document.querySelector('.inp-street-address1').value,\n      city: document.querySelector('.inp-city').value,\n      state: document.querySelector('.inp-state').value,\n      postalcode: document.querySelector('.inp-zip').value,\n    },\n    verification: {\n        document: {\n            front: fileData.id,\n            },\n        },\n    },\n  tosshownandaccepted: true,\n});\n`const result = await stripe.createToken('account', {\n  person: {\n    firstname: document.querySelector('.inp-first-name').value,\n    lastname: document.querySelector('.inp-last-name').value,\n    address: {\n      line1: document.querySelector('.inp-street-address1').value,\n      city: document.querySelector('.inp-city').value,\n      state: document.querySelector('.inp-state').value,\n      postalcode: document.querySelector('.inp-zip').value,\n    },\n    verification: {\n        document: {\n            front: fileData.id,\n            },\n        },\n    },\n  tosshownandaccepted: true,\n});`## Updating legal entity and person details\nYou can use tokens to securely update an existing account’s legal entity and person information. Create the tokens you need using the same combination of HTML and JavaScript as above, and then perform an update account or update person call providing the new token ID.\nYou must create and provide a new token when updating legal entity details previously set using an account token.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d accounttoken={{ACCOUNTTOKENID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d accounttoken={{ACCOUNTTOKENID}}`When using tokens for updates:\n• An existing value is replaced with a new value.\n• If no new value is provided, the existing value remains.\n• You cannot unset an existing value.\n• The tosshownandaccepted parameter is ignored and can be omitted.\n• You can use an account or person token for an update whether or not a token was originally used when creating the account or person.\n• If the account or person was originally created using an account token, you can only update values using another token.\n`tosshownandaccepted`For example, if an account is created with a token containing only a name and date of birth, you’d create a subsequent token containing only the address information and then perform an update account call to add the address details to the account.\n#Removing legal entity and person details\nTo clear any legal entity or person details or to explicitly set a value as null, pass an empty string in an update account or update person call. Use an update call, not a token, even if you originally used a token. You can assign empty strings only to optional attributes (for example, the second line of an address). You can’t assign them to any required attributes.\n#See also\n• Identity verification for connected accounts\n• Payouts to connected accounts"}, {"path": "connect\\accounts.md", "url": "https://docs.stripe.com/connect/accounts", "content": "#Connect account types | Stripe Documentation\nURL: https://docs.stripe.com/connect/accounts\n\n#Connect account types\n#Learn about older connected account configurations.\nWhen using Connect, you create a connected account for each business or individual that signs up to access your platform’s services. You can configure your platform and connected accounts to fit your business model, distributing specific responsibilities between your platform, Stripe, and your connected accounts.\nIf you’re setting up a new Connect platform, see Design an integration to learn about configuring connected accounts. The information on this page applies only to less flexible connected account types, which are mainly used by existing platforms.\n#Note\nIf your existing connected accounts are configured as a type, you can still migrate your platform to support new connected accounts that are configured without types. During and after migration, your platform can continue to support your existing connected accounts without interruption.\nConnect supports the following account types:\n• Standard\n• Express\n• Custom\n#Choose an account type\nYou must consider several factors when choosing an account type. Integration effort and connected account user experience are especially important because they can affect engineering resource expenditure and conversion rates. After you create a connected account, you can’t change its type.\nStripe recommends that you use controller properties instead of account types. If you want to use account types, we recommend Express or Standard connected accounts because they require less integration effort. For more control over your connected accounts, consider using Custom connected accounts. To learn which account type we recommend for your business, refer to your platform profile.\nThere’s an additional cost for using Express or Custom connected accounts.\n  | Standard | Express | Custom \n --- | --- | --- | --- \n Integration effort | Lowest | Low | Significantly higher \n Integration method | API or OAuth | API | API \n Fraud and dispute liability | Connected account | Platform | Platform \n Platform can specify payout timing? | Yes, with Platform controls | Yes | Yes \n Onboarding | Stripe | Stripe | Platform or Stripe \n Identity information gathering | Stripe | Stripe | Platform or Stripe \n Connected account access to the Stripe Dashboard | Full Dashboard | Express Dashboard | None \n Supported charge types | Direct only | DestinationSeparate with transfersDirect (not recommended) | DestinationSeparate with transfersDirect (not recommended) \n Connected account support provided by | Platform and Stripe | Platform and Stripe | Platform \n Automatic updates for new compliance requirements | Yes | Yes | No \n Support new countries without integration changes | Yes | Yes | No \n Ideal for platforms | With experienced online businesses as connected accounts | Any type | With significant engineering resources to dedicate to a fully white-labeled experience \n• Destination\n• Separate with transfers\n• Direct (not recommended)\n• Destination\n• Separate with transfers\n• Direct (not recommended)\nWith Standard connected accounts, the connected account is responsible for fraud and disputes when using direct charges, but that can vary when using destination charges.\n#Express connected accounts\nWith Express connected accounts, Stripe handles the onboarding and identity verification processes. The platform has the ability to specify charge types and set the connected account’s payout settings programmatically. The platform is responsible for handling disputes and refunds, which is similar to a Custom connected account.\nAlthough your connected account has interactions with Stripe, they primarily interact with your platform, particularly for the core payment processing functionality. For Express connected account holders, Stripe provides an Express Dashboard (a lighter version of the Dashboard) that allows them to manage their personal information and see payouts to their bank.\nUse Express connected accounts when you:\n• Want to get started quickly (letting Stripe handle account onboarding, management, and identity verification)\n• Want to use destination charges or separate charges and transfers\n• Want significant control over interactions with your connected accounts\nExamples of platforms that use Express connected accounts include, but are not limited to: a home-rental marketplace like Airbnb, or a ride-hailing service like Lyft.\nGlobal compliance requirements do evolve and change over time. With Express, Stripe proactively collects information when requirements change. For best practices on how to communicate to your connected accounts when that happens, visit the guide for Express accounts.\n#Express connected account availability\nSelect one of the available countries when you create an Express connected account. You can’t change the country later.\nSome countries are available only when using cross-border payouts.\nTo know when Express connected accounts are available in your country, contact Stripe.\n#Standard connected accounts\nA Standard connected account is a conventional Stripe account where the connected account has a direct relationship with Stripe, is able to log in to the Dashboard, and can process charges on their own.\nUse Standard connected accounts when you:\n• Want to get started quickly and don’t need a lot of control over interactions with your connected accounts\n• Want to use direct charges\n• Have connected accounts that are familiar with running online businesses or that already have a Stripe account\n• Prefer that Stripe handles direct communication with the connected account for account issues (for example, to request more information for identity verification purposes)\nSome examples of platforms that use Standard connected accounts are store builders like Shopify, and Software as a Service (SaaS) platforms such as an online invoicing and payment service.\nGlobal compliance requirements do evolve and change over time. With Standard connected accounts, Stripe proactively collects information when requirements change. For best practices on how to communicate to your connected accounts when that happens, visit the guide for Standard accounts.\n#Country can't be changed\nAfter you create a Standard connected account, you can’t change its country.\n#Custom connected accounts\nA Custom connected account is almost completely invisible to the account holder. You—the platform—are responsible for all interactions with your connected accounts, including collecting any information Stripe needs. You have the ability to change all of the account’s settings, including the payout bank or debit card account, programmatically.\nCustom connected account holders don’t have access to the Dashboard, and Stripe doesn’t contact them directly.\nUse Custom connected accounts when you:\n• Want complete control over interactions with your connected accounts\n• Can build the significant infrastructure required to collect connected account information, deploy a custom dashboard, and handle support\n• Want to handle all communication with your connected accounts, involving no direct contact between them and Stripe\nCreating and managing Custom connected accounts requires a larger integration effort than the other account types. To learn more, see Using Connect with Custom accounts.\nGlobal compliance requirements do evolve and change over time. For best practices on how to communicate to your connected accounts when requirements change, see the guide for Custom accounts.\nIf you decide to use Custom connected accounts, Stripe recommends that you use Connect Onboarding for Custom accounts to collect onboarding and verification information from your connected accounts. That decreases your integration effort and eliminates the need to update your onboarding form when requirements change.\n#Custom connected account availability\nSelect one of the available countries when you create a Custom connected account. You can’t change the country later.\nSome countries are available only when using cross-border payouts.\nTo request notification when Custom connected accounts are available in your country, contact Stripe.\n#See also\n• Express connected accounts\n• Standard connected accounts\n• Custom connected accounts\n• Account capabilities"}, {"path": "connect\\add-and-pay-out-guide.md", "url": "https://docs.stripe.com/connect/add-and-pay-out-guide", "content": "#Pay out money | Stripe Documentation\nURL: https://docs.stripe.com/connect/add-and-pay-out-guide\n\n#Pay out money\n#Add money to your Stripe balance and pay out your sellers or service providers.\n#Note\nMost platforms can pay out funds only to connected accounts in the same region and in local currencies. Platforms based in the US can make cross-border payouts to accounts in other regions, subject to restrictions.\nUse this guide to learn how to add funds to your account balance and transfer the funds into your users’ bank accounts, without processing payments through Stripe. This guide uses an example of a Q&A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.\n#Note\nOnly team members with administrator access to the platform Stripe account and two-factor authentication enabled can add funds.\nWhen adding funds to your balance, best practice is to use a manual payout schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your payout settings.\n#Prerequisites\n# Register your platform.\n# Add business details to activate your account.\n# Complete your platform profile.\n# Customize your brand settings. Add a business name, icon, and brand color.\n#Set up StripeServer-side\nInstall Stripe’s official libraries so you can access the API from your application:\n#Available as a gem\nsudo gem install stripe\n`# Available as a gem\nsudo gem install stripe`#If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n`# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'`## Create a connected account\nWhen a user (seller or service provider) signs up on your platform, create a user Account (referred to as a connected account) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe’s API and facilitate the collection of information requirements so Stripe can verify the user’s identity. For a Q&A product that pays for answers, the connected account represents the writer.\n#Note\nThis guide uses connected accounts that use the Express Dashboard, which have certain restrictions. You can evaluate Custom accounts as an alternative.\n#1. Customize your signup form\nIn your platform settings, customize your Express signup form by changing the color and logos that users see when they click your Connect link.\nDefault Express signup form\nBranding settings\n#2. Create a connected account and prefill information\nUse the /v1/accounts API to create a connected account by specifying the connected account properties, or by specifying the account type.\n`/v1/accounts`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=express\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=express`If you’ve already collected information for your connected accounts, you can prefill that information on the Account object. You can prefill any account information, including personal and business information, external account information, and so on.\n`Account`Connect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the Connect service agreement.\nWhen testing your integration, prefill account information using test data.\n#3. Create an account link\nCreate an Account Link with the following arguments:\n• account\n• refreshurl\n• returnurl\n• type = accountonboarding\n`account``refreshurl``returnurl``type``accountonboarding`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding`### 4. Redirect your user to the account link\nThe response to your Account Links request includes a value for the key url. Redirect your user to this link. URLs from the Account Links API are temporary and can be used only once because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you won’t be able to read or write information for the connected account.\n`url`#### Security tip\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n#5. Handle the user returning to your platform\nConnect Onboarding requires you to pass both a returnurl and refreshurl to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n`returnurl``refreshurl`#### Note\nYou can use HTTP for your returnurl and refreshurl while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to update testing URLs to HTTPS URLs before going live.\n`returnurl``refreshurl`#### returnurl\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\nNo state is passed through this URL. After a user is redirected to your returnurl, check the state of the detailssubmitted parameter on their account by doing either of the following:\n`returnurl``detailssubmitted`- Listening to account.updated events.\n• Calling the Accounts API and inspecting the returned object.\n`account.updated`#### refreshurl\nYour user is redirected to the refreshurl when:\n`refreshurl`- The link has expired (a few minutes have passed since the link was created).\n• The link was already visited (the user refreshed the page or clicked back or forward in their browser).\n• The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which cause them to become expired.\n• Your platform is no longer able to access the account.\n• The account has been rejected.\nThe refreshurl should call Account Links again on your server with the same parameters and redirect the user to the Connect Onboarding flow to create a seamless experience.\n`refreshurl`### 6. Handle users that haven’t completed onboarding\nA user that’s redirected to your returnurl might not have completed the onboarding process. Use the /v1/accounts endpoint to retrieve the user’s account and check for chargesenabled. If the account is not fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the detailssubmitted parameter on their account to see if they’ve completed the onboarding process.\n`returnurl``/v1/accounts``chargesenabled``detailssubmitted`## Add funds to your balance\nTo add funds, go to the Balance section in the Dashboard. Click Add to balance and select why you are adding funds to your account.\nSelect Pay out connected accounts to add funds to pay out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, select Cover negative balances and see adding funds to your Stripe balance.\n#Verify your bank account\nGo through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You’ll see ACCTVERIFY as the statement description.\n`ACCTVERIFY`Stripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the Balance section, enter the two microdeposit amounts, and click Verify account.\n#Create a top-up\nOnce verified, create a top-up to add funds to your account balance.\ncurl https://api.stripe.com/v1/topups \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=2000 \\\n  -d currency=usd \\\n  -d description=\"Top-up for week of May 31\" \\\n  -d statementdescriptor=\"Weekly top-up\"\n`curl https://api.stripe.com/v1/topups \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=2000 \\\n  -d currency=usd \\\n  -d description=\"Top-up for week of May 31\" \\\n  -d statementdescriptor=\"Weekly top-up\"`When you transfer funds, a statement descriptor appears on your banking statement for the transaction. The default statement descriptor is Top-up. You can customize the statement descriptor and internal description for the top-up.\n#View funds\nView your funds in the Dashboard on Top-ups tab under the Balance page. Each time you add funds, a top-up object is made that has a unique ID in the format tuXXXXXX, which you can see on the detailed view for the top-up.\n#Settlement timing\nUS platforms add funds via ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting Stripe Support.\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\nAdding funds for future refunds and disputes or to repay a negative balance can happen through bank or wire transfers and are available in 1-2 business days.\n#Pay out to your userServer-side\nYou can transfer available funds to a connected account using the API. For example, make the following call to transfer 10 USD to an account:\ncurl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d amount=1000 \\\n  -d currency=\"usd\" \\\n  -d destination=\"{{CONNECTEDSTRIPEACCOUNTID}}\"\n`curl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d amount=1000 \\\n  -d currency=\"usd\" \\\n  -d destination=\"{{CONNECTEDSTRIPEACCOUNT_ID}}\"`By default, any funds that you transfer to a connected account accumulates in the connected account’s Stripe balance and is paid out on a daily rolling basis. You can change the payout schedule as needed.\n#Test your integration\nFrom your account Dashboard, you can view an account and its balance.\nUse the test bank tokens to simulate flows for accounts and onboarding, payouts, and adding funds.\n#See also\n• Collect payments then pay out\n• Manage connected accounts in the Dashboard\n• Debit a connected account\n• Integrate with the Express Dashboard\n• Collect information required for US taxes"}, {"path": "connect\\additional-verifications.md", "url": "https://docs.stripe.com/connect/additional-verifications", "content": "#Additional verifications | Stripe Documentation\nURL: https://docs.stripe.com/connect/additional-verifications\n\n#Additional verifications\n#Add identity verification checks to your platform’s connected accounts.\nCollect additional identity verification from connected accounts to help reduce fraud losses, streamline risk operations, and meet additional compliance requirements. Automatically collect required information with Connect Onboarding or embed Stripe Identity as part of your custom onboarding experience. Restrict your flow of funds based on verification status and volume thresholds.\nBy adding a few lines of code to your Connect integration, you can:\n• Request an ID document check during initial onboarding\n• Match the ID photo with selfies of the document holder\n• Disable payouts or payments based on verification status or volume thresholds\n• Access captured images and data extracted from ID documents\n• Receive detailed status updates and error messages\nCommon use cases for additional verifications\n• Reduce fraud losses: For example, platforms can streamline risk processes by requiring an ID verification before enabling the first payout.\n• Increase trust & safety: For example, marketplaces facilitating in-person services can require ID verification before allowing connected accounts to collect payments or interact with other users.\n• Meet additional compliance requirements: For example, platforms can conduct ID verification to confirm the user’s identity to help meet their own KYC requirements.\n#Get started  Invite only\nAccess to additional verifications is currently by invitation only. If you’re interested in this functionality, reach out to sales for an invitation."}, {"path": "connect\\api-onboarding.md", "url": "https://docs.stripe.com/connect/api-onboarding", "content": "#API onboarding | Stripe Documentation\nURL: https://docs.stripe.com/connect/api-onboarding\n\n#API onboarding\n#Build your own onboarding flow using Stripe's APIs.\nWith API onboarding, you use the Accounts API to build an onboarding flow, reporting functionality, and communication channels for your users. Stripe can be completely invisible to the account holder. However, your platform is responsible for all interactions with your accounts and for collecting all the information needed to verify them.\n#Additional responsibilities\nWith API onboarding, your custom flow must meet all legal and regulatory requirements in the regions where you do business. You must also commit resources to track changes to those requirements and collect updated information on an ongoing basis, at least once every six months. If you want to implement a customized onboarding flow, Stripe strongly recommends that you use embedded onboarding.\n#Establish requirements\nThe following factors affect the onboarding requirements for your connected accounts:\n• The origin country of the connected accounts\n• The service agreement type applicable to the connected accounts\n• The capabilities requested for the connected accounts\n• The business type (for example, individual or company) and company.structure (for example, public corporation or private partnership)\nUse the interactive form to see how changing these factors affects the requirements.\n#Requirements form\n#Create forms to collect informationClient-side\nAs a best practice, organize the required parameters into logical groupings or forms in your onboarding flow. You might wish to encode a mapping between the Stripe parameters and the logical groupings. Suggested logical groupings for parameters are shown in the first column of the example requirements table.\nAfter you encode the required parameters into your application, generate UIs for the parameters corresponding to these requirements. For each parameter, design a UI form that includes:\n• Parameter label, localized to each supported country and language\n• Parameter description, localized to each supported country and language\n• Parameter input fields with data validation logic and document uploading where required\nIt’s important to architect your application logic to account for the possibility of additional parameters in the future. For example, Stripe might introduce new parameters, new verifications, or new thresholds that you must incorporate into your onboarding flows over time.\nChanging any of the factors that determine your connected accounts requirements means you must also adjust your collection forms. Country and service agreement type are immutable, while capabilities and business type are mutable.\n• To change an immutable field such as country or service agreement type, create a new connected account with the new values. Doing so produces new requirements for you to incorporate in your collection flows.\n• To change a mutable field such as capabilities or business type, update the connected account. Doing so produces new requirements for you to incorporate in your collection flows.\n#Include Stripe Terms of Service Agreement\nYour connected accounts must accept Stripe terms of service before they can be activated. You can wrap Stripe terms of service in your own terms of service.\n#Create a connected accountServer-side\nCreate a connected account where your platform is liable for negative balances, Stripe collects fees from your platform account, and your connected accounts don’t have access to a Stripe-hosted dashboard. Request any capabilities that your connected accounts need. Include business type and any other information matching your requirements if you have it available to prefill.\nAlternatively, you can create a connected account with type set to custom and desired capabilities.\n`type``custom`If you don’t specify the country and service type agreement, they’re assigned the following default values:\n• The country defaults to the same country as your platform.\n• The service type agreement (tosacceptance.serviceagreement) defaults to full.\n`country``tosacceptance.serviceagreement``full`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d businesstype=individual \\\n  -d country=US\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d businesstype=individual \\\n  -d country=US`## Determine the information to collectServer-side\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the eventuallydue requirements for the account, while incremental onboarding only collects the currentlydue requirements.\n`eventuallydue``currentlydue`|  | Upfront onboarding | Incremental onboarding |\n --- | --- | --- \n Advantages | Entails a single request for information (normally)Creates fewer problems in receiving payouts and maintaining processing abilityExposes potential fraudsters or connected accounts who refuse to provide required information later | Onboards connected accounts quicklyResults in higher onboarding rates \n Disadvantages | Onboarding connected accounts can take longerSome legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | Creates a higher likelihood of disrupting business of an ongoing connected account \n• Entails a single request for information (normally)\n• Creates fewer problems in receiving payouts and maintaining processing ability\n• Exposes potential fraudsters or connected accounts who refuse to provide required information later\n• Onboards connected accounts quickly\n• Results in higher onboarding rates\n• Onboarding connected accounts can take longer\n• Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process\n• Creates a higher likelihood of disrupting business of an ongoing connected account\nTo determine whether to use upfront or incremental onboarding, review the required information for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\nFor connected accounts where you’re responsible for requirement collection, you can customize the behavior of future requirements using the collectionoptions parameter. Set collectionoptions.futurerequirements to include to collect the account’s future requirements.\n`collectionoptions``collectionoptions.futurerequirements``include`To implement your onboarding strategy, inspect the requirements hash of the connected account you created. The requirements hash provides a complete list of parameters you must collect to activate the connected account.\n• For incremental onboarding, inspect the currentlydue field in the requirements hash and build an onboarding flow that only collects for the listed parameters.\n• For upfront onboarding, inspect the eventuallydue field in the requirements hash and build an onboarding flow that collects for all the listed parameters.\n`currentlydue``eventuallydue`{\n  ...\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"disabledreason\": \"requirements.pastdue\",\n    \"errors\": [],\n    \"eventuallydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}\n`{\n  ...\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"disabledreason\": \"requirements.pastdue\",\n    \"errors\": [],\n    \"eventuallydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}`## Handle liveness requirements\nAn account can have one or more Persons with a proofofliveness requirement. A proofofliveness requirement might require collection of an electronic ID credential such as MyInfo in Singapore, or by using Stripe Identity to collect a document or selfie. We recommend using Stripe-hosted or embedded onboarding to satisfy all variations of the proofofliveness requirement.\n`proofofliveness``proofofliveness``proofofliveness`Stripe-hosted onboarding can complete all variations of proofofliveness requirements.\n`proofofliveness`Create an Account Link using the connected account ID, and send the account to the url returned.\n`url`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/refresh\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding \\\n  -d \"collectionoptions[fields]\"=currentlydue\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/refresh\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding \\\n  -d \"collectionoptions[fields]\"=currentlydue`The account receives a prompt to complete the proofofliveness requirement, along with any other currently due requirements. Listen to the account.updated event sent to your webhook endpoint to be notified when the account completes requirements and updates their information. After the account completes the requirement, the account is redirected to the returnurl specified.\n`proofofliveness``account.updated``returnurl`## Update the connected accountServer-side\nUpdate the connected account object with new information as your user progresses through each step of the onboarding flow to allow Stripe to validate the information as soon as it’s added. After Stripe confirms acceptance of our terms of service, any changes to the connected account triggers reverification. For example, if you change the connected account’s name and ID number, Stripe reruns verifications.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode \"businessprofile[url]\"=\"https://furever.dev\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode \"businessprofile[url]\"=\"https://furever.dev\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"`When updating a connected account, you must handle any verification errors or HTTP error codes.\n#Handle verification errorsServer-side\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have a pending status.\n#Review status\nYou can retrieve the status of your connected account’s capabilities by:\n• Inspecting the Account object’s capabilities hash for the relevant capability.\n• Requesting capabilities directly from the Capabilities API and inspecting the status of the relevant capability.\n• Listening for account.updated events in your webhook endpoint and inspecting the capabilities hash for the relevant capability.\n`account.updated``capabilities`After verifications are complete, the capability becomes active and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of active. Listen for account.updated events to detect changes to capability states.\n`active``active``account.updated`Confirm that your Connect integration is compliant and operational by checking that the account’s chargesenabled and payoutsenabled are both true. You can use the API or listen for account.updated events. For details on other relevant fields, check the account’s requirements hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n`chargesenabled``payoutsenabled``account.updated`- chargesenabled confirms that your full charge path including the charge and transfer works correctly and evaluates if either cardpayments or transfers capabilities are active.\n• payoutsenabled evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You must eventually enable payouts to pay your connected accounts.\n`cardpayments``transfers`You can use the following logic as a starting point for defining a summary status to display to your connected account.\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\ndef accountstate(account)\n  reqs = account.requirements\n  if reqs.disabledreason && reqs.disabledreason.include?(\"rejected\")\n    \"rejected\"\n  elsif account.payoutsenabled && account.chargesenabled\n    if reqs.pendingverification\n      \"pending enablement\"\n    elsif !reqs.disabledreason && !reqs.currentlydue\n      if !reqs.eventuallydue\n        \"complete\"\n      else\n        \"enabled\"\n      end\n    else\n      \"restricted\"\n    end\n  elsif !account.payoutsenabled && account.chargesenabled\n    \"restricted (payouts disabled)\"\n  elsif !account.chargesenabled && account.payoutsenabled\n    \"restricted (charges disabled)\"\n  elsif reqs.pastdue\n    \"restricted (past due)\"\n  elsif reqs.pendingverification\n    \"pending (disabled)\"\n  else\n    \"restricted\"\n  end\nend\naccounts = Stripe::Account.list(limit: 10)\naccounts.each do |account|\n    puts \"#{account.id} has state: #{accountstate(account)}\"\nend\n`# Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\ndef accountstate(account)\n  reqs = account.requirements\n  if reqs.disabledreason && reqs.disabledreason.include?(\"rejected\")\n    \"rejected\"\n  elsif account.payoutsenabled && account.chargesenabled\n    if reqs.pendingverification\n      \"pending enablement\"\n    elsif !reqs.disabledreason && !reqs.currentlydue\n      if !reqs.eventuallydue\n        \"complete\"\n      else\n        \"enabled\"\n      end\n    else\n      \"restricted\"\n    end\n  elsif !account.payoutsenabled && account.chargesenabled\n    \"restricted (payouts disabled)\"\n  elsif !account.chargesenabled && account.payoutsenabled\n    \"restricted (charges disabled)\"\n  elsif reqs.pastdue\n    \"restricted (past due)\"\n  elsif reqs.pendingverification\n    \"pending (disabled)\"\n  else\n    \"restricted\"\n  end\nend\naccounts = Stripe::Account.list(limit: 10)\naccounts.each do |account|\n    puts \"#{account.id} has state: #{accountstate(account)}\"\nend`#### Note\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\nListen to the account.updated event. If the account contains any currentlydue fields when the currentdeadline arrives, the corresponding functionality is disabled and those fields are added to pastdue.\n`currentlydue``currentdeadline``pastdue`Create a form with clear instructions that the account can use to correct the information. Notify the account, then submit the corrected information using the Accounts API.\nIf you plan to create custom flows to handle all your verification errors:\n• Review the details regarding all possible verification errors and how to handle them.\n• Test verification states."}, {"path": "connect\\authentication.md", "url": "https://docs.stripe.com/connect/authentication", "content": "#Making API calls for connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/authentication\n\n#Making API calls for connected accounts\n#Learn how to add the right information to your API calls so you can make calls for your connected accounts.\nYou can make API calls for your connected accounts:\n• Server-side with the Stripe-Account header and the connected account ID, per request\n• Client-side by passing the connected account ID as an argument to the client library\nTo help with performance and reliability, Stripe has established rate limits and allocations for API endpoints.\n#Adding the Stripe-Account header server-side\nTo make server-side API calls for connected accounts, use the Stripe-Account header with the account identifier, which begins with the prefix acct. Here are four examples using your platform’s API secret key and the connected account’s Account identifier:\n`Stripe-Account``acct`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=1000 \\\n  -d currency=usd\n`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=1000 \\\n  -d currency=usd`The Stripe-Account header approach is implied in any API request that includes the Stripe account ID in the URL. Here’s an example that shows how to Retrieve an account with your user’s Account identifier in the URL.\n`Stripe-Account`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`All of Stripe’s server-side libraries support this approach on a per-request basis:\ncurl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  --data-urlencode email=\"person@example.com\"\n`curl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  --data-urlencode email=\"person@example.com\"`## Adding the connected account ID to a client-side application\nClient-side libraries set the connected account ID as an argument to the client application:\nThe JavaScript code for passing the connected account ID client-side is the same for plain JS and for ESNext.\nvar stripe = Stripe('pktestf3duw0VsAEM2TJFMtWQ90QAT', {\n  stripeAccount: {{CONNECTEDACCOUNTID}},\n});\n`var stripe = Stripe('pktestf3duw0VsAEM2TJFMtWQ90QAT', {\n  stripeAccount: {{CONNECTEDACCOUNTID}},\n});`## See also\n• Creating charges\n• Using subscriptions"}, {"path": "connect\\build-full-embedded-integration.md", "url": "https://docs.stripe.com/connect/build-full-embedded-integration", "content": "#Fully embedded Connect platform integration | Stripe Documentation\nURL: https://docs.stripe.com/connect/build-full-embedded-integration\n\n#Fully embedded Connect platform integration\n#Provide Connect features to your connected accounts through your own website.\nConnect embedded components let you add Stripe-managed functionality to a custom interface that you provide to your connected accounts. They can perform payment-related activities there instead of through the Stripe Dashboard. In a fully embedded integration:\n• Connected accounts access Stripe-related data, forms, and notifications through embedded components in your platform’s application. They don’t have access to a Stripe Dashboard.\n• Stripe manages credit and fraud risk on your connected accounts. For any risk or compliance actions, we communicate directly with connected accounts and they respond by interacting with embedded components.\n• Stripe email notifications direct your connected accounts to embedded components on your website to review information or take required action. You must provide Stripe with the URLs for those components.\n#View the demo site\nWe’ve built a complete demo site for our fictitious business, Furever. Furever is a platform providing software for pet-groomers that allows their users to collect payments. In this demo, you can interact with many embedded components, including account onboarding and account management.\n#Before you begin\nBefore you can build an embedded integration, complete the following prerequisites:\n# Register your platform.\n# Add business details to activate your account.\n# Complete your platform profile.\n# Customize your brand settings. Add a business name, icon, and brand color.\nYou must also decide whether your platform will own pricing, in which case Stripe collects payment fees from your platform and you bill your connected accounts. Otherwise, Stripe owns pricing and collects payment fees directly from your connected accounts.\n#Create a connected account\nThe following example creates an account where Stripe manages risk, controls pricing, and assumes responsibility for account onboarding requirements. Your platform uses embedded components and isn’t liable for negative balances. Your connected accounts don’t have access to Stripe-hosted dashboards.\n#Note\nBecause Stripe controls pricing in this example, you must integrate the Documents embedded component. In addition, Stripe notifies connected accounts by email when their tax invoices or 1099s are ready for download. If you create accounts where your platform controls pricing, the Documents component isn’t required, and Stripe doesn’t send notifications to connected accounts about tax invoices or 1099s.\nYou can request additional capabilities, such as specific payment methods, after the account onboards.\nCall /v1/accounts with the following parameters:\n• country of the account\n• controller.stripedashboard.type = none\n• request the cardpayments and transfers capabilities\n`country``controller.stripedashboard.type``none``cardpayments``transfers`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"controller\": {\n    \"type\": \"application\",\n    \"iscontroller\": true,\n    \"losses\": {\"payments\": \"stripe\"},\n    \"fees\": {\"payer\": \"account\"},\n    \"requirementcollection\": \"stripe\",\n    \"stripedashboard\": {\n      \"type\": \"none\",\n    },\n  },\n  \"type\": \"none\",\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"controller\": {\n    \"type\": \"application\",\n    \"iscontroller\": true,\n    \"losses\": {\"payments\": \"stripe\"},\n    \"fees\": {\"payer\": \"account\"},\n    \"requirementcollection\": \"stripe\",\n    \"stripedashboard\": {\n      \"type\": \"none\",\n    },\n  },\n  \"type\": \"none\",\n  ...\n}`## Set up embedded components\nConnected accounts access their accounts, as well as core payments functionality, directly in your platform and don’t have access to a Stripe-hosted Dashboard, so you must provide access through your site.\nYour integration must include the following embedded components:\n• Account onboarding component\n• Account management component\n• Notification banner component\n• Documents component (when Stripe collects Stripe fees directly from connected accounts)\nFor any other optional components, you can use our embedded components or build your own UI.\nMake sure you set up embedded components before onboarding connected accounts.\n#Onboard connected accounts\nStripe uses an Account Session to express your intent to provide embedded component access to the connected account. Using an Account Session, the embedded account onboarding component collects all required information based on your requested capabilities.\n#Prefill the account\nThe embedded account onboarding component collects all required information based on your requested capabilities.\nYou can streamline the onboarding flow for your users by prefilling account fields with known information before you create an Account Session. Prefill as much account information as possible, including company, individual, and external account information, following these steps:\n# Review the required verification information docs to learn more about how the combination of countries and capabilities you select for connected accounts affects their requirements.\n# To determine the information that Stripe requires from a connected account, retrieve the account’s requirements property.\n# Collect prefillable information.\n# Record the information on the account by calling Update Account.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d businesstype=individual \\\n  --data-urlencode email=\"jenny.rosen@example.com\" \\\n  -d \"individual[firstname]\"=Jenny \\\n  -d \"individual[lastname]\"=Rosen \\\n  --data-urlencode \"individual[email]\"=\"jenny.rosen@example.com\" \\\n  -d \"individual[address][line1]\"=\"354 Oyster Point Blvd\" \\\n  -d \"individual[address][city]\"=\"South San Francisco\" \\\n  -d \"individual[address][state]\"=CA \\\n  -d \"individual[address][postalcode]\"=94080 \\\n  -d externalaccount={{BANKACCOUNTTOKENID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d businesstype=individual \\\n  --data-urlencode email=\"jenny.rosen@example.com\" \\\n  -d \"individual[firstname]\"=Jenny \\\n  -d \"individual[lastname]\"=Rosen \\\n  --data-urlencode \"individual[email]\"=\"jenny.rosen@example.com\" \\\n  -d \"individual[address][line1]\"=\"354 Oyster Point Blvd\" \\\n  -d \"individual[address][city]\"=\"South San Francisco\" \\\n  -d \"individual[address][state]\"=CA \\\n  -d \"individual[address][postalcode]\"=94080 \\\n  -d externalaccount={{BANKACCOUNTTOKENID}}`After the connected account completes onboarding through the Account Onboarding embedded component, your platform can no longer update certain information such as payout accounts or legal entity information. The connected account must make any updates to that information because the platform isn’t responsible for negative balances.\n#Onboard users through the embedded onboarding component\nConnected accounts must go through onboarding and provide required information to enable charges and payouts. To onboard a connected account, host the onboarding embedded component on your site and direct new accounts there.\n#Create an Account Session\nWhen creating an Account Session, enable account management by specifying accountonboarding in the components parameter.\n`accountonboarding``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountonboarding][enabled]\"=true \\\n  -d \"components[accountonboarding][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountonboarding][enabled]\"=true \\\n  -d \"components[accountonboarding][features][externalaccountcollection]\"=true`After creating the Account Session and initializing ConnectJS, you can render the Account onboarding component in the front end:\n// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n  console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);\n`// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n  console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);`Present the onboarding flow to the account’s primary owner. The primary owner sets up authentication with Stripe, and is the user who can edit the account details and respond to risk interventions. The connected account has only a single set of authentication credentials with Stripe. The user with authentication credentials can authenticate using one-time SMS codes to perform more sensitive actions like updating bank accounts for payout destinations or providing updated legal entity information.\n#Listen for onboarding events\nAs the account proceeds through onboarding, account.updated events are also sent to your configured Connect webhooks. When the account finishes submitting their details, the detailssubmitted field on the Account changes to true. Check the status by looking for detailssubmitted: true in the account.updated event body in your webhook handler or by retrieving the Account. If detailssubmitted is false, show the embedded onboarding component again. If the account submitted some information, the embedded onboarding component skips it and only collects the unsubmitted requirements.\n`detailssubmitted``detailssubmitted: true``account.updated``detailssubmitted`When a connected account submits their details and completes the onboarding flow, the embedded onboarding component calls the onExit handler that you set when you render the component. Use the callback to direct the account to their next action. If you don’t set an exit handler, or take action inside of the handler, the account sees a completion message without a clear next step.\n`onExit`### Request additional capabilities (optional)\nYour platform can continue to request additional capabilities after onboarding a connected account. For example, you must request the capabilities for any payment methods you want to enable for an account.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"capabilities[bancontactpayments][requested]\"=true \\\n  -d \"capabilities[epspayments][requested]\"=true \\\n  -d \"capabilities[idealpayments][requested]\"=true \\\n  -d \"capabilities[p24payments][requested]\"=true \\\n  -d \"capabilities[sepadebitpayments][requested]\"=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"capabilities[bancontactpayments][requested]\"=true \\\n  -d \"capabilities[epspayments][requested]\"=true \\\n  -d \"capabilities[idealpayments][requested]\"=true \\\n  -d \"capabilities[p24payments][requested]\"=true \\\n  -d \"capabilities[sepadebitpayments][requested]\"=true`If any requested capabilities require additional information, the connected account receives a notification through the embedded notification banner.\n#Handle ongoing compliance and risk updates\nBecause Stripe manages credit and fraud risk for your connected accounts, your accounts must be able to see and respond to alerts from Stripe. To facilitate that, your platform must integrate the notification banner and account management embedded components. For more information about how Stripe supports your connected accounts through these components, see Embedded Connect support.\n#Embed the notification banner\nStripe uses the notification banner embedded component to notify connected accounts of outstanding compliance requirements and other risk-related requests. Responding to these notifications allows an account to remain compliant so it can process payments and receive payouts. If there are no outstanding notifications, the embedded notification banner doesn’t render.\nIntegrate the notification banner in a highly visible and easily accessible location on your website. For example, you can integrate it at the top of your payments page.\n#Create an Account Session\nWhen creating an Account Session, enable notification banner by specifying notificationbanner in the components parameter.\n`notificationbanner``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[notificationbanner][enabled]\"=true \\\n  -d \"components[notificationbanner][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[notificationbanner][enabled]\"=true \\\n  -d \"components[notificationbanner][features][externalaccountcollection]\"=true`### Render the notification banner component\n// Include this element in your HTML\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\ncontainer.appendChild(notificationBanner);\n// Optional:\n// notificationBanner.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n`// Include this element in your HTML\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\ncontainer.appendChild(notificationBanner);\n// Optional:\n// notificationBanner.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })`To respond to a banner notification, the account can click a button in the notification. You don’t need to redirect them to the account management embedded component.\n#Embed account management\nStripe requires the account management embedded component when managing risk. Integrate the component in your website where an account updates their settings or profile.\n#Create an Account Session\nWhen creating an Account Session, enable account management by specifying accountmanagement in the components parameter.\n`accountmanagement``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountmanagement][enabled]\"=true \\\n  -d \"components[accountmanagement][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountmanagement][enabled]\"=true \\\n  -d \"components[accountmanagement][features][externalaccountcollection]\"=true`### Render the account management component\n// Include this element in your HTML\nconst accountManagement = stripeConnectInstance.create('account-management');\ncontainer.appendChild(accountManagement);\n// Optional:\n// accountManagement.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n`// Include this element in your HTML\nconst accountManagement = stripeConnectInstance.create('account-management');\ncontainer.appendChild(accountManagement);\n// Optional:\n// accountManagement.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })`This component allows an account to update their account details, respond to compliance requirements that are due, and update their authentication credentials.\n#Integrate payments\nSet up the payments integration after integrating required embedded components. You can add the payments and payout embedded components to your platform or build your own workflows.\nConfigure Connect webhooks and listen for the account.updated event. A connected account is ready to receive payments when its chargesenabled property is true.\n`account.updated``chargesenabled`## Integrate embedded payments and payouts\nAdd the payments and payouts embedded components to your platform before building your payments integration. That way, an account can easily access and manage their core payment workflows.\nThe payments component shows a list of the connected account’s payments, and includes filtering and individual payment detail views. An account can issue refunds and respond to disputes with evidence on individual payments through this component.\n#Create an Account Session\nWhen creating an Account Session, enable the payments embedded component by specifying payments in the components parameter. You can turn on or off an individual feature of the payments component by specifying the features parameter under payments:\n`payments``components``features``payments`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payments][enabled]\"=true \\\n  -d \"components[payments][features][refundmanagement]\"=true \\\n  -d \"components[payments][features][disputemanagement]\"=true \\\n  -d \"components[payments][features][capturepayments]\"=true \\\n  -d \"components[payments][features][destinationonbehalfofchargemanagement]\"=false\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payments][enabled]\"=true \\\n  -d \"components[payments][features][refundmanagement]\"=true \\\n  -d \"components[payments][features][disputemanagement]\"=true \\\n  -d \"components[payments][features][capturepayments]\"=true \\\n  -d \"components[payments][features][destinationonbehalfofchargemanagement]\"=false`Your connected accounts can view the complete set of information about direct charges. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n#Render the payments component\nAfter creating the account session and initializing ConnectJS, you can render the payments component in the front end:\n// Include this element in your HTML\nconst payments = stripeConnectInstance.create('payments');\ncontainer.appendChild(payments);\n// Optional: specify filters to apply on load\n// payments.setDefaultFilters({\n//   amount: {greaterThan: 100},\n//   date: {before: new Date(2024, 0, 1)},\n//   status: ['partiallyrefunded', 'refundpending', 'refunded'],\n//   paymentMethod: 'card',});\n`// Include this element in your HTML\nconst payments = stripeConnectInstance.create('payments');\ncontainer.appendChild(payments);\n// Optional: specify filters to apply on load\n// payments.setDefaultFilters({\n//   amount: {greaterThan: 100},\n//   date: {before: new Date(2024, 0, 1)},\n//   status: ['partiallyrefunded', 'refundpending', 'refunded'],\n//   paymentMethod: 'card',});`The payouts component shows the connected account’s recent payouts, current balance, and when funds will become available.\nWhen creating an Account Session, enable the payouts embedded component by specifying payouts in the components parameter. You can enable or disable individual features of the payouts component by specifying the features parameter under payouts:\n`payouts``components``features``payouts`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payouts][enabled]\"=true \\\n  -d \"components[payouts][features][instantpayouts]\"=true \\\n  -d \"components[payouts][features][standardpayouts]\"=true \\\n  -d \"components[payouts][features][editpayoutschedule]\"=true \\\n  -d \"components[payouts][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payouts][enabled]\"=true \\\n  -d \"components[payouts][features][instantpayouts]\"=true \\\n  -d \"components[payouts][features][standardpayouts]\"=true \\\n  -d \"components[payouts][features][editpayoutschedule]\"=true \\\n  -d \"components[payouts][features][externalaccountcollection]\"=true`After creating the account session and initializing ConnectJS, you can render the payouts component in the front end:\n// Include this element in your HTML\nconst payouts = stripeConnectInstance.create('payouts');\ncontainer.appendChild(payouts);\n`// Include this element in your HTML\nconst payouts = stripeConnectInstance.create('payouts');\ncontainer.appendChild(payouts);`For an immersive guide to implementing embedded components, follow the Connect embedded components integration quickstart.\n#Accept a payment\nIf your connected accounts transact directly with customers, use direct charges.\nStripe assesses payment transaction fees to your platform when controller.fees.payer is not set to account for the Account. In turn, you’re responsible for charging payment processing fees on your connected accounts. You can specify a value for the application fee on each payment to automatically take fees from connected accounts without having to build it into your integration.\n`controller.fees.payer``account`We recommend using Stripe Checkout, a prebuilt Stripe-hosted page, to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer.\nYou can also use the Payment Element, a prebuilt UI component you can embed to accept additional payment methods with a single integration.\n#Create a Checkout Session  Client-side Server-side\nA Checkout Session controls what a customer sees in the Stripe-hosted payment page such as line items, the order amount and currency, and acceptable payment methods. When performing direct charges, Checkout uses the connected account’s branding settings. For more information, see Customize branding.\nUnlike destination charges or separate charges and transfers, connected accounts are responsible for handling disputes on direct charges—it’s not the responsibility of the platform.\nTo create a Checkout Session, add a checkout button to your website that calls a server-side endpoint.\n  \n    Checkout\n  \n  \n    \n      Pay\n    \n  \n`\n  \n    Checkout\n  \n  \n    \n      Pay\n    \n  \n`On your server, make the following call to the Stripe API. After creating a Checkout Session, redirect your customer to the URL returned in the response.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\"`- lineitems—This parameter represents items that your customer is purchasing and that show up in the hosted user interface.\n• successurl—This argument redirects a customer after they complete a payment.\n• cancelurl—This argument redirects a customer after they click cancel.\n• Stripe-Account—This header indicates a direct charge for your connected account. With direct charges, the connected account is responsible for Stripe fees, refunds, and chargebacks. Checkout uses the connected account’s branding, which allows their customers to feel like they’re interacting directly with the connected account instead of your platform.\n• (Optional) paymentintentdata[applicationfeeamount]—This argument specifies the amount your platform plans to take from the transaction. After the payment is processed on the connected account, the applicationfeeamount is transferred to the platform and the Stripe fee is deducted from the connected account’s balance.\n`lineitems``successurl``cancelurl``Stripe-Account``paymentintentdata[applicationfeeamount]``applicationfeeamount`### Handle post-payment events  Server-side\nStripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.\nIn addition to handling the checkout.session.completed event, we recommend handling two other events when collecting payments with Checkout:\n`checkout.session.completed`| Event | Description | Next steps |\n --- | --- | --- \n checkout.session.completed | The customer has successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. \n checkout.session.asyncpaymentsucceeded | The customer’s payment succeeded. | Fulfill the purchased goods or services. \n checkout.session.asyncpaymentfailed | The payment was declined, or it failed for some other reason. | Contact the customer through email and request that they place a new order. \nThese events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded.\n`processing``succeeded`## Set up email communications to connected accounts\nStripe communicates with your connected accounts on your behalf to manage risk and ensure ongoing compliance. You can customize and brand these email communications with your own email domain and platform branding.\nWe send the following emails to your connected accounts:\n• Account emails verify an account’s information, such as additions or changes to an email address, phone number, or bank account.\n• Compliance emails notify accounts to provide required information. Stripe often needs to collect further information to maintain compliance with our financial partners.\n• Risk emails notify accounts when they’re under a risk review. These emails often provide instructions on how to submit information to resolve a risk action; for example, to remove a pause on payouts.\n• Tax emails (only when Stripe collects Stripe fees directly from connected accounts) notify users when their tax invoices or 1099s are ready to download.\nIf you want to send any other payments-related emails to your connected accounts, you must send them yourself. For example, to send emails for new disputes, listen for the charge.dispute.created event on a connected account. When that event occurs, use the Disputes API to get the details and email them to the account.\n`charge.dispute.created`You must update your Connect settings with the URLs of your payments and account workflows so Stripe’s email communications can include links for your accounts to respond. You must update these links before creating an account session or an account link in livemode.\n#Handle redirects from email links\nEmails sent by Stripe that contain a call to action need to include a link to that action. For example, if we send an email directing action on a connected account, it must include a link to your Account management component.\nBefore you can create a live mode Account Session, you must provide the URLs where you have integrated the embedded components into your website. Configure the sending email domain and embedded component URLs in the Site links section of your platform’s Connect settings.\n#Note\nTest mode environments use the same URLs as live mode.\nFor embedded components integrated in your site, select Yes and enter the URL of the page that hosts the component. For any actions not handled by an embedded component, select No and enter the URL of the page on your site where the account can perform the action. After entering the URLs, test them to verify that they open the right pages.\nYou must set URLs for the following:\n• Notification banner\n• Account management\n• Payments\n• Payouts\n• Balances\n• Documents (when Stripe collects Stripe fees directly from connected accounts)\nWhen sending an email, Stripe automatically appends the connected account ID to the redirect URL as the stripeaccountid parameter. Use that parameter to identify the account and verify that they’re authenticated. Set up the route on your server to read the parameters and display the correct embedded component.\n`stripeaccountid`For more information about configuring Stripe emails to your connected accounts, see Email communications in embedded Connect integrations\n#Configure email branding and settings\nStripe can send emails reflecting your platform’s brand settings from your own email domain to your connected accounts. To configure Stripe emails to your connected accounts, visit Emails in your platform Dashboard.\n#Go live\nAt this point, you’ve configured your platform integration by doing the following:\n• Created connected accounts in the correct configuration\n• Integrated embedded components to allow connected accounts to onboard, manage their account, and respond to risk actions through your website\n• Set up payments using Direct charges with an application fee\n• Set up branded email communications to enable Stripe to communicate with your users for compliance, risk actions, and necessary documents\n#Test your integration\nTest your account creation flow by using the embedded account onboarding integrated in your platform. Test the settings of your payment methods for your connected accounts by logging into one of your test accounts and navigating to the Payment methods settings. Test your checkout flow with your test keys and a test account. You can use our test cards to test your payments flow and simulate various payment outcomes."}, {"path": "connect\\calculation-methods.md", "url": "https://docs.stripe.com/connect/calculation-methods", "content": "#Choose a calculation method | Stripe Documentation\nURL: https://docs.stripe.com/connect/calculation-methods\n\n#Choose a calculation method\n#Learn about the calculation methods for reporting charges and payouts.\nThe Stripe 1099 tax reporting product allows platforms to select a calculation method, depending on the type of 1099 form they must file. While these calculation methods reflect the most common reporting scenarios, you can import CSV files and edit the amount on each 1099 form to better match the requirements.\n#Note\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n Available calculation method | 1099-K | 1099-MISC | 1099-NEC \n --- | --- | --- | --- \n Payments including fees | Yes | Yes | Yes \n Payments excluding fees | Yes | Yes | Yes \n Payouts only |  | Yes | Yes \n#Payments including fees\nThis payment calculation method includes all charges and transfers including any fees related to each transaction. Such fees might be:\n• Stripe processing and foreign currency conversion fees\n• Platform fees\nFor Form 1099-K, the IRS requires reporting gross reportable amounts without any adjustments. It’s the taxpayer’s responsibility to determine their taxable income by taking into account their business expenses and deductions.\nDepending on your business, you may determine this payment calculation method is also appropriate for the amounts on their Forms 1099-MISC or 1099-NEC.\n#Note\nRefunded charges aren’t deducted when using this calculation method.\n#Example 1\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the destination charge uses the platform’s API key. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 100 USD on their 1099 form for 2021, and no amount for 2020.\n Description | Amount \n --- | --- \n Customer charged | 100 USD \n Increase in connected account’s Stripe balance | 94.80 USD \n Increase in platform account’s Stripe balance | 2 USD \n Amount reported with this method | 100 USD \nAssume the same conditions, but a direct charge uses the connected account’s API key. With this method, the platform can report the same 100 USD on their 1099 form for 2021.\n#Example 2\nAssume the same conditions as Example 1, but the connected account issues a refund the same day as the charge because they’re unable to fulfill the order. Ignore any potential Stripe fees for refunds.\n Description | Amount \n --- | --- \n Customer charged | 100 USD \n Customer refunded | 100 USD \n Net change in connected account’s Stripe balance | 0 USD \n Net change in platform account’s Stripe balance | 0 USD \n Amount reported with this method | 100 USD \nWith this method, the platform can report the same 100 USD on their 1099 form for 2021, and no amount for 2020.\n#Payments excluding fees\nThis payment calculation method includes all charges and transfers excluding any fees related to each transaction. Such fees might be:\n• Stripe processing and foreign currency conversion fees\n• Platform fees\nThis method is useful if the platform wants to remove their fee from the amount reported for the connected account.\nFor example, in the destination charge flow, the application fee is attributed to the connected account, but a platform might pass the application fee to the end customer to pay the platform. Those funds aren’t necessarily attributable or even known to the connected account. While platforms acknowledge that gross amounts should be reported to their connected accounts on the Form 1099-K, they might think the gross amount to report should be payments excluding fees.\nFor Form 1099-K, the IRS requires reporting gross amounts for all reportable transactions, without any adjustments for refunds, fees, credits, cash equivalents, or discounts. Because platforms use Connect differently, we recommend working with a tax advisor to determine if this method is right for you based on the 1099 form you want to file.\nDepending on your business, you may determine this payment calculation method is also appropriate for the amounts on their Forms 1099-MISC or 1099-NEC.\n#Note\nStripe doesn’t deduct refunded charges when using this calculation method.\n#Example\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the destination charge uses the platform’s API key. The destination charge specifies an amount of 100 USD and a transferdata[amount] of 94.80 USD. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n`transferdata[amount]`On January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 94.80 USD on their 1099 form for 2021, and no amount for 2020.\n Description | Amount \n --- | --- \n Customer charged | 100 USD \n Increase in connected account’s Stripe balance | 94.80 USD \n Increase in platform account’s Stripe balance | 2 USD \n Amount reported with this method | 94.80 USD \nAssume the same conditions, but the destination charge specifies an amount of 100 USD and an applicationfeeamount of 5.20 USD. The Stripe fee is deducted on the platform’s account from the 5.20 USD. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n`applicationfeeamount`Assume the same conditions, but a direct charge uses the connected account’s API key. The direct charge specifies an amount of 100 USD and an applicationfeeamount of 5.20 USD. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n`applicationfeeamount`## Payouts only\nThe payouts only method lets you report only the amount that was paid out to the connected account’s bank account, minus any payout reversals. The amount may also include payments that aren’t related to a specific charge transaction. This calculation method takes into consideration payouts and not charges.\n`payouts``charges`Because platforms use Connect differently, we recommend working with a tax advisor to determine if this method is right for you based on the 1099 form you want to file.\n#Example\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the destination charge uses the platform’s API key. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout of 94.80 USD occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 94.80 USD on their 1099 form for 2021, and no amount for 2020.\n Description | Amount \n --- | --- \n Customer charged | 100 USD \n Increase in connected account’s Stripe balance | 94.80 USD \n Increase in platform account’s Stripe balance | 2 USD \n Amount reported with this method (2020) | 0 USD \n Amount reported with this method (2021) | 94.80 USD \nAssume the same conditions, but a direct charge uses the connected account’s API key. On January 7, 2021, a payout of 94.80 USD occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n#Additional calculation method topics\nThe following sections discuss calculation method topics that might be applicable to your platform.\n#Transactions included in calculations for the account\nThe inclusion of transactions in the Form 1099 calculations for the forms you will issue depends on the connected account’s controller.fees.payer property.\n`controller.fees.payer`- Transactions on accounts where controller.fees.payer = applicationcustom or applicationexpress are included in the calculations.\n• Transactions on accounts where controller.fees.payer = application could be included if the application fees for those transactions are paid to the platform. Otherwise, the transactions could be included in a Stripe-issued 1099.\n• Transactions on accounts where controller.fees.payer = account won’t be included, but instead could be included in a Stripe-issued 1099 to the account.\n`controller.fees.payer``applicationcustom``applicationexpress``controller.fees.payer``application``controller.fees.payer``account`### Timing and recognition of transactions\nStripe uses the availableon date of the balance transaction associated with the payment to determine which tax year the transaction belongs to. The availableon date represents the date the funds become available in the Stripe account. We believe this approach best matches the IRS’s instructions.\n`availableon``availableon`### Card not present payments\nIRS Form 1099-K box “1b” reports the volume of “card not present” payments. Stripe classifies a payment as “card present” or “card not present” based on the PaymentMethod type associated with that payment. The following PaymentMethod type values are “card present”. All others are “card not present”:\n`type``type`1. cardpresent\n# interacpresent\n`cardpresent``interacpresent`### Tax form totals\nWe recommend that platforms audit Stripe transactions that have contributed to a form’s totals by exporting the transaction log.\nAccount transactions performed outside of Stripe aren’t included in form totals. To include non-Stripe transactions, platforms must manually adjust the form box amounts before filing.\nTransactions created with the Transfers API to credit connected accounts (for example, handling dispute reversals and refund failures) are included in 1099-K form totals. Debits from connected accounts are excluded. To remove these credit transfers from the form, platforms must manually adjust the form box amounts before filing.\n#Separate charges and transfers\nStripe derives the reportable amount for a separate charge and transfer from the transfer, not the charge.\nAdditionally, you must use the sourcetransaction parameter to associate a charge with a transfer from your platform to a connected account—Stripe classifies any transfers without this parameter as “card not present” transactions.\n`sourcetransaction`If you initially created a separate charge and transfer with a link from the transfer to the charge and later updated the Charge object to include the transfer, we treat it like a destination charge in calculations. The gross amount on your draft form might change if you’ve opted to include fees, as we’ll now include the charge in our considerations.\n`Charge`### Foreign exchange rate conversions\nStripe’s 1099 calculation methods convert non-USD transactions to USD using the market exchange rate from the day the transaction is created. This method might yield a different value than the Stripe Dashboard shows because we compute that value using an intra-day exchange rate adjusted for Stripe’s foreign exchange fee.\n#Cancelled asynchronous payments\nIf a user cancels an asynchronous payment (for example, ACH debit) that would’ve otherwise been successful before the payment completes, that payment might still be included in the results of the “payments including fees” and “payments excluding fees” methods.\n#Export transaction logs\nFor tax year 2022 and later, you can use the Stripe Dashboard to export the transaction log of each 1099 form. A transaction log lists the Stripe transactions that have contributed to a form’s total. This log allows you to audit transaction discrepancies and answer questions from your connected accounts about which transactions Stripe includes in their tax forms.\nAfter you export the transaction log, the sum of its Calculation Amount column reflects the form total that you see on the 1099. For each transaction, we show the applicable merchantid, balancetransactionid, chargeid, and transferid along with the calculation amount relevant to that transaction. The calculation amount is dependent on the type of calculation method you choose. The 1099-K form transaction logs list cardnotpresentvolume and transaction_count to match the values on the form.\n#Note\nTransaction logs only contain Stripe transactions. Manual updates through CSV imports or the Dashboard’s Tax form editor won’t be included in the transaction log.\nTo export the transaction log of a tax form:\n# Navigate to the Tax reporting page in the Dashboard.\n# Select the checkbox next to the tax form.\n# Click the overflow menu () at the top-right of the tax form and select Export transaction log.\n# Specify the date range and rows that you want to export. Use the default export settings to capture all the details of the entire year. The transaction log file downloads in your browser. Keep the email notification option selected if you want to receive an email containing a link to download your transaction log.\nThe transaction log file downloads after Stripe finishes the export process. If you exported with the email notification option selected, Stripe also sends you an email from notification@stripe.com with a link to download your transaction log.\n`notification@stripe.com`"}, {"path": "connect\\charges.md", "url": "https://docs.stripe.com/connect/charges", "content": "#Create a charge | Stripe Documentation\nURL: https://docs.stripe.com/connect/charges\n\n#Create a charge\n#Create a charge and split payments between your platform and your sellers or service providers.\nTo accept a payment from a customer, you must first create a charge. The type of charge you create—direct, destination, or separate charges and transfers—determines how these funds are split among all parties involved, impacts how the charge appears on the customer’s bank or billing statement (with your platform’s information or your user’s), and determines which account Stripe debits for refunds and chargebacks.\n#Charge types\nThere are many factors to consider when choosing a charge type, as listed in the table below. Your platform’s business model is particularly important because it can affect how funds flow through Stripe. To review charge type recommendations for your business, refer to your platform profile.\n Charge type | Use when | Examples \n --- | --- | --- \n Direct charges | Customers directly transact with your connected account, often unaware of your platform’s existence.The transaction involves a single user.You’d like to choose if Stripe fees are debited from your connected accounts or your platform | An e-commerce platform like Shopify or SquarespaceAn accounting platform that enables invoice payments like Freshbooks \n Destination charges | Customers transact with your platform for products or services provided by your connected account.The transaction involves a single user.Stripe fees are debited from your platform account. | A ride-hailing service like LyftA services platform like Thumbtack \n Separate charges and transfers | Any one of these instances:The transaction involves multiple users.A specific user isn’t known at the time of charge.Transfer can’t be made at the time of charge.Stripe fees and processing fees are debited from your platform account. | An e-commerce marketplace that allows a single shopping cart for goods sold by multiple businesses \n• Customers directly transact with your connected account, often unaware of your platform’s existence.\n• The transaction involves a single user.\n• You’d like to choose if Stripe fees are debited from your connected accounts or your platform\n• An e-commerce platform like Shopify or Squarespace\n• An accounting platform that enables invoice payments like Freshbooks\n• Customers transact with your platform for products or services provided by your connected account.\n• The transaction involves a single user.\n• Stripe fees are debited from your platform account.\n• A ride-hailing service like Lyft\n• A services platform like Thumbtack\n• The transaction involves multiple users.\n• A specific user isn’t known at the time of charge.\n• Transfer can’t be made at the time of charge.\n• Stripe fees and processing fees are debited from your platform account.\n• An e-commerce marketplace that allows a single shopping cart for goods sold by multiple businesses\nYou can use a single approach, more than one approach, or switch approaches as appropriate for your organization.\n#Direct charges\nCreate a charge directly on a connected account. Customers are often unaware of your platform’s existence. You can add an application fee to the charge which is transferred to your platform’s account balance.\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\nWith this charge type:\n• You create a charge on your user’s account so the payment appears as a charge on the connected account, not in your account balance.\n• The connected account’s balance increases with every charge.\n• Funds always settle in the country of the connected account.\n• Your account balance increases with application fees from every charge.\n• The connected account’s balance is debited for refunds and chargebacks.\n• You can choose whether to have Stripe debit fees directly from connected accounts or from your platform account.\n• You can use Stripe Managed Risk if you meet these additional requirements.\nHow are funds routed with direct charges?\n#Caution\nOnly connected accounts with the cardpayments capability can be directly charged.\n#Destination charges\nCreate a charge on the platform and immediately transfers funds to a specified connected account. You decide whether some or all of those funds are transferred, and whether to deduct an application fee.\nThis charge type is best suited for marketplaces such as Airbnb, a home rental marketplace or Lyft, a ridesharing app.\nWith this charge type:\n• You create a charge on your platform’s account so the payment appears as a charge on your account. Then, you determine whether some or all of those funds are transferred to the connected account (see funds flow diagrams below).\n• Your platform account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\nSend the balance after platform fee to your connected account.\nSend the full payment amount to your connected account, then charge your platform fee.\n#Caution\nIn most scenarios, destination charges are only supported if both your platform and the connected account are in the same region (for example, both in the US). For cross-region support, you can specify the settlement merchant to the connected account using the onbehalfof attribute on the charge. For more information about cross-region support, see Cross-border transfers.\n#Separate charges and transfers\nCreate charges on your platform and split funds between multiple connected accounts, or hold them when you don’t know the specific user at the time of the charge. The charge on your platform account is decoupled from the transfers to your connected accounts.\nThis charge type is best suited for marketplaces that need to split payments between multiple parties, such as DoorDash, a restaurant delivery platform.\nFor Express and Custom accounts, Stripe recommends that you create separate charges and transfers if destination charges don’t meet your business needs.\nWith this charge type:\n• You create a charge on your platform’s account first. Create a separate transfer to move funds to your connected account. The payment appears as a charge on your account and there’s also a transfer to a connected account (amount determined by you), which is withdrawn from your account balance.\n• You can transfer funds to multiple connected accounts.\n• Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\nTransfer funds to multiple connected accounts.\n#Caution\nIn most scenarios, your platform and any connected account must be in the same region. Attempting to transfer funds across a disallowed border returns an error. For information about cross-region support, see Cross-border transfers.\nUsing separate charges and transfers requires a more complex Connect integration.\nUse this charge type if your business has specific use cases:\n• A one-to-many relationship. For example, a payment made to a delivery service needs to be split between the store (the source of the items being delivered) and the delivery person.\n• A many-to-one relationship. For example, a carpool trip with a ride-hailing service.\n• Charges created before the destination account is known. For example, a janitorial service could process a payment before deciding which janitor to assign to the job.\n• Need to transfer funds before receiving a payment, or while the charge is pending. For example, an ad network needs to purchase ad space before they can sell ad time or before receiving any payment from customers.\n• Transfer amounts greater than the associated payments. For example, a platform provides a discount to its customer but pays its user the full amount.\nIn some cases, the transfer amount can be greater than the charge amount, or the transfer is made before the payment is processed. You must monitor your account balance carefully to make sure it has enough available funds to cover the transfer amount. You can also associate a transfer with a charge so the transfer doesn’t occur until the funds from that charge are available.\n#onbehalfof parameter\nTo make the connected account the business of record for the payment use the onbehalfof parameter.  When onbehalfof is set to the ID of the connected account, Stripe automatically:\n`onbehalfof``onbehalfof`- Settles charges in the country of the specified account, thereby minimizing declines and avoiding currency conversions.\n• Uses the fee structure for the connected account’s country.\n• Uses the connected account’s statement descriptor.\n• If the account is in a different country than the platform, the connected account’s address and phone number shows up on the customer’s credit card statement (as opposed to the platform’s).\n• The number of days that a pending balance is held before being paid out depends on the delaydays setting on the connected account.\n`delaydays`## Stripe fees\nThere are two components to Stripe fees with Connect: which pricing plan applies to the payment and which account pays Stripe fees.\nWhen using Direct charges, you can choose how Stripe fees are billed to your connected accounts.\nRead more about fee billing behaviors with Direct charges.\nDestination charges and separate charges and transfers typically use the platform’s pricing plan and are assessed on the platform. When the onbehalfof field is set, the country of the connected account is used to determine the country specific fees charged to your platform account.\n`onbehalfof`For more information on Connect fees and how to request custom pricing, please see Connect pricing.\n#Refunds\nYou can issue a refund to pay back the money spent on the returned good or to compensate for unsatisfactory service. Below describes how refunds are handled for each charge type:\n Charge Types | Pending Refunds \n --- | --- \n Direct charges | If the connected account’s balance is sufficiently negative at creation time, the refund object is set to a status of pending. When enough funds are available in the connected account’s balance, Stripe automatically processes any refunds with a pending status and updates the status to successful. \n Separate charges and transfers | If the connected account’s balance and your platform’s account balance are sufficiently negative at creation time, the refund object is set to a status of pending. When enough funds become available in your connected account’s or platform’s balance, Stripe automatically processes the refunds with a pending status and updates their status to successful. \n Destination charges | If your platform’s account balance is sufficiently negative at creation time, the refund object is set to a status of pending. When enough funds become available in your platform’s balance, Stripe automatically processes the refunds with a pending status and updates their status to successful.If the connected account’s balance is sufficiently negative and a refund request also attempts a transfer reversal, the refund request returns an error, instead of creating a refund with pending status. \n`refund``pending``pending``successful``refund``pending``pending``successful`Destination charges\nIf your platform’s account balance is sufficiently negative at creation time, the refund object is set to a status of pending. When enough funds become available in your platform’s balance, Stripe automatically processes the refunds with a pending status and updates their status to successful.\n`refund``pending``pending``successful`If the connected account’s balance is sufficiently negative and a refund request also attempts a transfer reversal, the refund request returns an error, instead of creating a refund with pending status.\n`pending`## Disputes and chargebacks\nFor disputes on payments created using direct charges, Stripe debits the disputed amount from the connected account’s balance, not your platform’s balance. Stripe can bill the dispute fee to either the platform or the connected account, depending on the connected account’s configuration. For more detail about how we bill fees for disputes on direct charges, see Fee behavior on connected accounts.\nFor disputes where payments were created on your platform using destination charges or separate charges and transfers, with or without onbehalfof, your platform balance is automatically debited for the disputed amount and fee. When this happens, your platform can attempt to recover funds from the connected account by reversing the transfer either through the Dashboard or by creating a transfer reversal.\n`onbehalfof`#### Caution\nCreating payments using destination charges or separate charges or transfers, with or without onbehalfof, always debits refund and disputed amounts from your platform balance, even when Stripe is liable for negative balances on your connected accounts.\n`onbehalfof`If there’s a negative balance on the connected account, Stripe attempts to debit the external account on file for the connected account only if debitnegativebalances is set to true.\n`debitnegative_balances``true`For more details, see Disputes and fraud and Dispute categories. You can also use Fraud Stripe Apps to automate dispute management and handle chargebacks.\n#See also\n• Create direct charges\n• Create destination charges\n• Create separate charges and transfers\n• Set statement descriptors\n• Supported payment methods\n• Integrate tax calculation and collection"}, {"path": "connect\\cloning-customers-across-accounts.md", "url": "https://docs.stripe.com/connect/cloning-customers-across-accounts", "content": "#Clone customer payment information across connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/cloning-customers-across-accounts\n\n#Clone customer payment information across connected accountsLegacy\n#Reuse payment information across multiple connected accounts that share customers.\n#Caution\nThe content of this page describes a legacy feature. Support for it might end without notice, so if you use this feature, update your integration to use the current process for reusing payment information across connected accounts. For more information, see Share payment methods across multiple accounts.\nFor some business models, it’s helpful to reuse your customers’ payment information across connected accounts. For example, a customer who makes a purchase from one of your connected sellers shouldn’t need to re-enter their credit card or bank account details to purchase from another seller.\nWith Connect, you can accomplish this by following three steps:\n# Storing customers, with a payment method, on the platform account.\n# Creating tokens to clone the payment method when it’s time to charge the customer on behalf of a connected account.\n# Creating charges using the new tokens.\n#Storing customers\nWhen not cloning payment methods, you save the Stripe Customer objects on each individual connected Stripe account. When cloning payment methods, you instead save them on the platform Stripe account.\nThis is an API call but be sure to use your own secret and publishable keys instead of the connect account’s.\ncurl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode email=\"paying.user@example.com\" \\\n  -d source=tokmastercard\n`curl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode email=\"paying.user@example.com\" \\\n  -d source=tokmastercard`## Creating tokens\n#Caution\nIf your platform uses the Sources API, you must create a Source from that customer rather than creating a token. If your platform uses the Payment Methods API, you must create a PaymentMethod from that customer. After following either of these guides, proceed to Creating charges without creating a token.\nWhen you’re ready to create a charge on a connected account using a customer saved on your platform account, create a new token for that purpose. You’ll need:\n• The Stripe account ID of the connected account (for example, acctcFGsUD8AYCy63ymZ) that you’re creating the charge for\n• The ID of the customer in your platform account (for example, cusrfuvHUgubtjyAI) being charged\n• The card or bank account ID for that customer, if you want to charge a specific card or bank account rather than the default\n`acctcFGsUD8AYCy63ymZ``cusrfuvHUgubtjyAI`curl https://api.stripe.com/v1/tokens \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d customer={{CUSTOMERID}}\n`curl https://api.stripe.com/v1/tokens \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d customer={{CUSTOMERID}}`## Creating charges\nWith the token generated in the previous step, attach this token to a customer on the connected account.\n#Caution\nCharges that are made on the cloned customer aren’t reflected on the original customer. This feature is intended for multiple connected accounts that need to charge the same user.\n#Caution\nIf your platform uses the Payment Methods API, you must pass the payment method ID as the paymentmethod parameter instead of passing the source parameter.\n`paymentmethod``source`curl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d source={{TOKENID}}\n`curl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d source={{TOKENID}}`Then, use the customer ID (for example, cusWZKszTXVrX5q6t) and the payment method ID (for example, cardAo3vTBXxb71WUr) returned by the customers.create  call to charge the customer.\n`cusWZKszTXVrX5q6t``cardAo3vTBXxb71WUr``customers.create`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=999 \\\n  -d currency=usd \\\n  -d \"paymentmethodtypes[]\"=card \\\n  -d customer={{CUSTOMERID}} \\\n  -d paymentmethod={{PAYMENTMETHODID}}\n`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=999 \\\n  -d currency=usd \\\n  -d \"paymentmethodtypes[]\"=card \\\n  -d customer={{CUSTOMERID}} \\\n  -d paymentmethod={{PAYMENTMETHODID}}`## See also\n• Creating charges\n• Creating direct charges"}, {"path": "connect\\collect-then-transfer-guide.md", "url": "https://docs.stripe.com/connect/collect-then-transfer-guide", "content": "#Collect payments then pay out | Stripe Documentation\nURL: https://docs.stripe.com/connect/collect-then-transfer-guide\n\n#Collect payments then pay out\n#Collect payments from customers and pay them out to sellers or service providers.\nThis guide explains how to accept payments and move funds to the bank accounts of your service providers or sellers. For demonstration purposes, we’ll build a home-rental marketplace that connects homeowners to potential tenants. We’ll also show you how to accept payments from tenants (customers) and pay out homeowners (your platform’s users).\n#Prerequisites\n# Register your platform.\n# Add business details to activate your account.\n# Complete your platform profile.\n# Customize your brand settings. Add a business name, icon, and brand color.\n#Set up StripeServer-side\nInstall Stripe’s official libraries to access the API from your application:\n#Available as a gem\nsudo gem install stripe\n`# Available as a gem\nsudo gem install stripe`#If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n`# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'`## Create a connected account\nWhen a user (seller or service provider) signs up on your marketplace, you must create a corresponding user Account (referred to as a connected account). You can’t accept payments and move funds to the bank account of your user without a connected account. Connected accounts represent your users in the Stripe API and collect the information required to verify the user’s identity. In our home-rental example, the connected account represents the homeowner.\n#Create a connected account and prefill information\nUse the /v1/accounts API to create a connected account by specifying the connected account properties, or by specifying the account type.\n`/v1/accounts`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=express\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=express`If you’ve already collected information for your connected accounts, you can prefill that information on the Account object. You can prefill any account information, including personal and business information, external account information, and so on.\n`Account`Connect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the Connect service agreement.\nWhen testing your integration, prefill account information using test data.\n#Create an account link\nYou can create an account link by calling the Account Links API with the following parameters:\n• account\n• refreshurl\n• returnurl\n• type = accountonboarding\n`account``refreshurl``returnurl``type``accountonboarding`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding`### Redirect your user to the account link URL\nThe response to your Account Links request includes a value for the key url. Redirect to this link to send your user into the flow. URLs from the Account Links API are temporary and are single-use only, because they grant access to the connected account user’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you can’t read or write information for the connected account.\n`url`#### Security tip\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n#Handle the user returning to your platform\nConnect Onboarding requires you to pass both a returnurl and refreshurl to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n`returnurl``refreshurl`#### Note\nYou can use HTTP for your returnurl and refreshurl while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n`returnurl``refreshurl`#### returnurl\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\nNo state is passed through this URL. After a user is redirected to your returnurl, check the state of the detailssubmitted parameter on their account by doing either of the following:\n`returnurl``detailssubmitted`- Listening to account.updated webhooks\n• Calling the Accounts API and inspecting the returned object\n`account.updated`#### refreshurl\nStripe redirects your user to the refreshurl in these cases:\n`refreshurl`- The link is expired (a few minutes went by since the link was created).\n• The user already visited the URL (the user refreshed the page or clicked back or forward in the browser).\n• Your platform is no longer able to access the account.\n• The account has been rejected.\nYour refreshurl should trigger a method on your server to call Account Links again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.\n`refreshurl`### Handle users that haven’t completed onboarding\nA user that’s redirected to your returnurl might not have completed the onboarding process. Use the /v1/accounts endpoint to retrieve the user’s account and check for chargesenabled. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the detailssubmitted parameter on their account to see if they’ve completed the onboarding process.\n`returnurl``/v1/accounts``chargesenabled``detailssubmitted`## Enable payment methods\nView your payment methods settings and enable the payment methods you want to support. Card payments, Google Pay, and Apple Pay are enabled by default but you can enable and disable payment methods as needed.\nBefore the payment form is displayed, Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden in an overflow menu.\n#Accept a payment\nUse Stripe Checkout to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer. You can accept payments with Checkout using a Stripe-hosted page or add a prebuilt embeddable payment form directly in your website. You can also create a custom flow (using Payment Element) to accept multiple payment methods with a single front-end integration.\n#Create a Checkout Session Client and Server\nA Checkout Session controls what your customer sees in the Stripe-hosted payment page such as line items, the order amount and currency, and acceptable payment methods.\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`On your server, make the following call to Stripe’s API. After creating a Checkout Session, redirect your customer to the URL returned in the response.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d \"paymentintentdata[transferdata][destination]\"={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d \"paymentintentdata[transferdata][destination]\"={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\"`- lineitems - This argument represents the items the customer is purchasing. The items are displayed in the Stripe-hosted user interface.\n• successurl - This argument redirects a user after they complete a payment.\n• cancelurl  - This argument redirects a user after they click cancel.\n• paymentintentdata[applicationfeeamount] - This argument specifies the amount your platform plans to take from the transaction. The full charge amount is immediately transferred from the platform to the connected account that’s specified by transferdata[destination] after the charge is captured. The applicationfeeamount is then transferred back to the platform, and the Stripe fee is deducted from the platform’s amount.\n• paymentintentdata[transferdata][destination] - This argument indicates that this is a destination charge. A destination charge means the charge is processed on the platform and then the funds are immediately and automatically transferred to the connected account’s pending balance. For our home-rental example, we want to build an experience where the customer pays through the platform and the homeowner gets paid by the platform.\n`lineitems``successurl``cancelurl``paymentintentdata[applicationfeeamount]``transferdata[destination]``applicationfeeamount``paymentintentdata[transferdata][destination]`Checkout uses the brand settings of your platform account for destination charges. For more information, see Customize branding.\nThis Session creates a destination charge. If you need to control the timing of transfers or need to transfer funds from a single payment to multiple parties, use separate charges and transfers instead. To use separate charges, see Enable other businesses to accept payments directly.\n#Handle post-payment events  Server-side\nStripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.\nIn addition to handling the checkout.session.completed event, we recommend handling two other events when collecting payments with Checkout:\n`checkout.session.completed`| Event | Description | Next steps |\n --- | --- | --- \n checkout.session.completed | The customer has successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. \n checkout.session.asyncpaymentsucceeded | The customer’s payment succeeded. | Fulfill the purchased goods or services. \n checkout.session.asyncpaymentfailed | The payment was declined, or failed for some other reason. | Contact the customer through email and request that they place a new order. \nThese events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded.\n`processing``succeeded`## Testing\nTest your account creation flow by creating accounts and using OAuth.\n Card number | Scenario | How to test \n --- | --- | --- \n 4242424242424242 | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000002500003155 | The card payment requires authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000000000009995 | The card is declined with a decline code like insufficientfunds. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 6205500000000000004 | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n`insufficientfunds`See Testing for additional information to test your integration.\n#Disputes\nAs the settlement merchant on charges, your platform is responsible for disputes. Make sure you understand the best practices for responding to disputes.\n#Payouts\nBy default, any funds that you transfer to a connected account accumulate in the connected account’s Stripe balance and are paid out on a daily rolling basis. You can change the payout frequency by going into the connected account’s detail page, clicking the right-most button in the Balance section, and selecting Edit payout schedule.\n#Refunds\nTo issue refunds, go to the Payments page. Select individual payments by clicking the checkbox to the left of any payments you want to refund. After you select a payment, Stripe displays a Refund button in the upper-right corner of the page. Click the Refund button to issue a refund to customers for all payments you have selected.\n#Note\nConnected accounts can’t initiate refunds for payments from the Express Dashboard. If your connected accounts use the Express Dashboard, you must process refunds for them.\n#See also\n• Manage connected accounts in the Dashboard\n• Issue refunds\n• Customize statement descriptors\n• Work with multiple currencies"}, {"path": "connect\\comms-center.md", "url": "https://docs.stripe.com/connect/comms-center", "content": "#Comms Center | Stripe Documentation\nURL: https://docs.stripe.com/connect/comms-center\n\n#Comms Center\n#Collect and send communications to connected accounts.\n#Overview\nPlatforms that want to update the emails Stripe has on file for connected accounts can update them using the Comms Center collection flow.\n#Collecting emails\nAfter hitting Get Started you see the main page for collection and validation.\n#1. Download a template with all of your connected accounts that are eligible for receiving communications.\nYou get a template CSV like this:\nAccount ID,Business Name,First Name,Last Name,Email Address (please add or replace),User has claimed primary user email address\nacct123abc,Connected Account A,John,Doe,,✔\nacct456def,Connected Account B,,,,✗\n`Account ID,Business Name,First Name,Last Name,Email Address (please add or replace),User has claimed primary user email address\nacct123abc,Connected Account A,John,Doe,,✔\nacct456def,Connected Account B,,,,✗`### 2. Add the email addresses you want to add to the business within Stripe\nFor example, a filled out CSV might look like this:\nAccount ID,Business Name,First Name,Last Name,Email Address (please add or replace),User has claimed primary user email address\nacct123abc,Connected Account A,John,Doe,email-a@email.com,✔\nacct456def,Connected Account B,,,email-b@email.com,✗\n`Account ID,Business Name,First Name,Last Name,Email Address (please add or replace),User has claimed primary user email address\nacct123abc,Connected Account A,John,Doe,email-a@email.com,✔\nacct456def,Connected Account B,,,email-b@email.com,✗`### 3. Upload the file with your changes\nThe filename doesn’t matter. Only the Account ID and Email Address (please add or replace) fields matter here, the rest are only for validating your changes.\n#4. Wait for validation to complete and verify the account changes are correct.\n#5. Confirm your changes\nAfter confirming, you see the completion state. Updates can take some time, depending on how many emails you’ve uploaded. We send email updates to any webhooks you’ve configured.\n#Important usage notes\n• Comms Center can only currently handle CSVs with 500,000 rows. If you have more than that, break up your CSV into multiple files.\n• If you get validation errors, make sure your headers on your CSV match the expected headers. The required columns are Account ID which has the acct tokens and Email Address (please add or replace) which has the desired email.\n`Account ID``acct``Email Address (please add or replace)`"}, {"path": "connect\\connect-tax-id-onboarding.md", "url": "https://docs.stripe.com/connect/connect-tax-id-onboarding", "content": "#Tax ID Additional Verification | Stripe Documentation\nURL: https://docs.stripe.com/connect/connect-tax-id-onboarding\n\n#Tax ID Additional Verification\n#Learn how to use Stripe Tax ID Additional Verification to collect and verify the Tax ID of your users.\nConnect dynamically requires onboarding information to keep your accounts compliant, but you can influence what information Connect requires in your platform by adding additional verifications (AVs) to accounts. Requesting an additional verification requires your connected accounts to provide certain information, which is then verified.\nPlatforms might be subject to IRS fines up to 290 USD per submission if they file 1099s with incorrect information (for example, name or tax ID mismatches). The Tax ID AV provides a way for platforms to collect certified tax IDs throughout the year directly from your connected accounts before issuing 1099s, to make sure the appropriate 1099 tax forms use the correct Taxpayer Identification Number (TIN).\nThe Tax ID Additional Verification performs a name and TIN check either at the personal level or business level based on required verification information for taxes.\n#How it works\nThe Tax ID Additional Verification allows you to enforce the mandatory collection and verification of tax ID requirements for a connected account. Platforms add requirements for Tax ID collection/verification for a connected account using the Accounts API.\nFor Custom Connect platforms, after you add the requirements on a connected account, your platform can Create an account link to redirect the user from your platform to Connect Onboarding. Alternatively, you can collect the requirements directly from your platform, and then send it to Stripe using Update an account. For Express Connect platforms, Stripe sends the Express connected accounts an email to complete the missing or invalid requirements using the Express Dashboard.\nAfter Stripe receives the user’s TIN, we automatically verify it by comparing it with the IRS database. If the IRS database confirms the TIN is a match, the requirements are considered satisfied. If the IRS database doesn’t return a TIN match with the connected account’s tax details, then enforcement limits are triggered.\nPlatforms have full customization in setting enforcement limits to determine when Connected Accounts are required to provide a verified TIN. You can set the following enforcement limits to impose disablement of payouts or payouts or payments if a verified TIN isn’t on file:\n• Upfront: Block payouts or payments if a verified TIN isn’t on file immediately.\n• Volume: Block payouts or payments if a verified TIN isn’t on file after processing x USD.\n• Time: Block payouts or payments if a verified TIN isn’t on file after x days.\n• Combo: Block payouts or payments if a verified TIN isn’t on file after x days or after processing x USD.\n#Get started\nCurrently, access to Stripe’s Tax ID Additional Verification is limited to US preview users. To request access to the preview, reach out to your account team or contact Stripe for more information."}, {"path": "connect\\connect-w8-w9-onboarding.md", "url": "https://docs.stripe.com/connect/connect-w8-w9-onboarding", "content": "#Connect W-8 and W-9 | Stripe Documentation\nURL: https://docs.stripe.com/connect/connect-w8-w9-onboarding\n\n#Connect W-8 and W-9\n#Use Stripe's W-8 and W-9 Connect product to collect the necessary tax forms from your users.\n#What’s the Stripe W-8 and W-9 Connect product?\nStripe’s W-8 and W-9 Connect product provides a seamless way to collect certified tax information from connected accounts through the Express Dashboard or Stripe-hosted onboarding. This includes the name, address, and TIN (Tax ID) of a taxpayer. A W-9 tax form is for US residents or citizens and is used to confirm their TIN (SSN/ITIN/EIN). A W-8 tax form is for non-US tax residents and is used to certify their name, address, and foreign TIN (if applicable), to confirm that they’re not a US taxpayer. A non-US resident can also specify the appropriate treaty and/or withholding rates applicable to their business.\nPlatforms might be subject to IRS fines up to 290 USD per incorrect submission if they file 1099s with incorrect information. W-8 and W-9s provide a way for Platforms to collect certified tax information throughout the year directly from your Connected Accounts before issuing 1099s to make sure the correct information is used on the appropriate 1099 forms.\nWith the W-8 and W-9 Connect product, your connected accounts can complete the appropriate W8 or W9 form with a few simple clicks. Any information connected accounts have already provided is pre-populated onto the forms for the ease of your users. They only need to confirm the information is accurate and make updates where needed. No more PDFs, emails, or wet-ink signatures needed.\nPlatforms will have a fully customizable Dashboard which tracks the status of all W-8 or W-9 requests. You’ll be able to easily see which users have completed the appropriate documentation and which users are still pending, and you can download PDFs of any submitted forms.\nConnected Accounts also have a unified tax experience where they can manage completing their tax forms and storage of their tax documents all within the Stripe Express Dashboard.\nStripe W-8 and W-9 forms dashboard\n#How does it work?\nPlatforms determine appropriate collection timing for when to request a W-8 or W-9. If choosing to collect at onboarding, all new users are asked to verify and attest to their tax information. If choosing to collect at a later date, Platforms request W-8 or W-9 collection with the Accounts API and then route their user to verify and attest to their tax information. Platforms can also request W-8 or W-9 collection from all accounts—existing accounts will be notified at that time.\nCustomize the W-8 and W-9 collection configuration\nPlatforms have full customization in setting enforcement thresholds to determine when Connected Accounts will be required to submit a W-8/W-9 tax form:\n• Volume: Block payouts if a W-8 or W-9 isn’t submitted after processing x USD.\n• Time: Block payouts if a W-8 or W-9 isn’t submitted after x days.\n• Combo: Block payouts if a W-8 or W-9 isn’t submitted after x days or after processing x USD.\n#How do I get started?\nCurrently, access to Stripe’s W-8/W-9 Connect product is limited to US preview users. To request access to the preview and to learn more about pricing, reach out to your account team or contact Stripe for more information."}, {"path": "connect\\correct-tax-forms.md", "url": "https://docs.stripe.com/connect/correct-tax-forms", "content": "#Correct tax forms | Stripe Documentation\nURL: https://docs.stripe.com/connect/correct-tax-forms\n\n#Correct tax forms\n#File corrections to tax forms.\n#Getting your 1099 forms\nIf you work for a platform that pays you using Stripe, learn how to get your 1099 tax forms.\nIn some cases, you need to correct the values in a 1099 tax form after you’ve filed it. If you try to update a tax form that you already filed, you see a Correct button instead of an Edit button in the form.\n#Correction Reasons\nYou might need to issue a correction for several reasons:\n• To change the identity data of your connected account. For example, users may request changes to their name, address, or tax identification information\n• To change form totals\n• To handle forms with Rejected state filing status. If you have forms with federal filing status of Rejected, please reach out to Stripe support.\n`Rejected``Rejected`### Rejection reasons\nHere are the most common rejection reasons:\n Attribute | Example rejection reasons \n --- | --- \n TIN | Missing, invalid, mismatched with IRS records \n Address | Non-English characters, malformed zip codes, missing fields (for example, city, empty Line 1 address) \n Name | Missing, non-English or non-alphabetical characters \nThe Rejected status implies that the form was either rejected by the IRS or state after submission, or that the state refused to accept the information during submission.\n`Rejected`You can file a correction to update information on a form that has been rejected by a state (if federal filing status shows up as “rejected”, please contact Stripe support). Stripe 1099 intelligently files Corrections if the form was initially accepted or Replacements if it was rejected.\n#Delivery failures\nIf the delivery status is Failed, that means we couldn’t deliver the tax form to the mailing address on file. There could be two reasons for this:\n`Failed`- Misconfigured address -  The address is missing or invalid. For example, it includes non-English characters, the zip code doesn’t have the correct number of digits, or the city is missing.\n• Non-deliverable address - The address doesn’t exist and our delivery partners can’t use it to deliver first-class mail.\n#Supported corrections\nYou can correct most boxes on a tax form. Depending on when you submit a correction and what you’re correcting, penalties may apply.\nThe IRS generally allows you to correct totals or payee information.\n• When you correct totals, a single form replaces the original and includes the original payee information, new totals, and a checked Corrected checkbox.\n• When you correct payee information, two forms replace the original:The first form includes the original payee information, zeros for all totals, and a checked Corrected checkbox.The second form includes the new payee information, original totals, and an unchecked Corrected checkbox (because this is the first form received by the new payee).\nWhen you correct totals, a single form replaces the original and includes the original payee information, new totals, and a checked Corrected checkbox.\nWhen you correct payee information, two forms replace the original:\n• The first form includes the original payee information, zeros for all totals, and a checked Corrected checkbox.\n• The second form includes the new payee information, original totals, and an unchecked Corrected checkbox (because this is the first form received by the new payee).\nThe IRS imposes certain requirements on tax form corrections.\nYou can’t correct:\n• The payee name and form totals in the same form\n• The payee tax identification number and form totals in the same form\n• Tax forms that the IRS hasn’t accepted\n• The form type (for example, 1099-MISC to 1099-NEC)\n#Create a correction\nYou can only correct tax forms that the IRS has accepted.  There are a few ways to start corrections, each of which results in a corrected form that shows up as a Ready Correction.\n#Note\nIf you want to update information for the connected account permanently, make the changes programmatically using the Accounts API or the Connected Accounts details page and you can then use Quick Correct as shown below. Without doing this first, you’ll be updating the information only on the tax form. This doesn’t persist onto the connected account details and you’ll have to re-enter this information next tax season.\n• Use the Tax form editorSelect the form on the Tax reporting page.Click Correct to create a correction.Make the necessary changes.Save the changes.\n• Use a CSV importSelect the form and export it as a CSV.Open the CSV in a compatible tool to make and save the necessary changes.Import the updated CSV using the import mode Correct.Corrections use the same CSV schema as updates and are filed regardless of filing threshold. This allows you to zero out a tax form that was accidentally filed or to correct a tax form to have a lower volume. The Filingrequirement allows you to specify whether or not to file a correction.\n• Use Quick CorrectIf the identity (name, address, TIN) of the connected account has been updated in Stripe and now differs from what’s on the filed form, a pencil icon appears next to the “Payee details” for platform admin accounts. Hovering over the pencil and clicking Correct generates a corrected form to match the identity values of the connected account.When you click Correct to update the values in the tax form, it updates all values that are different in the connected account than the tax form. You can’t choose which fields to update values for. Verify all changes before filing the updated forms. For example, if a connected account user made a typo in their address, the incorrect address is updated in the corrected form.To list the forms with identity values that differ between the connected account and the tax form in order to find potential corrections, add a Payee details filter with a value of “Payee has updated identity info”.\nUse the Tax form editor\n# Select the form on the Tax reporting page.\n# Click Correct to create a correction.\n# Make the necessary changes.\n# Save the changes.\nUse a CSV import\n# Select the form and export it as a CSV.\n# Open the CSV in a compatible tool to make and save the necessary changes.\n# Import the updated CSV using the import mode Correct.\nCorrections use the same CSV schema as updates and are filed regardless of filing threshold. This allows you to zero out a tax form that was accidentally filed or to correct a tax form to have a lower volume. The Filingrequirement allows you to specify whether or not to file a correction.\nUse Quick Correct\nIf the identity (name, address, TIN) of the connected account has been updated in Stripe and now differs from what’s on the filed form, a pencil icon appears next to the “Payee details” for platform admin accounts. Hovering over the pencil and clicking Correct generates a corrected form to match the identity values of the connected account.\nWhen you click Correct to update the values in the tax form, it updates all values that are different in the connected account than the tax form. You can’t choose which fields to update values for. Verify all changes before filing the updated forms. For example, if a connected account user made a typo in their address, the incorrect address is updated in the corrected form.\nTo list the forms with identity values that differ between the connected account and the tax form in order to find potential corrections, add a Payee details filter with a value of “Payee has updated identity info”.\n#View or cancel a correction\nTax form corrections have a Correction badge in the tax forms list and on the detail pane in the Dashboard. You can download previous versions of a tax form from the detail pane. To cancel a correction before filing, click Cancel correction from the menu on the detail pane.\n#File a correction\nOnce you have successfully created a correction via one of the methods above, the corrected form will move to “Ready” column of your Tax Forms page after a page refresh regardless of whether the form is above filing threshold.\nIf you want to file the correction, select the correction and click the file button. If you want to skip filing one of the corrections, set the filing requirement to NOTREQUIRED in the Tax Form Editor or import a CSV file.\n`NOTREQUIRED`If you selected to e-deliver your tax forms through an interface built by Stripe, your connected account receives an email notifying them that the corrected form is available within the interface."}, {"path": "connect\\cross-border-payouts.md", "url": "https://docs.stripe.com/connect/cross-border-payouts", "content": "#Cross-border payouts | Stripe Documentation\nURL: https://docs.stripe.com/connect/cross-border-payouts\n\n#Cross-border payoutsUS only\n#Transfer and pay out funds to other countries.\nCross-border payouts enable you to pay sellers, freelancers, content creators, and service providers in their local currencies. You can transfer funds to connected accounts in other countries with your existing platform account and charge configuration.\n#Note\nStripe determines whether to enable cross-border payouts based on your platform profile. If they aren’t enabled and you want to use them, contact Stripe Support.\n#Fund flow restrictions\nThe following fund flows are generally supported in countries for cross-border payouts:\n• Separate charges and transfers without the onbehalfof parameter\n• Top-ups and transfers\n• Destination charges\n`onbehalfof`Direct charges and destination charges with the onbehalfof parameter aren’t supported. However, some countries have additional limitations.\n`onbehalfof`For India, only the following fund flows are supported:\n• Separate charges and transfers without the onbehalfof parameter\n• Top-up and transfers\n`onbehalfof`## Supported countries\nCross-border payouts enable US platforms using separate charges and transfers, destination charges, or top-ups to pay out to connected accounts in the following countries:\n• For connected accounts in countries marked with an asterisk (), bank accounts in those countries can only receive payouts in Euros (EUR).\n• For connected accounts in countries labeled Preview, Stripe can pause payouts in order to resolve issues. We don’t provide advance notice of pauses to platforms or to connected accounts.\nEach country has a minimum amount for cross-border payouts, which can differ from the minimum amount for regular payouts. Some countries also have special restrictions or requirements that affect cross-border payouts. For details about minimum amounts and other requirements, see Country-specific considerations for cross-border payouts.\nStripe isn’t responsible for providing direct support for accounts on the recipient service agreement. However, the platform can reach out to Stripe for support for these accounts.\n#Restrictions and requirements\n• The platform must be in the US.\n• Funds must come from separate charges and transfers, destination charges without onbehalfof (OBO), or top-ups.\n• The platform must be the business of record. Consequently, destination charges with onbehalfof (OBO) aren’t supported.\n• Connected accounts must onboard under the recipient service agreement. That means transfers to recipient accounts take an extra 24 hours to become available in the connected account’s balance.\n• US connected accounts don’t support cross-border payouts; onboard US connected accounts using the full terms of service.\n• You can’t make cross-border instant payouts.\n`onbehalfof``onbehalf_of``recipient`In addition to businesses prohibited on Stripe, you can’t use cross-border payouts for:\n• Crowdfunding\n• Donations or fund contributions\n• Non-fungible tokens (NFTs) minting and sales\nThe onboarding specifications for cross-border payouts vary by destination country. To learn more, see:\n• Required verification information\n• Supported settlement currencies\n• Bank account formats\n#Get started\nExisting Connect platforms—Select the recipient service agreement at account creation.\nNew Connect platforms—Follow one of the guides below that best fits your use case, and make sure to specify the recipient service agreement in the account creation step.\n• Collect payments and then pay out\n• Pay out money"}, {"path": "connect\\currencies.md", "url": "https://docs.stripe.com/connect/currencies", "content": "#Work with multiple currencies | Stripe Documentation\nURL: https://docs.stripe.com/connect/currencies\n\n#Work with multiple currencies\n#Determine the presentment currency based on the charge type and the country of the Stripe account.\nStripe supports processing charges in 135+ currencies. This allows you to present prices in a customer’s native   currency and avoid conversion costs for customers. The currencies you can use are determined by the country of the Stripe account where the charge is made.\n Charge type | Currency determined by \n --- | --- \n Direct charges | Country of the connected account \n Destination charges | Country of the platform account \n Destination charges using onbehalfof | Country of the connected account \n Separate charges and transfers | Country of the platform account \n Separate charges and transfers using onbehalfof at charge time | Country of the connected account \n`onbehalfof``onbehalfof`## Currency conversions\nA currency conversion occurs if the presentment currency differs from the settlement currency.\nThe presentment currency is the currency that’s used for charges. The settlement currency is the currency that you can receive payouts in, depending on the charge type and applicable currency conversion. See the supported presentment currencies and the supported settlement currencies.\nDepending on bank account or debit card availability, the following occurs when paying out a balance:\n Bank account or debit card availability | Conversion action \n --- | --- \n Available for the currency | No conversion \n Multiple bank accounts or debit cards available for the currency | No conversion–Stripe uses the bank account or debit card set as defaultforcurrency \n Not available for the currency | Stripe converts the payout balance based on the Stripe account’s default currency \n`defaultforcurrency`If you regularly charge in multiple currencies, you might be able to establish multiple bank accounts to have multiple settlement currencies.\nCurrency conversions use the current exchange rates provided by our service providers, with an additional conversion fee applied by Stripe. There are online resources for conversion calculation that can help you estimate current market rates. However, these numbers can fluctuate and might not reflect Stripe’s rates at the time a payment is processed.\n#Application fees for direct charges\nAlthough direct charges are in the connected account’s default currency, your platform receives the application fees for direct charges in your platform’s default currency.\n Bank account or debit card availability | Conversion action \n --- | --- \n Available for the settlement currency | No conversion \n Not available for the settlement currency | Stripe converts the application fee based on the platform account’s default currency \nIf your platform doesn’t use application fees and retains a portion of the charges instead, those funds are paid out (and converted or not) the same way as other charges on the platform account.\n#Application fees for destination charges and converting balances\nApplication fees collected using the applicationfeeamount parameter aren’t converted again for destination charges; platforms always receive application fees in the connected account’s settlement currency. Use the transferdata[amount] parameter to transfer less of the transaction amount and collect fees in the platform’s default settlement currency.\n`applicationfeeamount``transferdata[amount]`If you create charges on the platform using the destination or onbehalfof parameters, you might accumulate balances in multiple currencies. If you don’t have bank accounts for these other currencies, Stripe provides a way to pay out balances in non-default currencies to your platform’s default bank account.\n`destination``onbehalfof`These currency conversions are created as manual payouts with currency set as the currency of the source balance:\n`currency`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=1000 \\\n  -d currency=xaf\n`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=1000 \\\n  -d currency=xaf`As long as there are sufficient funds in the balance for the specified currency, Stripe automatically converts the funds to the default bank account’s currency.\n#Example scenarios\nThe following examples illustrate how to work with multiple currencies in Connect:\n#Direct charges\nWhen the presentment currency is different from the connected account’s default currency, Stripe converts direct charges to the connected account’s default currency. If the presentment currency is also different from the platform’s default currency, the application fee is converted to the platform’s default currency.\nFor example, you accept a charge for a connected account in USD. Your platform settles in USD and your connected account settles in EUR. The connected account’s funds are converted to EUR and the application fee settles to your platform in USD without conversion.\n#Destination charges without onbehalfof\nWhen processing destination charges without onbehalfof, Stripe first converts them from the presentment currency to the platform’s default currency. The funds sent to the connected account are then converted to the connected account’s default currency.\n`onbehalfof`- If an applicationfeeamount is used, the application fee is collected after the conversion to the connected account’s default currency. The fee remains in that currency when added to the platform.\n• If transferdata[amount] is used, the fee is collected after the first currency conversion and remains in the platform’s default currency.\n`applicationfeeamount``transferdata[amount]`#### Note\nThis charge flow is subject to Stripe’s regional and cross-border policies.\nFor example, you accept a destination charge for a connected account in EUR. The connected account settles in GBP, and your platform settles in USD. The charge is converted from EUR to USD and the funds sent to the connected account are converted to GBP.\n• If applicationfeeamount is used, the application fee amount is converted from EUR to GBP and taken from the amount that settles on the connected account.\n• If transferdata[amount] is used, the fee is retained in USD after converting from the initial presentment currency.\n`applicationfeeamount``transferdata[amount]`### Destination charges with onbehalfof\nWhen processing destination charges with onbehalfof, Stripe first converts them from the presentment currency to the connected account’s default currency. The application fee remains in the connected account’s currency, regardless of whether applicationfeeamount or transferdata[amount] is used.\n`onbehalfof``applicationfeeamount``transferdata[amount]`For example, the connected account accepts a charge in USD but settles in EUR. The charge is converted to EUR and sent to the connected account in EUR. The fee is collected in EUR regardless of whether applicationfeeamount or transferdata[amount] is used.\n`applicationfeeamount``transferdata[amount]`### Separate charges and transfers without onbehalfof\nSeparate charges are converted to the platform’s default currency from the presentment currency and the platform later transfers the funds to the connected account. The applicationfeeamount and transferdata[amount] parameters are not used to collect fees, since the platform can choose the appropriate amount to send at transfer time.\n`applicationfeeamount``transferdata[amount]`#### Note\nThis charge flow is subject to Stripe’s regional and cross-border policies.\n#Separate charges and transfers with onbehalfof\nSeparate charges are converted to the connected account’s default currency from the presentment currency and the platform later transfers the funds to the connected account. The applicationfeeamount and transferdata[amount] parameters are not used to collect fees, since the platform can choose the appropriate amount to send at transfer time.\n`applicationfeeamount``transferdata[amount]`#### Note\nThis charge flow is subject to Stripe’s regional and cross-border policies.\n#See also\n• Creating charges\n• Creating direct charges\n• Using subscriptions"}, {"path": "connect\\custom-accounts.md", "url": "https://docs.stripe.com/connect/custom-accounts", "content": "#Using Connect with Custom connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/custom-accounts\n\n#Using Connect with Custom connected accounts\n#Use Custom connected accounts with Connect to control your connected accounts' entire experience.\n#Note\nIdentity verification requirements are updated as laws and regulations change around the world. If you’re building your own onboarding flow to onboard accounts, you must plan on reviewing and updating onboarding requirements at least every six months. To avoid this maintenance obligation, use Connect Onboarding for Custom Accounts.\nA Custom connected account is almost completely invisible to the account holder. You, the platform, are responsible for all interactions with your connected accounts and for collecting all the information needed to verify each account.\nWith Custom connected accounts, you can modify the connected account’s details and settings through the API, including managing their bank accounts and payout schedule. Since Custom connected account holders can’t log into Stripe, it’s up to you to build the onboarding flow, connected account dashboard, reporting functionality, and communication channels.\nCreating a Custom connected account involves the following steps:\n# Make sure you meet the minimum requirements.\n# Properly identify the country and any related requirements.\n# Create the account.\n# Complete the identity verification process.\n#Note\nTo comply with French PSD2 regulations, platforms in France must use account tokens. An additional benefit of tokens is that the platform doesn’t have to store PII data, which is transferred from the connected account directly to Stripe. For platforms in other countries, we recommend using account tokens, but they aren’t required.\n#Requirements for creating Custom connected accounts\nTo use Custom connected accounts, you must meet all of these requirements:\n• Minimum API version: You must be using an API version at least as recent as 2014-12-17. You can view and upgrade your API version in the Dashboard if needed.\n• Terms of Service update: Creating Custom connected accounts requires an update to your terms of service, as it must include a reference to Stripe’s services agreement. Stripe recommends that you consult with your attorneys on whether you should update your terms acceptance language to include reference to Stripe’s terms.\n• Handling information requests: Instead of requesting information—such as a Social Security Number or passport scan—directly from your connected account user, Stripe requests the information it needs from you. You must collect that information from your connected account and provide it to Stripe. Otherwise, Stripe might disable payouts to the connected account.\n• Platform in a supported country: Platforms in Australia, Austria, Belgium, Brazil, Bulgaria, Canada, Cyprus, the Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hong Kong, Hungary, India, Ireland, Italy, Japan, Latvia, Lithuania, Luxembourg, Malta, Mexico, the Netherlands, New Zealand, Norway, Poland, Portugal, Romania, Singapore, Slovakia, Slovenia, Spain, Sweden, Switzerland, Thailand, the United Kingdom, and the United States can create Custom accounts for any country Stripe supports. Contact us to be notified when platforms in your country can use Custom connected accounts.\n• Countries that don’t support self-serve: Due to restrictions that apply when using Connect in the United Arab Emirates, India, and Thailand, platform users in these countries can’t self-serve Custom connected accounts. To begin onboarding for Custom connected accounts in these countries, contact us.\n• Platforms in the UAE: Platforms in the UAE can only use Custom connected accounts based in the UAE with the following charge types: destinationcharges and separate charges and transfers. Destination charges using the onbehalfof attribute are not yet supported for UAE platforms.\n#Caution\nPlatforms outside of Mexico that want to create Custom connected accounts in Mexico and make them settlement merchants require further review. Contact us to start the process.\n• Vetting for fraud: Because your platform is responsible for losses incurred by Custom connected accounts, you must scrutinize all accounts that sign up via your platform for potential fraud. Refer to our risk management best practices guide for more information.\nNote there’s an additional cost for active Custom connected accounts. A Custom connected account is considered active if it has received at least one successful payout in a given month.\n#Identify the country to use\nThe only piece of information you need to create a Custom connected account is the country where the individual or business primarily operates. You can collect everything else at a later time.\nFor example, if you’re in the United States and the business or individual you’re creating a connected account for is legally represented in Canada, assign CA as the country.\n`CA`The country value also determines the required verification information for the connected account.\n#Create a Custom connected account\nThe basic process to create and connect a Custom connected account is to call the account creation endpoint, setting type to custom and providing a country and the appropriate capabilities.\n`type``custom`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d type=custom \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d type=custom \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true`#### Caution\nUS platforms can create accounts for cross-border transfers by specifying the recipient service agreement.\nThe result of a successful API call is the connected account information:\n{\n  ...\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"type\": \"custom\"\n  ...\n}\n`{\n  ...\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"type\": \"custom\"\n  ...\n}`Store the id in your database—it’s the account ID. You’ll provide this value to authenticate as the connected account by passing it into requests in the Stripe-Account header.\n`id``Stripe-Account`#### Note\nStore the received account ID. You need this information to perform requests on the connected account’s behalf.\n#Start the identity verification process\nAn account created with only a country is fairly limited: it can only receive a small amount of funds. If you wish to enable payouts and keep the account in good standing, you need to provide more information about the account holder. The required verification information page lists the minimum and likely identity verification requirements.\nThe easiest way to collect this information is to integrate Connect Onboarding, which lets Stripe take care of the verification complexity. Otherwise, you must not only write your own API calls for initial integration, but also continue to check for changing onboarding requirements because of changing regulations around the world.\nYou can collect required information when you create the account or by updating the account later. At the very least, we recommend collecting and providing the connected account user’s name and date of birth up front. If you collect address information upfront, make sure to validate the state value for US, CA, and AU connected accounts in your onboarding flow.\n#Note\nFor accounts with businesstype set to individual, provide at least one individual property (for example, individual.firstname) and a Person object is created automatically. If you don’t, or for accounts with the businesstype set to company, you need to create each Person for the account.\n`individual``individual``individual.firstname``businesstype``company`## Webhooks\nAfter an account is created, all notifications about changes to the account are sent to your webhooks as account.updated events. Provide your Connect webhook URL in your account settings and then watch for these events and respond to them as needed.\n`account.updated`## See also\nLearn more about working with Custom connected accounts.\n• Onboarding custom accounts\n• Updating service agreements\n• Identity verification\n• Authentication\n• Creating charges\n• API reference"}, {"path": "connect\\customize-connect-embedded-components.md", "url": "https://docs.stripe.com/connect/customize-connect-embedded-components", "content": "#Customize Connect embedded components | Stripe Documentation\nURL: https://docs.stripe.com/connect/customize-connect-embedded-components"}, {"path": "connect\\customize-express-dashboard.md", "url": "https://docs.stripe.com/connect/customize-express-dashboard", "content": "#Customize the Express Dashboard | Stripe Documentation\nURL: https://docs.stripe.com/connect/customize-express-dashboard\n\n#Customize the Express Dashboard\n#Learn how to customize the Express Dashboard for your users.\nThe Express Dashboard allows a platform’s connected account users to view their available balance, see upcoming payouts, and track their earnings in real time. It displays an Activity feed, an Earnings chart, and your platform’s name and icon. Learn how to customize the Express Dashboard for your users in this guide.\nTo learn more about each feature in the Express Dashboard, see Express Dashboard.\n#Add your platform's brand name and icon\nYou can display your platform’s brand name, icon, and customize theming in the Express Dashboard.\nAccess your Express branding settings, enter your platform’s businessname, upload your platform’s icon, and customize your theming settings. When satisfied with the preview, save your changes. If you already saved your brand information before reading this guide, skip this step.\n`businessname`## Set custom descriptions for charges and transfers\nBy default, the Transactions list on the Express Dashboard displays generic descriptions for charges and transfers (for example: Payment on {YOURPLATFORM}).\n`Payment on {YOURPLATFORM}`First, determine which type of charge your platform uses. The two recommended charge types for Express connected accounts are Destination Charges and Separate Charges and Transfers.\nAfter you determine the charge type, use the following instructions to update your integration.\n#Destination charges\nTo update the description on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to all platforms that use destination charges.\n# Find the existing transfer object you created for an account by finding the latest charge created on the PaymentIntent.\n# Use the charge object to find the transfer object associated with the charge.\n# Use the transfer object to find the destinationpayment ID that exists on the transfer.\n# Call the Update Charge API to update the description on the destination payment using the destinationpayment ID.\n`destinationpayment`#### Note\nThe destinationpayment object belongs to the connected account, so you’ll need to set the Stripe-Account header to the connected account’s ID to make this call.\ncurl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"\n`curl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"`This description becomes visible on the charge after you’ve written this field.\nLearn more about creating destination charges on your platform.\n#Separate charges and transfers\nTo update the description on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to platforms that use separate charges and transfers.\n# Use the transfer object to find the destinationpayment ID that exists on the transfer.\n# Call the Update Charge API to update the description on the destination payment using the destinationpayment ID found in the previous step.\n`destinationpayment`#### Note\nThe destinationpayment object belongs to the connected account, so you’ll need to set the Stripe-Account header to the connected account’s ID to make this call.\ncurl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"\n`curl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"`This description becomes visible on the charge after you’ve written this field.\nLearn more about creating separate charges and transfers.\n#See also\n• Collect payments and then pay out (if you process payments with Stripe)\n• Pay out money (if you add money from a bank account to pay out)"}, {"path": "connect\\dashboard.md", "url": "https://docs.stripe.com/connect/dashboard", "content": "#Manage connected accounts with the Dashboard | Stripe Documentation\nURL: https://docs.stripe.com/connect/dashboard\n\n#Manage connected accounts with the Dashboard\n#Learn about using the Stripe Dashboard to find and manage connected accounts.\nYou can use the Dashboard to inspect, support, and better understand your platform’s connected accounts. Some common tasks supported by the Dashboard include:\n• Understand and manage your Connect payments business\n• View all accounts\n• Review actionable accounts\n• Create accounts\n• Find individual accounts\n• Update account information\n• Send funds to accounts\nViewing all accounts provides a high-level view of your connected accounts. By default, all accounts are displayed on the accounts overview page, but you can filter by account status, balance, and other attributes. Filtering accounts is useful because it allows you to:\n• View accounts that are restricted or have other issues that you can help resolve.\n• View your largest accounts.\n• View accounts based on their status.\nThe other workflows, like inspecting accounts and sending funds, are actions you can take on individual accounts. These actions are generally made after you know which accounts need to be inspected or modified.\nBefore viewing and making changes to accounts, learn more about the status badges displayed in the Dashboard.\n#Status badges\nStatus badges provide a quick way to understand the status of an account. You can hover over the badges to view contextual information, and you can click the status tabs to view accounts grouped by that status. Status badges include:\n Status | Badge \n --- | --- \n Restricted | Restricted \n Restricted soon | Restricted soon \n Pending (enabled or disabled) | Pending or Pending \n Enabled | Enabled \n Complete | Complete \n Rejected | Rejected \n#Restricted\nRestricted means the account has payouts or payments disabled. Additional information usually needs to be collected to enable these accounts. Hovering over the status badge displays:\n• Which capability is disabled (payouts or payments).\nIf information is required to enable the account, it appears in an Actions required list at the top of the connected account details page.\n#Restricted soon\nRestricted soon means the account has a due date for providing additional information.\nIf information is required to enable the account, it appears in an Actions required list at the top of the connected account details page.\n#Pending\nPending means the account is being reviewed or verified by Stripe. This occurs when:\n• Stripe is verifying the information that was provided, such as an ID document upload.\n• Stripe is performing a watchlist check against a list of prohibited individuals and businesses.\n• Stripe is reviewing the account for suspected fraudulent activity.\nPayouts can be enabled or disabled for accounts with a pending status and requires no action on your part. Stripe automatically updates the account’s status when the review finishes.\n#Enabled\nEnabled means the account is in good standing, though additional information might be required if another payment volume threshold is reached. Hovering over the status badge displays:\n• What information Stripe might request in the future.\nIn the account’s requirements hash, the array eventuallydue contains at least one requirement, but payments and payouts are enabled and currentdeadline is empty.\n`eventuallydue``currentdeadline`### Complete\nComplete means the account provided all the required information and is in good standing.\nIn the account’s requirements hash, the array eventuallydue is empty.\n`eventuallydue`### Rejected\nRejected means you (the platform) or Stripe rejected the connected account. Hovering over the status badge displays:\n• Whether the account was rejected by you (the platform), or by Stripe.\nCheck the Actions required list at the top of the connected account details page to see the reason the account was rejected. In general, accounts are rejected by Stripe if they’re suspected of fraudulent activity.\n#Use Platform Branding for Connected Accounts\nAs the platform, you can initialize newly created connected accounts with your platform branding settings. To do so, navigate to Connect Settings > Branding and enable Copy Platform Branding. After you enable it, all new accounts onboarding to your platform receive the same branding settings as your platform.\nUse Account Update to update the account’s branding after creation.\n#See also\n• Viewing all accounts\n• Managing individual accounts"}, {"path": "connect\\deliver-tax-forms.md", "url": "https://docs.stripe.com/connect/deliver-tax-forms", "content": "#Deliver your 1099 tax forms | Stripe Documentation\nURL: https://docs.stripe.com/connect/deliver-tax-forms\n\n#Deliver your 1099 tax forms\n#Learn about 1099 form delivery requirements and how to deliver your tax forms, including e-delivery and postal delivery.\n#Getting your 1099 Forms\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see 1099 tax forms on the Stripe Support site.\nRevenue authorities (such as the IRS) typically require that you deliver a copy of the tax form to the payee, in addition to filing the tax form. Per IRS recommendations, the tax form you deliver is a “Copy B” with the payee taxpayer identification number (TIN) redacted to the last four digits.\nThe IRS requires you to provide tax forms to payees using postal mail unless you’ve obtained consent from the payee to only deliver the forms electronically. If you don’t obtain consent for e-delivery, you can still e-deliver as long as you also mail the copy of the tax form to the payee. For more information, see the IRS Requirements for Furnishing Information Returns Electronically.\nYou must deliver tax forms by the first business day on or after January 31. For postal delivery, tax forms must be postmarked by this date.\nTax forms are always delivered to payees the first time they’re filed with a revenue authority. This includes e-filing with the IRS as well as states. If a tax form is both e-filed with the IRS and to a state, it’s only delivered on the first of these events.\n#Delivery options\nThere are three options for delivering tax forms:\n• E-delivery with a Stripe-built product: Use a Stripe-hosted Dashboard (Stripe Express Dashboard) or Stripe Embedded Components to collect e-delivery consent and deliver tax forms.\n• E-delivery with Tax Forms API Preview: Use the Tax Forms API to directly control and manage the entire e-delivery flow.\n• Postal delivery: Use Stripe to send tax forms using postal delivery.\n#E-delivery with interfaces built by Stripe\nYour connected accounts can access their e-delivered tax forms through an interface built by Stripe. If you implemented Stripe Embedded Components, the link directs your connected account to the Embedded Component. Otherwise, they can access the tax forms through the interface that they typically use for non-tax reporting interactions. For instance:\n• If a connected account views their payments through the Stripe Express Dashboard, their 1099 forms are e-delivered there. If you handle the complete onboarding and management process for your connected accounts and did not configure Embedded Components for tax reporting, the Express Dashboard is accessible.\nDespite your platform’s eligibility, some connected accounts might not qualify for e-delivery through an interface built by Stripe. The following connected accounts aren’t eligible for e-delivery:\n• Multi-user accounts\n• Vendors without a Stripe account\n• Users who have multiple accounts on your platform with the same email address To view a full list of the types of connected accounts that aren’t eligible for e-delivery through an interface built by Stripe, see Which accounts get access to e-delivery.\nConnected account users must provide e-delivery consent to view and download their forms online. The e-delivery consent is applicable to all future electronic deliveries. Enable postal delivery to make sure that eligible accounts receive their tax forms. Consult your tax advisors if you want to completely opt out of paper delivery.\n#Prerequisites for using tax form e-delivery\nMake sure that the email address is available and current for the connected accounts on your platform where you own the user experience. You can confirm that an email address for an account is available. Use the following command to view the email address for a connected account:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode email=\"jennyrosen@gmail.com\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode email=\"jennyrosen@gmail.com\"`### Turn on e-delivery\nTo turn on e-delivery for your account, open the Tax forms settings page in the Dashboard, then choose Optimize for e-delivery in the Delivery settings section.\nAdditionally, you can select the Have Stripe collect tax information automatically option to have Stripe email your connected accounts and ask them to update their tax information and delivery preferences. Learn more about e-delivery for connected accounts.\n#File and deliver 1099 forms with a Stripe-hosted Dashboard\nStripe-hosted Dashboards are surfaces where eligible Connect platforms can deliver 1099s to their users.\n• Express Dashboard: Only connected accounts who have access to the Express Dashboard for non-tax reporting purposes and connected accounts where you own the full onboarding and management process can have their 1099 forms delivered to this Dashboard.\nToward the end of January, when you click File, your finalized tax forms are automatically sent out to your connected accounts. They receive another email notifying them that their tax forms are ready, with a link to download the forms directly from the Tax Forms tab in the Stripe-hosted Dashboard. If a connected account user later consents to e-delivery, it applies only to future years because paper forms were already sent for the current year.\nThe Connect tax forms page in the Express Dashboard\n#File and deliver 1099 forms with Stripe Embedded Components\nIf your connected accounts currently interact with Stripe Embedded Components or you own the full onboarding and management process for your connected accounts, you can deliver 1099 forms with Stripe Embedded Components.\nYou need to implement the Documents component for your Connected Account to access their 1099 Tax Forms. You should also implement the Account management component to collect paperless delivery consent, and allow your connected accounts to make any necessary edits to their account information.\n#Note\nE-delivery consent appears only if the connected account has a populated email address. For connected accounts where you’re responsible for requirement collection, including custom accounts, Stripe doesn’t set the email field. You can update the connected account’s email address in the Dashboard.\n`email`## E-delivery with Tax Forms API\n#Private preview\nThe Tax Forms API is available in limited preview. We are no longer adding users to the preview for the 2024 tax season.\nYou can use the Tax Forms API to deliver forms to your users directly. With the API, you build and brand the e-delivery flow in your platform and Stripe doesn’t interact with your users directly. You also need to manage the collection of e-delivery consent, how your users access the e-delivered forms, and any user identity changes or corrections that go through your platform.\nWe’ll use a fictitious account StripeDelivers, a delivery platform to walk through the API.\n#Getting started\nStripe recommends disabling e-delivery and outreach from Stripe — otherwise your users will also have their e-delivered forms accessible through the Stripe Express Dashboard.\n#Collect paperless delivery consent\nPer IRS requirements, a StripeDelivers account holder who wants to receive tax correspondence electronically instead of by mail must opt out of receiving postal mail. When an account holder provides or revokes consent, the app sends a POST request to update the connected account’s tax form settings. If an account holder provides consent, Stripe doesn’t mail a copy of their 1099-K form unless you require postal mailing for all accounts in your delivery settings.\n`POST`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[taxforms][consentedtopaperlessdelivery]\"=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[taxforms][consentedtopaperlessdelivery]\"=true`### Retrieving tax forms\nStripeDelivers wants to create a view of a connected account’s filed 1099-K tax forms in their platform’s app, to satisfy the platform’s IRS tax reporting requirement and inform the account holder of their taxable income.\nThe developer needs to upload each 1099-K to the platform’s servers to make them available to the view. The app sends a GET request for a list of tax forms from Stripe’s Tax Forms API on each user request.\n`GET`curl -G https://api.stripe.com/v1/tax/forms \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; retrievetaxformsbeta=v1;\" \\\n  -d type=us1099k \\\n  -d \"payee[account]\"={{CONNECTEDACCOUNTID}}\n`curl -G https://api.stripe.com/v1/tax/forms \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; retrievetaxformsbeta=v1;\" \\\n  -d type=us1099k \\\n  -d \"payee[account]\"={{CONNECTEDACCOUNTID}}`When a user requests a PDF version of the form, the app sends a GET request to Stripe’s Files API, caches it, and returns it in the response.\n`GET`curl https://files.stripe.com/v1/tax/forms/taxform123/pdf \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Version: 2022-11-15; retrievetaxformsbeta=v1;\" \\\n  -o \"/tmp/tmp.pdf\"\n`curl https://files.stripe.com/v1/tax/forms/taxform123/pdf \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Version: 2022-11-15; retrievetaxformsbeta=v1;\" \\\n  -o \"/tmp/tmp.pdf\"`### Notifications\n#Note\nTo receive tax.form.updated webhooks, you need to create a webhook endpoint with the Tax Forms API beta Stripe-Version header.\n`tax.form.updated``Stripe-Version`StripeDelivers wants to notify an account by email when a form is accepted by the IRS. When StripeDelivers receives a tax.form.updated webhook and determines that the form has moved to accepted, it sends an email to the user with a download link.\n`tax.form.updated``accepted`## Postal delivery\nIf you want to mail your tax forms, you must file by January 22, 2025 to guarantee the tax forms are postmarked by January 31, 2025. You must also provide a valid US return address to comply with USPS guidelines.\nYou can use postal delivery for any deliverable address, including PO boxes. For compliance reasons, Stripe doesn’t allow you to set a PO box as the address for a connected account; however, you can use Tax form editor or CSV import to modify the address on the tax form.\nYou may have connected accounts that are only eligible for state filing and not with the IRS. When you use Stripe to file your forms with the IRS and states, Forms 1099 for the state are mailed to these connected accounts after you finish filing.\nIf you use CSV import to override the default delivery method, this also affects the state mailing. For example, if you set postal_delivery to false, Stripe doesn’t mail the 1099 form to the connected account for state reporting.\n`false`"}, {"path": "connect\\design-an-integration.md", "url": "https://docs.stripe.com/connect/design-an-integration", "content": "#Connect integration guide | Stripe Documentation\nURL: https://docs.stripe.com/connect/design-an-integration\n\n#Connect integration guide\n#Learn about configuration options for Connect integrations.\nUse this guide to explore different Connect integrations, make choices, and access a personalized integration guide. Before starting your integration in test mode, you must:\n• Create a Stripe Account\n• Begin filling out your platform profile\n#Select properties\n#Create and onboard accounts\nStripe enables you to create accounts on behalf of users, called connected accounts. When using Connect, you create connected accounts for each user that receives money on your platform.\nSend connected accounts to a Stripe-hosted onboarding flow. Stripe-hosted onboarding allows you to redirect your user to Stripe to complete the onboarding process in a co-branded interface.\nBest for when you want to launch quickly with the lowest integration effort:\n• Connected accounts leave your site and are redirected to Stripe to complete the flow.\n• Co-branding with Stripe and limited options to customize.\n• Stripe handles all of the onboarding flow logic.\n• Automatically supports 46+ countries and 14 languages.\n#Set up dashboard flows\nConnected accounts need access to a dashboard to manage their account. Provide connected accounts with access to the Stripe Dashboard, the Express Dashboard, or a dashboard built using the Stripe API and embedded components.\nProvide access to the Stripe Dashboard to connected accounts.\nThe Stripe Dashboard provides connected accounts with a full suite of functionality, including viewing payouts, managing refunds, handling disputes, accessing reporting, and processing charges on their own. Users can sign into their Stripe Dashboard at any time and can access the Dashboard by visiting Stripe directly. Users have access to Stripe support and Stripe can reach out and communicate with users about their account.\nUse the Stripe Dashboard when:\n• Your users need access to powerful payments workflows and advanced user management features.\n• You prefer Stripe to manage risk of loss and take responsibility for negative balance liability on connected accounts.\n• You are comfortable with Stripe branding and limited platform co-branding.\nYou can always add embedded components to your own website in tandem with providing access to the Stripe Dashboard.\n#Accept a payment\nYou create a charge to accept a payment from a customer on behalf of your connected account. The type of charge you create:\n• Determines how payment funds are split among all parties involved\n• Impacts how the charge appears on the customer’s bank or billing statement (with your platform’s information or your user’s)\n• Determines which account Stripe debits for refunds and chargebacks\nA direct charge is a customer payment made directly to a connected account. Customers directly transact with your connected account, often unaware of your platform’s existence.\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n#Stripe fees\nStripe collects Stripe fees directly from your connected accounts. You can collect an optional application fee when you create the direct charge.\n#Pay out users\nWhen the funds from the payment settle and your user’s connected account has a positive Stripe balance, you can pay out those funds to their external account.\nBy default, Stripe pays out funds that have settled in your connected accounts’ balances on a daily rolling basis. If you prefer, you can configure different automatic payout schedules, trigger payouts manually instead of automatically, or pay out instantly.\n#Responsibility for negative balances\nStripe monitors risk signals on connected accounts, implements risk interventions on connected accounts in response to observed signals, and seeks to recover negative balances from your connected accounts.\nFor most software as a service platforms, this is the best default choice, especially for those that are new to embedding payments:\n• Stripe monitors your connected accounts for credit and fraud risk, as well as protection against risk of loss in the event of negative balances attributed to business risk.\n• Stripe handles all the end to end communications and remediations directly with your connected accounts through hosted flows or embedded components.\n#Your personalized guide\nThis list of steps is customized based on your choices above. Use it to get started building your integration.\n• Use the onboarding quickstartCreate connected accounts and collect requirements using Stripe-hosted onboarding. Learn more\nCreate connected accounts and collect requirements using Stripe-hosted onboarding. Learn more\n• Accept a paymentCreate direct charges. Your connected accounts will pay Stripe fees. Learn more\nCreate direct charges. Your connected accounts will pay Stripe fees. Learn more\n• Set up the Stripe DashboardUnderstand the Stripe Dashboard and control what your connected accounts can do with it.\nUnderstand the Stripe Dashboard and control what your connected accounts can do with it.\n• Understand Stripe’s merchant risk responsibilitiesUnderstand how Stripe handles negative balance liabilities on your connected accounts. Learn more\nUnderstand how Stripe handles negative balance liabilities on your connected accounts. Learn more\n• Pay out usersUnderstand how to control bank account and debit card payouts.\nUnderstand how to control bank account and debit card payouts."}, {"path": "connect\\destination-charges.md", "url": "https://docs.stripe.com/connect/destination-charges", "content": "#Create destination charges | Stripe Documentation\nURL: https://docs.stripe.com/connect/destination-charges\n\n#Create destination charges\n#Create charges on your platform account, collect fees, and immediately transfer the remaining funds to your connected accounts.\nCreate destination charges when customers transact with your platform for products or services provided by your connected accounts and you immediately transfer funds to your connected accounts. With this charge type:\n• You create a charge on your platform’s account.\n• You determine whether some or all of those funds are transferred to the connected account.\n• Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\nThis charge type is most optimal for marketplaces such as Airbnb, a home rental marketplace or Lyft, a ridesharing app.\nDestination charges are only supported if both your platform and the connected account are in the same country. For cross-border support, you must specify the settlement merchant to the connected account using the onbehalfof parameter on the Payment Intent or other valid cross-border transfers scenarios.\n#Note\nWe recommend using destination charges for connected accounts that have access to the Express Dashboard or no dashboard access.\nRedirect to a Stripe-hosted payment page using Stripe Checkout. See how this integration compares to Stripe’s other integration types.\n#Integration effort\n#Integration type\nRedirect to Stripe-hosted payment page\n#UI customization\nTry it out\nFirst, register for a Stripe account.\nUse our official libraries to access the Stripe API from your application:\n#Available as a gem\nsudo gem install stripe\n`# Available as a gem\nsudo gem install stripe`#If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n`# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'`## Create a Checkout SessionClient-sideServer-side\nA Checkout Session controls what your customer sees in the payment form such as line items, the order amount and currency, and acceptable payment methods. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`On your server, create a Checkout Session and redirect your customer to the URL returned in the response.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=T-shirt \\\n  -d \"lineitems[0][pricedata][unitamount]\"=1000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d \"paymentintentdata[transferdata][destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success?sessionid={CHECKOUTSESSIONID}\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=T-shirt \\\n  -d \"lineitems[0][pricedata][unitamount]\"=1000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d \"paymentintentdata[transferdata][destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success?sessionid={CHECKOUTSESSIONID}\"`- paymentintentdata[transferdata][destination] - This parameter indicates that this is a destination charge. A destination charge means the charge is processed on the platform and then the funds are immediately and automatically transferred to the connected account’s pending balance.\n• lineitems - This parameter represents the items the customer is purchasing. The items are displayed in the embedded payment form.\n• successurl - Stripe redirects the customer to the success URL after they complete a payment and replaces the {CHECKOUTSESSIONID} string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See customize redirect behavior with a Stripe-hosted page for more information.\n• paymentintentdata[applicationfeeamount] - This parameter specifies the amount your platform plans to take from the transaction. The full charge amount is immediately transferred from the platform to the connected account that’s specified by transferdata[destination] after the charge is captured. The applicationfeeamount is then transferred back to the platform, and the Stripe fee is deducted from the platform’s amount.\n`paymentintentdata[transferdata][destination]``lineitems``successurl``{CHECKOUTSESSIONID}``paymentintentdata[applicationfeeamount]``transferdata[destination]``applicationfeeamount`When processing destination charges, Checkout uses the brand settings of your platform account. See customize branding for more information.\n#Handle post-payment eventsServer-side\nStripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.\nStripe recommends handling all of the following events when collecting payments with Checkout:\n Event | Description | Next steps \n --- | --- | --- \n checkout.session.completed | The customer has successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. \n checkout.session.asyncpaymentsucceeded | The customer’s payment succeeded. | Fulfill the purchased goods or services. \n checkout.session.asyncpaymentfailed | The payment was declined, or failed for some other reason. | Contact the customer through email and request that they place a new order. \nThese events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded or a failure status.\n`processing``succeeded`## Test the integration\n Card number | Scenario | How to test \n --- | --- | --- \n 4242424242424242 | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000002500003155 | The card payment requires authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000000000009995 | The card is declined with a decline code like insufficientfunds. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 6205500000000000004 | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n`insufficientfunds`See Testing for additional information to test your integration.\n#OptionalEnable additional payment methods\n#Collect fees\nYou can collect fees with either an applicationfeeamount or transferdata[amount].\nWhen creating charges with an applicationfeeamount, the full charge amount is immediately transferred from the platform to the transferdata[destination] account after the charge is captured. The applicationfeeamount (capped at the full amount of the charge) is then transferred back to the platform.\n`applicationfeeamount``transferdata[destination]``applicationfeeamount`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=T-shirt \\\n  -d \"lineitems[0][pricedata][unitamount]\"=1000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d \"paymentintentdata[transferdata][destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=T-shirt \\\n  -d \"lineitems[0][pricedata][unitamount]\"=1000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d \"paymentintentdata[transferdata][destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success\"`After the application fee is collected, an Application Fee object is created. You can view a list of application fees in the Dashboard, with the application fees, or in Sigma. You can also use the amount property on the application fee object for itemized fee reporting.\n`amount`When using an applicationfeeamount, know that:\n`applicationfeeamount`- The applicationfeeamount is capped at the total transaction amount.\n• The applicationfeeamount is always computed in the same currency as the transaction.\n• The application fee settles in the same currency as the connected account’s settlement currency. For cross-border destination charges, this might differ from your platform’s settlement currency.\n• Your platform pays the Stripe fee after the applicationfeeamount is transferred to your account.\n• No additional Stripe fees are applied to the amount.\n• Your platform can use built-in application fee reporting to reconcile fees collected.\n• In Stripe-hosted dashboards or components such as the Payment details component, your connected account can view both the total amount and the application fee amount.\n`applicationfeeamount``applicationfeeamount``applicationfeeamount`### Flow of funds\nWith the above code, the full charge amount (10.00 USD) is added to the connected account’s pending balance. The applicationfeeamount (1.23 USD) is subtracted from the charge amount and is transferred to your platform. Stripe fees (0.59 USD) are subtracted from your platform account’s balance. The application fee amount minus the Stripe fees (1.23 USD - 0.59 USD = 0.64 USD) remains in your platform account’s balance.\n`applicationfeeamount`The applicationfeeamount becomes available on the platform account’s normal transfer schedule, just like funds from regular Stripe charges.\n`applicationfeeamount`## Customize branding\nYour platform uses the branding settings in the Dashboard to customize branding on the payments page. For destination charges, Checkout uses the branding settings of the platform account. For destination charges with onbehalfof, Checkout uses the branding settings of the connected account.\n`onbehalfof`Platforms can configure the branding settings of connected accounts using the Update Account API:\n• icon - Displayed next to the business name in the header of the Checkout page.\n• logo-  Used in place of the icon and business name in the header of the Checkout page.\n• primarycolor - Used as the background color on the Checkout page.\n• secondarycolor - Used as the button color on the Checkout page.\n`icon``logo``primarycolor``secondarycolor`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[branding][icon]\"={{FILEID}} \\\n  -d \"settings[branding][logo]\"={{FILEID}} \\\n  --data-urlencode \"settings[branding][primarycolor]\"=\"#663399\" \\\n  --data-urlencode \"settings[branding][secondarycolor]\"=\"#4BB543\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[branding][icon]\"={{FILEID}} \\\n  -d \"settings[branding][logo]\"={{FILEID}} \\\n  --data-urlencode \"settings[branding][primarycolor]\"=\"#663399\" \\\n  --data-urlencode \"settings[branding][secondarycolor]\"=\"#4BB543\"`## Specify the settlement merchant\nThe settlement merchant is dependent on the capabilities set on an account and how a charge is created. The settlement merchant determines whose information is used to make the charge. This includes the statement descriptor (either the platform’s or the connected account’s) that’s displayed on the customer’s credit card or bank statement for that charge.\nSpecifying the settlement merchant allows you to be more explicit about who to create charges for. For example, some platforms prefer to be the settlement merchant because the end customer interacts directly with their platform (such as on-demand platforms). However, some platforms have connected accounts that interact directly with end customers instead (such as a storefront on an e-commerce platform). In these scenarios, it might make more sense for the connected account to be the settlement merchant.\nYou can set the onbehalfof parameter to the ID of a connected account to make that account the settlement merchant for the payment. When using onbehalfof:\n`onbehalfof``onbehalfof`- Charges settle in the connected account’s country and settlement currency.\n• The fee structure for the connected account’s country is used.\n• The connected account’s statement descriptor is displayed on the customer’s credit card statement.\n• If the connected account is in a different country than the platform, the connected account’s address and phone number are displayed on the customer’s credit card statement.\n• The number of days that a pending balance is held before being paid out depends on the delaydays setting on the connected account.\nIf onbehalfof is omitted, the platform is the business of record for the payment.\n`onbehalfof`#### Caution\nThe onbehalfof parameter is supported only for connected accounts with a payments capability such as cardpayments. Accounts under the recipient service agreement can’t request cardpayments or other payments capabilities.\n`onbehalfof``cardpayments`## Issue refunds\nIf you are using the Payment Intents API, refunds should be issued against the most recent charge that is created.\nCharges created on the platform account can be refunded using the platform account’s secret key. When refunding a charge that has a transferdata[destination], by default the destination account keeps the funds that were transferred to it, leaving the platform account to cover the negative balance from the refund. To pull back the funds from the connected account to cover the refund, set the reversetransfer parameter to true when creating the refund:\n`transferdata[destination]``reversetransfer``true`curl https://api.stripe.com/v1/refunds \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d charge=\"{CHARGEID}\" \\\n  -d reversetransfer=true \\\n`curl https://api.stripe.com/v1/refunds \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d charge=\"{CHARGEID}\" \\\n  -d reversetransfer=true \\`By default, the entire charge is refunded, but you can create a partial refund by setting an amount value as a positive integer.\n`amount`If the refund results in the entire charge being refunded, the entire transfer is reversed. Otherwise, a proportional amount of the transfer is reversed.\n#Refund application fees\nWhen refunding a charge with an application fee, by default the platform account keeps the funds from the application fee. To push the application fee funds back to the connected account, set the refundapplicationfee parameter to true when creating the refund:\n`true`curl https://api.stripe.com/v1/refunds \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d charge=\"{CHARGEID}\" \\\n  -d reversetransfer=true \\\n  -d refundapplicationfee=true \\\n`curl https://api.stripe.com/v1/refunds \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d charge=\"{CHARGEID}\" \\\n  -d reversetransfer=true \\\n  -d refundapplicationfee=true \\`Note that if you refund the application fee for a destination charge, you must also reverse the transfer. If the refund results in the entire charge being refunded, the entire application fee is refunded as well. Otherwise, a proportional amount of the application fee is refunded.\nAlternatively, you can provide a refundapplicationfee value of false and refund the application fee separately through the API.\n`refundapplicationfee`### Failed refunds\nIf a refund fails, or you cancel it, the amount of the failed refund returns to your platform account’s Stripe balance. Create a Transfer to move the funds to the connected account, as needed.\n#Handle disputes\nFor destination charges, with or without onbehalfof, Stripe debits dispute amounts and fees from your platform account.\n`onbehalfof`We recommend setting up a webhook to listen to dispute created events. When that happens, you can attempt to recover funds from the connected account by reversing the transfer through the Dashboard or by creating a transfer reversal.\nIf the connected account has a negative balance, Stripe attempts to debit its external account if debitnegativebalances is set to true.\n`debitnegativebalances``true`If you challenge the dispute and win, you can transfer the funds that you previously reversed back to the connected account. If your platform has an insufficient balance, the transfer fails. Prevent insufficient balance errors by adding funds to your Stripe balance.\n#Common mistake\nRetransferring a previous reversal is subject to cross-border transfer restrictions, meaning you might have no means to repay your connected account. Instead, wait to recover disputed cross-border payment transfers for destination charges with onbehalfof until after a dispute is lost.\n`onbehalf_of`## See also\n• Working with multiple currencies\n• Statement descriptors with Connect"}, {"path": "connect\\direct-charge-buy-rate-reporting-overview.md", "url": "https://docs.stripe.com/connect/direct-charge-buy-rate-reporting-overview", "content": "#Platform Reporting for direct charge payment fees paid by connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/direct-charge-buy-rate-reporting-overview\n\n#Platform Reporting for direct charge payment fees paid by connected accounts\nPlatforms that pay payments fees for direct charges they facilitate on their connected accounts can use the reports outlined here to understand those fees.\n#Financial reports\nStripe’s financial reports help you understand and reconcile the activity in your account, in particular the total costs and earnings of your platform. These reports are available for download in the Dashboard or through the API.\n#Connect margin reports\nThe Connect margin reports show platforms their aggregated and transaction-level payment volumes, fees, and revenue associated with activity where the platform is responsible for pricing and fees. Use them to calculate your margins and set your fees appropriately given your underlying Stripe fees and network costs. These reports are available for download in the Dashboard.\n#Sigma and Data Pipeline\nAll Sigma and Data Pipeline users have access to the itemized_fees table. It offers a comprehensive, granular breakdown of every fee charged to or deducted from your Stripe balance. You can use it to review itemized details of card, LPM, and product fees that your platform has paid."}, {"path": "connect\\direct-charges-fee-payer-behavior.md", "url": "https://docs.stripe.com/connect/direct-charges-fee-payer-behavior", "content": "#Fee behavior on connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/direct-charges-fee-payer-behavior\n\n#Fee behavior on connected accounts\n#Understand how to configure the billing behavior for new connected accounts.\nThe controller.fees.payer property on v1/accounts determines the set of billing behaviors you can expect for direct charges and product usages that occur on this connected account. This doc details the behavior of the different values it can have.\n`controller.fees.payer``v1/accounts`#### Note\nAny activity occurring at the platform account level is billed to your platform regardless of the controller.fees.payer value on your connected accounts. For example, Stripe charges the platform directly for destination charges (with or without onbehalfof) and card account updates for cards stored on your platform account.\n`controller.fees.payer``onbehalfof`## Selecting billing behavior\nYou can only set the controller.fees.payer property when you create an account.\nThe following sections describe the behavior of each value.\n#account\nStripe collects fees directly from your connected account. We don’t charge any Connect fees to it or to your platform.\nAny application fees that your platform bills to the connected account are in addition to Stripe fees.\nYou can set the payer type to account when you create connected accounts. Accounts created with type=standard also have this value.\n`account``type=standard`### application\nThe platform pays payment fees for direct charges and fees for Stripe products like Radar, Card Account Updater, and Instant Payouts. For complete details, see the table below.\nThe platform also pays Connect fees for these accounts .\nWe recommend that you monetize payments and Stripe products where the platform is billed by collecting fees from your connected accounts.\nYou can set the payer type to application when you create connected accounts.\n`application`Platforms that pay Stripe payment fees for direct charges can access dedicated reports.\nSee Platform Reporting for direct charge payment fees paid by platform.\n#applicationcustom or applicationexpress\napplicationcustom and applicationexpress are assigned to accounts created with type=custom and type=express, respectively. Their billing behaviors for direct charges and connected account usage of Stripe products matches the historical behavior of Custom and Express accounts. For complete details, see the table below.\n`applicationcustom``applicationexpress``type=custom``type=express`We recommend that you monetize payments and Stripe products where the platform is billed by collecting fees from your connected accounts.\nYou can’t set the payer type to applicationcustom or applicationexpress when you create connected accounts. They only apply to accounts created with type=custom or type=express.\n`applicationcustom``applicationexpress``type=custom``type=express`## List of fee behaviors for payer values\n Product Category | account | application | applicationcustom | applicationexpress \n --- | --- | --- | --- | --- \n Stripe payment processing fees | Connected Account | Platform | Connected Account | Connected Account \n Interchange Plus Payment Fees | Connected Account | Platform | Platform | Platform \n Dispute fees | Connected Account | Platform | Connected Account | Connected Account \n Instant Payouts | Connected Account | Platform | Platform | Platform \n LPM Payment Failure Fees | Connected Account | Platform | Connected Account | Connected Account \n Premium Payouts | Connected Account | Platform | Platform | Platform \n Invoicing and Subscriptions | Connected Account | Platform | Platform | Platform \n Radar | Connected Account | Platform | Varies | Varies \n Terminal Add-ons | Connected Account | Platform | Connected Account | Connected Account \n Stripe Tax | Connected Account | Platform | Platform | Platform \n 3D Secure | Connected Account | Platform | Varies | Varies \n Adaptive Acceptance | Connected Account | Platform | Platform | Platform \n Card Account Updater | Connected Account | Platform | Platform | Platform \n Checkout Add-ons | Connected Account | Platform | Platform | Platform \n Instant bank account verifications | Connected Account | Platform | Platform | Platform"}, {"path": "connect\\direct-charges-multiple-accounts.md", "url": "https://docs.stripe.com/connect/direct-charges-multiple-accounts", "content": "#Share payment methods across multiple accounts for direct charges | Stripe Documentation\nURL: https://docs.stripe.com/connect/direct-charges-multiple-accounts\n\n#Share payment methods across multiple accounts for direct charges\n#Save payment details on your platform and clone them to connected accounts for making direct charges.\nTo create direct charges on multiple connected accounts using the same saved payment information, use this approach. Otherwise, use our guide for creating direct charges.\n#Save payment details on your platform\nWhen collecting payment details from your customer, set them up for future use and save them on your platform account. You only need to set up each payment method once.\n#Create a customer on your platform\nOn your platform account, use the Customers API to create a Customer object representing your customer.\ncurl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d name=\"Jenny Rosen\"\n`curl https://api.stripe.com/v1/customers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d name=\"Jenny Rosen\"`### Create a SetupIntent on your platform\nWhen you collect the customer’s payment method details, use the Setup Intents API to create a SetupIntent on your platform and associate it with the customer.\ncurl https://api.stripe.com/v1/setupintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}}\n`curl https://api.stripe.com/v1/setupintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}}`If your platform is in a different country than your connected accounts, the setup performed on your platform might not be sufficient. For example, if your platform is in the US, the setup process might not trigger the authentication required for direct charges in countries subject to SCA enforcement. To make sure that your setup meets the requirements of the connected account’s country, you might need to use onbehalfof to specify a connected account in that country.\n#Note\nYou can accept a payment on your platform (not a direct charge on the connected account) when collecting payment details to save and clone to connected accounts. To do so, instead of creating a SetupIntent, create a PaymentIntent with setupfutureusage. The funds from the PaymentIntent on your platform account go directly to your platform’s balance.\n#Confirm the SetupIntent\nSend the SetupIntent’s clientsecret to your front end and use our client-side SDKs or UI components to collect payment details and confirm the SetupIntent. For example, you can use the Payment Element to collect payment information and confirm the SetupIntent.\nConfirming on the client allows the customer to go through any flows required to set up their payment details for future use, such as authentication with 3D Secure.\nA successful confirmation creates a PaymentMethod and attaches it to the customer for future use.\n#Clone the PaymentMethod and create direct charges on connected accounts\nAfter you have a PaymentMethod set up for future use on your platform, clone it to a connected account and create a direct charge.\n#Clone the PaymentMethod to the connected accounts\nUse the Payment Methods API to clone the PaymentMethod saved on your platform account to each desired connected account, as shown in the following example. Specify the connected account ID as the Stripe account, and pass the IDs of the Customer and PaymentMethod saved on your platform.\n#Note\nYou can clone only certain types of PaymentMethods. Cloning supports PaymentMethods that have type set to either card or usbankaccount.\n`type``card``usbankaccount`curl https://api.stripe.com/v1/paymentmethods \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d customer={{PLATFORMCUSTOMERID}} \\\n  -d paymentmethod={{PAYMENTMETHODID}}\n`curl https://api.stripe.com/v1/paymentmethods \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d customer={{PLATFORMCUSTOMERID}} \\\n  -d paymentmethod={{PAYMENTMETHODID}}`The cloned PaymentMethod is an independent object with a unique ID.  It isn’t linked to, or kept in sync with, the PaymentMethod on your platform. However, the cloned PaymentMethod inherits the setup performed on your platform account, so you don’t need to set it up again on the connected account.\n#Create and confirm a PaymentIntent on a connected account\nUse the Payment Intents API to create and confirm a PaymentIntent on a connected account using the cloned PaymentMethod:\ncurl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d paymentmethod={{PAYMENTMETHODID}} \\\n  -d currency=USD \\\n  -d amount=1099 \\\n  -d offsession=true \\\n  -d confirm=true\n`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d paymentmethod={{PAYMENTMETHODID}} \\\n  -d currency=USD \\\n  -d amount=1099 \\\n  -d off_session=true \\\n  -d confirm=true`Creating a charge with the cloned PaymentMethod consumes it, because it’s not attached to a customer. However, consuming the clone doesn’t affect the original PaymentMethod saved on your platform. You can’t reuse the consumed clone, but you can clone the platform PaymentMethod again and use the new clone for another charge.\n#Set up recurring payments on a connected account\nTo use a cloned PaymentMethod for recurring direct charges on a connected account, you must create a Customer object on the connected account and attach the cloned PaymentMethod to it. Then, instead of creating PaymentIntents, create a Subscription using the cloned PaymentMethod and attached Customer.\n#Note\nThe Customer object you create on the connected account has no association with the original Customer object stored on your platform account. If you update the original customer information and want to keep them synchronized, you must also update any corresponding customers saved on connected accounts.\n#Handle customer and payment updates\nIf you don’t collect recurring payments, you only need to update the customer and PaymentMethod on your platform account. You clone the PaymentMethod for each direct charge, which ensures that you’re always using the newest version. The customer only exists on your platform account, so you don’t need to synchronize customer details across multiple accounts.\nIf you collect recurring payments, and you update the customer or PaymentMethod on your platform account, you’re responsible for updating the corresponding objects saved on any connected accounts. If you update the original PaymentMethod on your platform, clone it again and attach the new clone to the customer and subscription on the connected account. Repeat the process for each connected account that stores a clone for recurring payments."}, {"path": "connect\\direct-charges.md", "url": "https://docs.stripe.com/connect/direct-charges", "content": "#Create direct charges | Stripe Documentation\nURL: https://docs.stripe.com/connect/direct-charges\n\n#Create direct charges\n#Create charges directly on the connected account and collect fees.\nCreate direct charges when customers transact directly with a connected account, often unaware of your platform’s existence. With direct charges:\n• The payment appears as a charge on the connected account, not your platform’s account.\n• The connected account’s balance increases with every charge.\n• Your account balance increases with application fees from every charge.\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n#Note\nWe recommend using direct charges for connected accounts that have access to the full Stripe Dashboard.\nRedirect to a Stripe-hosted payment page using Stripe Checkout. See how this integration compares to Stripe’s other integration types.\n#Integration effort\n#Integration type\nRedirect to Stripe-hosted payment page\n#UI customization\nTry it out\nFirst, register for a Stripe account.\nUse our official libraries to access the Stripe API from your application:\n#Available as a gem\nsudo gem install stripe\n`# Available as a gem\nsudo gem install stripe`#If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n`# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'`## Create a Checkout SessionClient-sideServer-side\nA Checkout Session controls what your customer sees in the payment form such as line items, the order amount, and currency. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`On your server, create a Checkout Session and redirect your customer to the URL returned in the response.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=T-shirt \\\n  -d \"lineitems[0][pricedata][unitamount]\"=1000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success?sessionid={CHECKOUTSESSIONID}\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=T-shirt \\\n  -d \"lineitems[0][pricedata][unitamount]\"=1000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success?sessionid={CHECKOUTSESSIONID}\"`- lineitems - This attribute represents items that your customer is purchasing and shows up in the Stripe-hosted checkout page.\n• paymentintentdata[applicationfeeamount] - This attribute specifies the amount your platform deducts from the transaction as an application fee. After the payment is processed on the connected account, the applicationfeeamount is transferred to the platform. See collect fees for more information.\n• successurl - Stripe redirects the customer to the success URL after they complete a payment and replaces the {CHECKOUTSESSIONID} string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See customize redirect behavior with a Stripe-hosted page for more information.\n• Stripe-Account - This header indicates a direct charge for your connected account. The connected account’s branding is used in Checkout, which allows their customers to feel like they’re interacting directly with the connected account instead of your platform.\n`lineitems``paymentintentdata[applicationfeeamount]``applicationfeeamount``successurl``{CHECKOUTSESSIONID}``Stripe-Account`Charges that you create directly on the connected account are reported only on that account. These charges aren’t shown in your platform’s Dashboard or exports. Direct charges are included in reports and Sigma for connected accounts that your platform controls. You can always retrieve this information using the Stripe API.\n#Handle post-payment eventsServer-side\nStripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.\nStripe recommends handling all of the following events when collecting payments with Checkout:\n Event | Description | Next steps \n --- | --- | --- \n checkout.session.completed | The customer has successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. \n checkout.session.asyncpaymentsucceeded | The customer’s payment succeeded. | Fulfill the purchased goods or services. \n checkout.session.asyncpaymentfailed | The payment was declined, or failed for some other reason. | Contact the customer through email and request that they place a new order. \nThese events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded or a failure status.\n`processing``succeeded`## Test the integration\n Card number | Scenario | How to test \n --- | --- | --- \n 4242424242424242 | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000002500003155 | The card payment requires authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000000000009995 | The card is declined with a decline code like insufficientfunds. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 6205500000000000004 | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n`insufficientfunds`See Testing for additional information to test your integration.\n#OptionalEnable additional payment methods\n#Collect fees\nYour platform can take an application fee with the following limitations:\n• The value of applicationfeeamount must be positive and less than the amount of the charge. The application fee collected is capped at the amount of the charge.\n• There are no additional Stripe fees on the application fee itself.\n• In line with Brazilian regulatory and compliance requirements, platforms based outside of Brazil, with Brazilian connected accounts cannot collect application fees through Stripe.\n• The currency of applicationfeeamount depends upon a few multiple currency factors.\n`applicationfeeamount``applicationfeeamount`The resulting charge’s balance transaction includes a detailed fee breakdown of both the Stripe and application fees. To provide a better reporting experience, an Application Fee is created after the fee is collected. Use the amount property on the application fee object for reporting. You can then access these objects with the Application Fees endpoint.\n`amount`Earned application fees are added to your available account balance on the same schedule as funds from regular Stripe charges. Application fees are viewable in the Collected fees section of the Dashboard.\n#Caution\nApplication fees for direct charges are created asynchronously by default. If you expand the applicationfee object in a charge creation request, the application fee is created synchronously as part of that request. Only expand the applicationfee object if you absolutely have to, because it increases the latency of the request.\n`applicationfee``applicationfee`To access the application fee objects for application fees that are created asynchronously, listen for the applicationfee.created webhook event.\n#Flow of funds with fees\nWhen you specify an application fee on a charge, the fee amount is transferred to your platform’s Stripe account. When processing a charge directly on the connected account, the charge amount—less the Stripe fees and application fee—is deposited into the connected account.\nFor example, if you make a charge of 10 USD with a 1.23 USD application fee (like in the previous example), 1.23 USD is transferred to your platform account. 8.18 USD (10 USD - 0.59 USD - 1.23 USD) is netted in the connected account (assuming standard US Stripe fees).\nIf you process payments in multiple currencies, read how currencies are handled in Connect.\n#Customize branding\nYour platform and connected accounts can use the Branding settings in the Dashboard to customize branding on the payments page. For direct charges, Checkout uses the brand settings of the connected account.\nYou can also use the API to update branding settings:\n• icon - Displayed next to the business name in the header of the Checkout page.\n• logo - Used in place of the icon and business name in the header of the Checkout page.\n• primarycolor - Used as the background color on the Checkout page.\n• secondarycolor - Used as the button color on the Checkout page.\n`icon``logo``primarycolor``secondarycolor`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[branding][icon]\"={{FILEID}} \\\n  -d \"settings[branding][logo]\"={{FILEID}} \\\n  --data-urlencode \"settings[branding][primarycolor]\"=\"#663399\" \\\n  --data-urlencode \"settings[branding][secondarycolor]\"=\"#4BB543\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[branding][icon]\"={{FILEID}} \\\n  -d \"settings[branding][logo]\"={{FILEID}} \\\n  --data-urlencode \"settings[branding][primarycolor]\"=\"#663399\" \\\n  --data-urlencode \"settings[branding][secondarycolor]\"=\"#4BB543\"`## Issue refunds\nJust as platforms can create charges on connected accounts, they can also create refunds of charges on connected accounts. Create a refund using your platform’s secret key while authenticated as the connected account.\nApplication fees are not automatically refunded when issuing a refund. Your platform must explicitly refund the application fee or the connected account—the account on which the charge was created—loses that amount. You can refund an application fee by passing a refundapplicationfee value of true in the refund request:\n`refundapplicationfee`curl https://api.stripe.com/v1/refunds \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d charge={{CHARGEID}} \\\n  -d refundapplicationfee=true\n`curl https://api.stripe.com/v1/refunds \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d charge={{CHARGEID}} \\\n  -d refundapplicationfee=true`By default, the entire charge is refunded, but you can create a partial refund by setting an amount value as a positive integer. If the refund results in the entire charge being refunded, the entire application fee is refunded. Otherwise, a proportional amount of the application fee is refunded. Alternatively, you can provide a refundapplicationfee value of false and refund the application fee separately.\n`amount``refundapplication_fee`## See also\n• Working with multiple currencies\n• Statement descriptors with Connect"}, {"path": "connect\\disputes.md", "url": "https://docs.stripe.com/connect/disputes", "content": "#Disputes on Connect platforms | Stripe Documentation\nURL: https://docs.stripe.com/connect/disputes\n\n#Disputes on Connect platforms\n#Learn about the dispute responsibilities on Connect platforms.\n#Direct charges\nFor connected accounts that use direct charges and where your platform isn’t liable for negative balances (including Standard accounts), those accounts handle their own disputes. The disputed funds are taken from their balance, not the platform’s.\nFor connected accounts where your platform is liable for negative balances (including Custom and Express accounts), you’re ultimately responsible for any disputes involving those accounts.\nFor direct payments on connected accounts where your platform is liable for negative balances, Stripe debits disputed amounts and fees from the connected account’s balance. However, your platform is ultimately liable. If Stripe can’t debit the disputed amount and fee from the connected account, Stripe debits it from your platform account.\n#Destination and separate charges and transfers\nFor destination charges and separate charges and transfers, with or without onbehalfof, Stripe debits dispute amounts and fees from your platform account.\n`onbehalfof`We recommend setting up a webhook to listen to dispute created events. When that happens, you can attempt to recover funds from the connected account by reversing the transfer through the Dashboard or by creating a transfer reversal.\nIf the connected account has a negative balance, Stripe attempts to debit its external account if debitnegativebalances is set to true.\n`debitnegativebalances``true`If you challenge the dispute and win, you can transfer the funds that you previously reversed back to the connected account. If your platform has an insufficient balance, the transfer fails. Prevent insufficient balance errors by adding funds to your Stripe balance.\n#Common mistake\nRetransferring a previous reversal is subject to cross-border transfer restrictions, meaning you might have no means to repay your connected account. Instead, wait to recover disputed cross-border payment transfers for destination charges with onbehalfof until after a dispute is lost.\n`onbehalfof`To automate dispute management and handle chargebacks, browse Fraud Stripe Apps on the App Marketplace.\n#See also\n• Respond to disputes\n• Dispute categories\n• Prevent disputes and fraud\n• Use Radar with Connect"}, {"path": "connect\\dynamic-payment-methods.md", "url": "https://docs.stripe.com/connect/dynamic-payment-methods", "content": "#Update to use dynamic payment methods | Stripe Documentation\nURL: https://docs.stripe.com/connect/dynamic-payment-methods\n\n#Update to use dynamic payment methods\n#Add dynamic payment methods to your existing platform.\nThis guide provides instructions for existing platforms to integrate dynamic payment methods. If you’re setting up a new platform, start with the Connect integration guide.\n#Integration instructions for dynamic payment methods\nUse the following form to select your integration. If you need help determining your platform setup, including checkout solution, connected account types, and charge types, refer to Create a charge.\n#Enable payment methods for connected accountsRecommended\nIf necessary, consult the following resources for payment method information:\n• A guide to payment methods for help in choosing the right payment methods for your platform.\n• Account capabilities to make sure your chosen payment methods work for your connected accounts.\n• Payment method and product support table to make sure your chosen payment methods work for your Stripe products and payments flows.\nStripe enables certain payment methods for your connected accounts by default. Visit the Manage payment methods for your connected accounts page in your Dashboard to configure which payment methods your connected accounts accept. Changes to default settings apply to all new and existing connected accounts.\nFor each payment method, you can select one of the following dropdown options:\n On by default | Your connected accounts accept this payment method during checkout. Some payment methods can only be off or blocked, this is because the owners of your platform’s connected accounts must activate them in their Dashboard settings page. \n Off by default | Your connected accounts don’t accept this payment method during checkout. If you allow the owners of your platform’s connected accounts to manage their own payment methods in their Dashboard, however, they have the ability to turn it on. \n Blocked | Your connected accounts don’t accept this payment method during checkout. If you allow the owners of your platform’s connected accounts to manage their own payment methods in their Dashboard, they don’t have the option to turn it on. \nPayment method options\nIf you make a change to a payment method, you must click Review changes in the bottom bar of your screen and Save and apply to update your connected accounts.\nSave dialog\n#Allow your connected accounts to manage their payment methodsRecommended\nStripe recommends that you allow the owners of your platform’s connected accounts to customize their own payment methods from the Dashboard. If you enable this option, then each connected account with Stripe Dashboard access can log in to their Dashboard and view their Payment methods page. The Dashboard displays the set of payment method defaults you applied to all new and existing connected accounts. The owners of your platform’s connected accounts can override these defaults, excluding payment methods you have blocked.\nCheck the Account customization checkbox to enable this option. You must click Review changes in the bottom bar of your screen and then select Save and apply to update this setting.\nAccount customization checkbox\n#Integrate Checkout using dynamic payment methodsRequired\nPreviously, you might have used the paymentmethodtypes parameter when defining your Checkout session to accept different payment methods. To begin managing your payment methods in the Dashboard, remove this parameter from your integration.\n`paymentmethodtypes`After you remove the paymentmethodtypes parameter from your integration, some payment methods turn on automatically, including cards and wallets. The currency parameter restricts the payment methods that are shown to the customer during the checkout session.\n`paymentmethodtypes``currency`Stripe::Checkout::Session.create({\nmode: 'payment',\n#Remove the paymentmethodtypes parameter\n#to manage payment methods in the Dashboard\npaymentmethodtypes: ['card'],\nlineitems: [{\n  pricedata: {\n  # The currency parameter determines which\n  # payment methods are used in the Checkout Session.\n    currency: 'eur',\n      productdata: {\n        name: 'T-shirt',\n      },\n      unitamount: 2000,\n    },\n    quantity: 1,\n  }],\n  successurl: 'https://example.com/success',\n  cancelurl: 'https://example.com/cancel',\n})\n`Stripe::Checkout::Session.create({\nmode: 'payment',\n#Remove the paymentmethodtypes parameter\n#to manage payment methods in the Dashboard\npaymentmethodtypes: ['card'],\nlineitems: [{\n  pricedata: {\n  # The currency parameter determines which\n  # payment methods are used in the Checkout Session.\n    currency: 'eur',\n      productdata: {\n        name: 'T-shirt',\n      },\n      unitamount: 2000,\n    },\n    quantity: 1,\n  }],\n  successurl: 'https://example.com/success',\n  cancelurl: 'https://example.com/cancel',\n})`## Enable shipping address collection in CheckoutRecommended\nIf you collect shipping addresses, you need to define which countries you can ship to when you create the Checkout session.  Specify the two-letter ISO country codes in the shippingaddresscollection.allowedcountries parameter.\n`shippingaddresscollection.allowedcountries`You can optionally add shipping rates with the shippingoptions parameter.\n`shippingoptions`If you use Afterpay or Clearpay, you must collect shipping addresses, but you don’t need to specify shipping rates for those payment methods.\n#Note\nShipping address collection is required to use Afterpay or Clearpay as a payment method in Checkout, but shipping rates aren’t.\n#Handle delayed notification payment methods, if applicableRecommended\nFollow the steps in our Manage payment methods in the Dashboard guide on how to handle delayed notification payment methods.\n#Test your integrationRecommended\nTest your integration to ensure it performs as you expect. Log in to one of your test accounts and navigate to Payment methods settings to view your settings for your connected accounts. Test your checkout flow with your test API key and a test account. If a payment method you expect to be available is not available, check the payment method product support table to make sure your products and merchants are in a compatible currency and country.\n#Have your connected accounts with Stripe Dashboard access enable any payment methods that require setup stepsOptional\nYour connected accounts with Stripe Dashboard access are able to use most payment methods by default; however, some payment methods (such as Alipay and WeChat Pay) require your users to manually activate the payment method in their Dashboard. Confirm which payment methods require manual activation using the payment method capabilities table. If the Available by default column reads no, the payment method requires manual activation.\nIf you allow the owners of your platform’s connected accounts to manage payment methods, then instruct them to enable these payment methods from their Dashboard.\nPayment method customization\nIf you don’t allow the owners of your platform’s connected accounts to customize payment methods, then instruct them to visit their manual settings page.\nManual settings for payment methods\n#Private preview\nThe embedded payment method settings component allows connected accounts to configure the payment methods they offer at checkout without the need to access the Stripe Dashboard. Request access and learn how to integrate with Payment Method Configurations.\n#See also\n• Connect integration guide\n• Payment method configurations API\n• Multiple payment method configurations\n• Add payment method capabilities"}, {"path": "connect\\embed-payment-method-settings.md", "url": "https://docs.stripe.com/connect/embed-payment-method-settings", "content": "#Embed the payment methods settings component | Stripe Documentation\nURL: https://docs.stripe.com/connect/embed-payment-method-settings\n\n#Embed the payment methods settings componentPrivate preview\n#Embed a payment methods settings component into your website.\nAfter you integrate with dynamic payment methods, you can embed the payment methods settings component into your website to allow your users to manage their payment methods without the need to access the Stripe Dashboard.\nThe component uses the Payment Method Configurations and Account Capabilities APIs to capture your connected accounts’ payment method setting preferences. The component is a low-code, customizable alternative to building a custom payment method settings UI for your connected accounts.\n#Enable dynamic payment methods\nFollow the steps in upgrading to dynamic payment methods.\n#Integrate with Connect embedded components\nRequest access to the embedded component preview and learn how to integrate with Payment Method Configurations.\n#Have your connected accounts enable payment methods\nYour connected accounts can use the component to enable payment methods and provide compliance information without the need to access the Stripe Dashboard. If a connected account needs to provide additional compliance information to use a payment method, the component prompts them for the information and collects it up-front.\n#Note\nWe support the following payment methods in the embedded component:\nAffirm, Afterpay Clearpay, Amazon Pay, Apple Pay, Bancontact, BLIK, Cards, EPS, Google Pay, iDEAL, Klarna, Link, P24, Sofort, and Zip.\n#See also\n• Connect integration guide\n• Upgrading to dynamic payment methods"}, {"path": "connect\\embedded-appearance-options.md", "url": "https://docs.stripe.com/connect/embedded-appearance-options", "content": "#Supported appearance options | Stripe Documentation\nURL: https://docs.stripe.com/connect/embedded-appearance-options\n\n#Supported appearance options\n#Review the appearance options available for Embedded Components.\nThe embedded components Figma UI toolkit contains every component, common patterns, and an example application. You can use it to visualize and design embedded UIs in your website.\nThe variables object includes the following optional properties, which apply to all Connect embedded components in your application. You can test the variables on the customization page.\n`variables`## Commonly used variables\n Name | Type | Example Value \n fontFamily | string | sans-serif \n The font family value used throughout embedded components. If an embedded component inherits a font-family value from an element on your site in which it’s placed, this setting overrides that inheritance. \n fontSizeBase | string | 16px \n The baseline font size set on the embedded component root. This scales the value of other font size variables. This supports pixel values only. \n spacingUnit | string | 8px \n The base spacing unit that derives all spacing values. Increase or decrease this value to make your layout more or less spacious. This supports pixel values only. \n borderRadius | string | 15px \n The general border radius used in embedded components. This sets the default border radius for all components. This supports pixel values only. \n colorPrimary | string | #0074D4 \n The primary color used throughout embedded components. Set this to your primary brand color. This accepts hex values or RGB/HSL strings. \n colorBackground | string | #FFFFFF \n The background color for embedded components, including overlays, tooltips, and popovers. This accepts hex values or RGB/HSL strings. \n colorText | string | #444444 \n The color used for regular text. This accepts hex values or RGB/HSL strings. \n colorDanger | string | #DF1B41 \n The color used to indicate errors or destructive actions. This accepts hex values or RGB/HSL strings. \n`fontFamily``sans-serif``font-family``fontSizeBase``16px``spacingUnit``8px``borderRadius``15px``colorPrimary``#0074D4``colorBackground``#FFFFFF``colorText``#444444``colorDanger``#DF1B41`## Less commonly used variables\n Name | Type | Example Value \n buttonPrimaryColorBackground | string | #0074D4 \n The color used as a background for primary buttons. This accepts hex values or RGB/HSL strings. \n buttonPrimaryColorBorder | string | #0074D4 \n The border color used for primary buttons. This accepts hex values or RGB/HSL strings. \n buttonPrimaryColorText | string | #FFFFFF \n The text color used for primary buttons. This accepts hex values or RGB/HSL strings. \n buttonSecondaryColorBackground | string | #EBEEF1 \n The color used as a background for secondary buttons. This accepts hex values or RGB/HSL strings. \n buttonSecondaryColorBorder | string | #EBEEF1 \n The color used as a border for secondary buttons. This accepts hex values or RGB/HSL strings. \n buttonSecondaryColorText | string | #393B3E \n The text color used for secondary buttons. This accepts hex values or RGB/HSL strings. \n colorSecondaryText | string | #717171 \n The color used for secondary text. This accepts hex values or RGB/RGBA/HSL strings. \n actionPrimaryColorText | string | #0074D4 \n The color used for primary actions and links. This accepts hex values or RGB/HSL strings. \n actionPrimaryTextDecorationLine | string | underline \n The line type used for text decoration of primary actions and links. This accepts a valid text decoration line value. \n actionPrimaryTextDecorationColor | string | #0074D4 \n The color used for text decoration of primary actions and links. This accepts hex values or RGB/HSL strings. \n actionPrimaryTextDecorationStyle | string | solid \n The style of text decoration of primary actions and links. This accepts a valid text decoration style value. \n actionPrimaryTextDecorationThickness | string | 1px \n The thickness of text decoration of primary actions and links. This accepts a valid text decoration thickness value. \n actionSecondaryColorText | string | #444444 \n The color used for secondary actions and links. This accepts hex values or RGB/HSL strings. \n actionSecondaryTextDecorationLine | string | underline \n The line type used for text decoration of secondary actions and links. This accepts a valid text decoration line value. \n actionSecondaryTextDecorationColor | string | #0074D4 \n The color used for text decoration of secondary actions and links. This accepts hex values or RGB/HSL strings. \n actionSecondaryTextDecorationStyle | string | solid \n The style of text decoration of secondary actions and links. This accepts a valid text decoration style value. \n actionSecondaryTextDecorationThickness | string | 1px \n The thickness of text decoration of secondary actions and links. This accepts a valid text decoration thickness value. \n badgeNeutralColorBackground | string | #E4ECEC \n The background color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/HSL strings. \n badgeNeutralColorText | string | #545969 \n The text color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/HSL strings. \n badgeNeutralColorBorder | string | #CBD5D6 \n The border color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/RGBA/HSL strings. \n badgeSuccessColorBackground | string | #CEF6BB \n The background color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/HSL strings. \n badgeSuccessColorText | string | #05690D \n The text color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/HSL strings. \n badgeSuccessColorBorder | string | #B4E1A2 \n The border color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/RGBA/HSL strings. \n badgeWarningColorBackground | string | #FCEEBA \n The background color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/HSL strings. \n badgeWarningColorText | string | #A82C00 \n The text color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/HSL strings. \n badgeWarningColorBorder | string | #F5DA80 \n The border color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/RGBA/HSL strings. \n badgeDangerColorBackground | string | #F9E4F1 \n The background color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/HSL strings. \n badgeDangerColorText | string | #B3063D \n The text color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/HSL strings. \n badgeDangerColorBorder | string | #F2C9E3 \n The border color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/RGBA/HSL strings. \n offsetBackgroundColor | string | #FFFFFF \n The background color used when highlighting information, like the selected row on a table or particular piece of UI. This accepts hex values or RGB/HSL strings. \n formBackgroundColor | string | #FFFFFF \n The background color used for form items. This accepts hex values or RGB/HSL strings. \n colorBorder | string | #D7D7D7 \n The color used for borders throughout the component. This accepts hex values or RGB/RGBA/HSL strings. \n formHighlightColorBorder | string | #D7D7D7 \n The color used to highlight form items when focused. This accepts hex values or RGB/RGBA/HSL strings. \n formAccentColor | string | #0074D4 \n The color used for to fill in form items like checkboxes, radio buttons and switches. This accepts hex values or RGB/HSL strings. \n buttonBorderRadius | string | 4px \n The border radius used for buttons. This supports pixel values only. \n formBorderRadius | string | 6px \n The border radius used for form elements. This supports pixel values only. \n badgeBorderRadius | string | 4px \n The border radius used for badges. This supports pixel values only. \n overlayBorderRadius | string | 8px \n The border radius used for overlays. This supports pixel values only. \n overlayZIndex | number | 1000 \n A z-index to use for the overlay throughout embedded components. Set this number to control the z-order of the overlay. \n overlayBackdropColor | string | #F9E4F1 \n The backdrop color when an overlay is opened. This accepts hex values or RGB/RGBA/HSL strings. \n bodyMdFontSize | string | 16px \n The font size for the medium body typography. Body typography variables accept a valid font size value. \n bodyMdFontWeight | string | 400 \n The font weight for the medium body typography. Body typography variables accept a valid font weight value. \n bodySmFontSize | string | 14px \n The font size for the small body typography. Body typography variables accept a valid font size value. \n bodySmFontWeight | string | 400 \n The font weight for the small body typography. Body typography variables accept a valid font weight value. \n headingXlFontSize | string | 28px \n The font size for the extra large heading typography. Heading typography variables accept a valid font size value. \n headingXlFontWeight | string | 700 \n The font weight for the extra large heading typography. Heading typography variables accept a valid font weight value. \n headingXlTextTransform | string | uppercase \n The text transform for the extra large heading typography. Heading typography variables accept a valid text transform value. \n headingLgFontSize | string | 24px \n The font size for the large heading typography. Heading typography variables accept a valid font size value. \n headingLgFontWeight | string | 700 \n The font weight for the large heading typography. Heading typography variables accept a valid font weight value. \n headingLgTextTransform | string | uppercase \n The text transform for the large heading typography. Heading typography variables accept a valid text transform value. \n headingMdFontSize | string | 20px \n The font size for the medium heading typography. Heading typography variables accept a valid font size value. \n headingMdFontWeight | string | 700 \n The font weight for the medium heading typography. Heading typography variables accept a valid font weight value. \n headingMdTextTransform | string | uppercase \n The text transform for the medium heading typography. Heading typography variables accept a valid text transform value. \n headingSmFontSize | string | 16px \n The font size for the small heading typography. Heading typography variables accept a valid font size value. \n headingSmFontWeight | string | 700 \n The font weight for the small heading typography. Heading typography variables accept a valid font weight value. \n headingSmTextTransform | string | uppercase \n The text transform for the small heading typography. Heading typography variables accept a valid text transform value. \n headingXsFontSize | string | 12px \n The font size for the extra small heading typography. Heading typography variables accept a valid font size value. \n headingXsFontWeight | string | 700 \n The font weight for the extra small heading typography. Heading typography variables accept a valid font weight value. \n headingXsTextTransform | string | uppercase \n The text transform for the extra small heading typography. Heading typography variables accept a valid text transform value. \n labelMdFontSize | string | 14px \n The font size for the medium label typography. Label typography variables accept a valid font size value. \n labelMdFontWeight | string | 400 \n The font weight for the medium label typography. Label typography variables accept a valid font weight value. \n labelMdTextTransform | string | uppercase \n The text transform for the medium label typography. Label typography variables accept a valid text transform value. \n labelSmFontSize | string | 12px \n The font size for the small label typography. Label typography variables accept a valid font size value. \n labelSmFontWeight | string | 400 \n The font weight for the small label typography. Label typography variables accept a valid font weight value. \n labelSmTextTransform | string | uppercase \n The text transform for the small label typography. Label typography variables accept a valid text transform value. \n`buttonPrimaryColorBackground``#0074D4``buttonPrimaryColorBorder``#0074D4``buttonPrimaryColorText``#FFFFFF``buttonSecondaryColorBackground``#EBEEF1``buttonSecondaryColorBorder``#EBEEF1``buttonSecondaryColorText``#393B3E``colorSecondaryText``#717171``actionPrimaryColorText``#0074D4``actionPrimaryTextDecorationLine``underline``actionPrimaryTextDecorationColor``#0074D4``actionPrimaryTextDecorationStyle``solid``actionPrimaryTextDecorationThickness``1px``actionSecondaryColorText``#444444``actionSecondaryTextDecorationLine``underline``actionSecondaryTextDecorationColor``#0074D4``actionSecondaryTextDecorationStyle``solid``actionSecondaryTextDecorationThickness``1px``badgeNeutralColorBackground``#E4ECEC``badgeNeutralColorText``#545969``badgeNeutralColorBorder``#CBD5D6``badgeSuccessColorBackground``#CEF6BB``badgeSuccessColorText``#05690D``badgeSuccessColorBorder``#B4E1A2``badgeWarningColorBackground``#FCEEBA``badgeWarningColorText``#A82C00``badgeWarningColorBorder``#F5DA80``badgeDangerColorBackground``#F9E4F1``badgeDangerColorText``#B3063D``badgeDangerColorBorder``#F2C9E3``offsetBackgroundColor``#FFFFFF``formBackgroundColor``#FFFFFF``colorBorder``#D7D7D7``formHighlightColorBorder``#D7D7D7``formAccentColor``#0074D4``buttonBorderRadius``4px``formBorderRadius``6px``badgeBorderRadius``4px``overlayBorderRadius``8px``overlayZIndex``1000``overlayBackdropColor``#F9E4F1``bodyMdFontSize``16px``bodyMdFontWeight``400``bodySmFontSize``14px``bodySmFontWeight``400``headingXlFontSize``28px``headingXlFontWeight``700``headingXlTextTransform``uppercase``headingLgFontSize``24px``headingLgFontWeight``700``headingLgTextTransform``uppercase``headingMdFontSize``20px``headingMdFontWeight``700``headingMdTextTransform``uppercase``headingSmFontSize``16px``headingSmFontWeight``700``headingSmTextTransform``uppercase``headingXsFontSize``12px``headingXsFontWeight``700``headingXsTextTransform``uppercase``labelMdFontSize``14px``labelMdFontWeight``400``labelMdTextTransform``uppercase``labelSmFontSize``12px``labelSmFontWeight``400``labelSmTextTransform``uppercase`"}, {"path": "connect\\embedded-comms.md", "url": "https://docs.stripe.com/connect/embedded-comms", "content": "#Email communications in embedded Connect integrations | Stripe Documentation\nURL: https://docs.stripe.com/connect/embedded-comms\n\n#Email communications in embedded Connect integrations\n#Customize Stripe notifications to your connected accounts in a fully embedded integration.\nIn an embedded Connect integration, when connected accounts must review information or take action, Stripe sends email communications directly to them. Those emails direct your connected accounts to embedded components on your website to review information or take required action. You must provide Stripe with the URLs for those components so we can include them in the emails.\nYou can customize the messages that Stripe sends to match your platform brand, and you can view an account’s Stripe email history on the account’s details page.\n#Communications that Stripe sends to your connected accounts\nWe send the following emails to your connected accounts:\n• Account emails verify an account’s information, such as additions or changes to an email address, phone number, or bank account.\n• Compliance emails notify accounts to provide required information. Stripe often needs to collect further information to maintain compliance with our financial partners.\n• Risk emails notify accounts when they’re under a risk review. These emails often provide instructions on how to submit information to resolve a risk action; for example, to remove a pause on payouts.\n• Tax emails (only when Stripe collects Stripe fees directly from connected accounts) notify users when their tax invoices or 1099s are ready to download.\nIf you want to send any other payments-related emails to your connected accounts, you must send them yourself. For example, to send emails for new disputes, listen for the charge.dispute.created event on a connected account. When that event occurs, use the Disputes API to get the details and email them to the account.\n`charge.dispute.created`You must update your Connect settings with the URLs of your payments and account workflows so Stripe’s email communications can include links for your accounts to respond.\n#Site links to your website components\nEmails sent by Stripe that contain a call to action include a link to perform that action. For example, if we send an email directing a connected account to respond to a risk notification, it must include a link to the page where you embedded your Notification banner component.\nBefore you can create a live mode Account Session, you must provide the URLs where you have integrated the embedded components into your website. Configure the sending email domain and embedded component URLs in the Site links section of your platform’s Connect settings.\n#Note\nSandbox environments use the same URLs as live mode.\nFor embedded components integrated in your site, select Yes and enter the URL of the page that hosts the component. For any actions not handled by an embedded component, select No and enter the URL of the page on your site where the account can perform the action. After entering the URLs, test them to verify that they open the right pages. You can test a link by clicking Validate.\nYou must set URLs for the following:\n• Notification banner\n• Account management\n• Payments\n• Payouts\n• Balances\n• Documents (when Stripe collects Stripe fees directly from connected accounts)\nWhen sending an email, Stripe automatically appends the connected account ID to the redirect URL as the stripeaccountid parameter. Use that parameter to identify the account and verify that they’re authenticated. Set up the route on your server to read the parameters and display the correct embedded component.\n`stripeaccountid`## Preview and customize communications\nYou can customize the co-branded communications that we send to your connected accounts in your communication settings. To customize a category of emails, click Preview and customize.\n#Customize email branding\nYou can set your Business name, Logo, Icon, Brand color, and Accent color. Stripe uses these values in the co-branded emails we send to your connected accounts.\n#Customize email domain\nBy default, emails are sent from a stripe.com address. You can customize the domain, but not the specific address. We set the address automatically based on the context of the message.\n#Preview and test emails\nWhen you customize a category of co-branded Stripe emails, you can check their appearance and test their links in the preview on the right side of the page. Select a specific email from the Preview dropdown list. You can also send test emails to verify that they’re working correctly by clicking Send email.\n#View the history of emails sent to connected accounts\nYou can see the emails that Stripe has sent to your connected accounts on the account details page under Emails to this account. To see the details of an email, including its exact contents, its To: address, and its status (such as whether it was delivered successfully or was opened), click it in the list."}, {"path": "connect\\embedded-onboarding.md", "url": "https://docs.stripe.com/connect/embedded-onboarding", "content": "#Embedded onboarding | Stripe Documentation\nURL: https://docs.stripe.com/connect/embedded-onboarding\n\n#Embedded onboarding\n#Provide your connected accounts a localized onboarding form that validates data.\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. You embed the Account onboarding component in your platform application, and your connected accounts interact with the embedded component without ever leaving your application.\nThe component supports Legal Entity Sharing, which allows owners of multiple Stripe accounts to share business information between them. When they onboard an account, they can reuse that information from an existing account instead of resubmitting it.\nEmbedded onboarding uses the Accounts API to read the requirements and generate an onboarding form with robust data validation, localized for all Stripe-supported countries. In addition, embedded onboarding handles all:\n• Business types\n• Configurations of company representatives\n• Verification document uploading\n• Identity verification and statuses\n• International bank accounts\n• Error states\n#Create an account and prefill informationServer-side\nCreate a connected account with the default controller properties. See design an integration to learn more about controller properties. Alternatively, you can create a connected account by specifying an account type.\ncurl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`If you know the country for your connected account, you can provide that information when you create the account. The country defaults to the same country as your platform if not provided.\nTo request capabilities for your connected account, you can provide that information when you create the account. Stripe’s onboarding UIs automatically collect the requirements for those capabilities. To reduce onboarding effort, request only the capabilities you need. If you omit capabilities, and your connected account has access to the full Stripe Dashboard or the Express Dashboard, capabilities are automatically requested. For accounts with access to the Express dashboard, Stripe-hosted onboarding uses the Configuration settings to request capabilities based on the account’s country.\nIf you have information about the account holder (like their name, address, or other details), you can proactively provide this when you create or update the account. Stripe-hosted onboarding asks the account holder to confirm the pre-filled information before accepting the Connect service agreement. Providing more information through the API reduces the number of prompts and enhances the onboarding flow for your connected account.\nAdditionally, if you onboard an account without its own website and your platform provides the account with a URL, prefill the account’s businessprofile.url. If the account doesn’t have a URL, you can prefill its businessprofile.productdescription instead.\nWhen testing your integration, use test data to simulate different outcomes including identity verification, business information verification, payout failures, and more.\n#Determine the information to collect\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the eventuallydue requirements for the account, while incremental onboarding only collects the currentlydue requirements.\n`eventuallydue``currentlydue`|  | Upfront onboarding | Incremental onboarding |\n --- | --- | --- \n Advantages | Entails a single request for information (normally)Creates fewer problems in receiving payouts and maintaining processing abilityExposes potential fraudsters or connected accounts who refuse to provide required information later | Onboards connected accounts quicklyResults in higher onboarding rates \n Disadvantages | Onboarding connected accounts can take longerSome legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | Creates a higher likelihood of disrupting business of an ongoing connected account \n• Entails a single request for information (normally)\n• Creates fewer problems in receiving payouts and maintaining processing ability\n• Exposes potential fraudsters or connected accounts who refuse to provide required information later\n• Onboards connected accounts quickly\n• Results in higher onboarding rates\n• Onboarding connected accounts can take longer\n• Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process\n• Creates a higher likelihood of disrupting business of an ongoing connected account\nTo determine whether to use upfront or incremental onboarding, review the required information for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\nFor connected accounts where you’re responsible for requirement collection, you can customize the behavior of future requirements using the collectionoptions parameter. Set collectionoptions.futurerequirements to include to collect the account’s future requirements.\n`collectionoptions``collectionoptions.futurerequirements``include`## Customize the policies shown to your users\nConnected accounts see Stripe’s service agreement and Privacy Policy during embedded onboarding. Connected account users who haven’t accepted Stripe’s services agreement must accept it on the final onboarding screen. Embedded onboarding also has a footer with links to Stripe’s service agreement and Privacy Policy.\nFor connected accounts where the platform is responsible for requirement collection, you have additional options to customize the onboarding flow, as outlined below.\n#Handle service agreement acceptance on your own\nIf you’re a platform onboarding connected accounts where you’re responsible for requirement collection, you can collect Terms of Service acceptance using your own process instead of using the embedded account onboarding component. If using your own process, the final onboarding screen only asks your connected accounts to confirm the information they entered, and you must secure their acceptance of Stripe’s service agreement.\nEmbedded onboarding still has links to the terms of service (for example, in the footer) that you can replace by linking to your own agreements and privacy policy.\n#Link to your agreements and privacy policy\nConnected accounts see the Stripe service agreement and Privacy Policy throughout embedded onboarding. For the connected accounts where you’re responsible for requirement collection, you can replace the links with your own agreements and policy. Follow the instructions to incorporate the Stripe services agreement and link to the Stripe Privacy Policy.\n#Integrate the account onboarding componentServer-sideClient-side\nCreate an Account Session by specifying the ID of the connected account and accountonboarding as the component to enable.\n`accountonboarding`## Create an Account Session\nWhen creating an Account Session, enable account onboarding by specifying accountonboarding in the components parameter.\n`accountonboarding``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountonboarding][enabled]\"=true \\\n  -d \"components[accountonboarding][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountonboarding][enabled]\"=true \\\n  -d \"components[accountonboarding][features][externalaccountcollection]\"=true`After creating the Account Session and initializing ConnectJS, you can render the Account onboarding component in the front end:\n// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n  console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);\n// Optional: make sure to follow our policy instructions above\n// accountOnboarding.setFullTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setPrivacyPolicyUrl('{{URL}}')\n// accountOnboarding.setSkipTermsOfServiceCollection(false)\n// accountOnboarding.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n// accountOnboarding.setOnStepChange((stepChange) => {\n//   console.log(`User entered: ${stepChange.step}`);\n// });\n`// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n  console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);\n// Optional: make sure to follow our policy instructions above\n// accountOnboarding.setFullTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setPrivacyPolicyUrl('{{URL}}')\n// accountOnboarding.setSkipTermsOfServiceCollection(false)\n// accountOnboarding.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n// accountOnboarding.setOnStepChange((stepChange) => {\n//   console.log(`User entered: ${stepChange.step}`);\n// });`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setFullTermsOfServiceUrl | string | Absolute URL to your full terms of service agreement. | Stripe’s full service agreement \n setRecipientTermsOfServiceUrl | string | Absolute URL to your recipient terms of service agreement. | Stripe’s recipient service agreement \n setPrivacyPolicyUrl | string | Absolute URL to your privacy policy. | Stripe’s privacy policy \n setSkipTermsOfServiceCollection | string | If true, embedded onboarding skips terms of service collection and you must collect terms acceptance yourself. | false \n setCollectionOptions | { fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' } | Customizes collecting currentlydue or eventuallydue requirements and controls whether to include future requirements. Specifying eventuallydue collects both eventuallydue and currentlydue requirements. | {fields: 'currentlydue', futureRequirements: 'omit'} \n setOnExit | () => void | The connected account has exited the onboarding process |  \n setOnStepChange | ({step}: StepChange) => void | The connected account has navigated from one step to another within the onboarding process. See the step change object for a full reference and restrictions. |  \n`setFullTermsOfServiceUrl``string``setRecipientTermsOfServiceUrl``string``setPrivacyPolicyUrl``string``setSkipTermsOfServiceCollection``string``setCollectionOptions``{ fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' }``currentlydue``eventuallydue``eventuallydue``eventuallydue``currentlydue``{fields: 'currentlydue', futureRequirements: 'omit'}``setOnExit``() => void``setOnStepChange``({step}: StepChange) => void`To use this component to set up new accounts:\n# Create a connected account. You can prefill information on the account object in this API call.\n# Initialize Connect embedded components using the ID of the connected account.\n# Include the account-onboarding element to show the onboarding flow to the connected account.\n# Listen for the exit event emitted from this component. Stripe sends this event when the connected account exits the onboarding process.\n# When exit triggers, retrieve account details to check the status of detailssubmitted, chargesenabled, payoutsenabled, and other capabilities. If all required capabilities are enabled, you can take the account to the next step of your flow.\n`account-onboarding``exit``exit`#### The stepchange object\n`stepchange`Every time the connected account navigates from one step to another in the onboarding process, a stepchange object is passed to the step change handler with the following properties.\n`stepchange`| Name | Type | Example value |\n step | string See the possible step values | businesstype \n The unique reference to an onboarding step. \n`step``string``businesstype`##### Restrictions\n• The stepchange object is only for analytics.\n• Steps can appear in any order and can be repeated.\n• Possible step values can change at any time.\n`stepchange``step`#### Step Values\nEach page in onboarding has a unique step name. This step is an exhaustive list of pages the user could see in the onboarding process. These values can change at any time without notice.\n`step`| Steps | Description |\n --- | --- \n stripeuserauthentication | User authentication includes a popup to a Stripe-owned window. The connected account must authenticate before they can continue their workflow. \n riskintervention | Guides the connected account to resolve risk-related requirements. \n legalentitysharing | Connected accounts can optionally reuse existing information when onboarding new accounts. \n businesstype | Sets the business type of the connected account. In certain cases the connected account can also set their country. \n businessdetails | Collects information related to the connected account’s business. \n businessverification | Collects a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation. Or allows users to correct wrongly entered information related to the entity. \n businessbankaccountownershipverification | Collects documents needed to verify that bank account information, such as the legal owner’s name and account number, match the information on the user’s Stripe account. \n businessdocuments | Collects other documents and verification requirements related to the business. \n representativedetails | Collects information about the account representative. \n representativedocument | Collects a government-issued ID verifying the existence of the account representative. \n representativeadditionaldocument | Collects an additional document to verifying the details of the account representative. \n legalguardiandetails | Collects the legal guardians consent for accounts opened by minors. \n owners | Collects information about the beneficial owners of a company. \n directors | Collects information about the directors of a company. \n executives | Collects information about the executives of a company. \n confirmowners | Allows connected accounts to attest that the beneficial owner information provided to Stripe is both current and correct. \n risacompliancesurvey | Answers questions concerning the Revised Installment Sales Act. (only for Japan) \n treasuryandcardissuingtermsofservice | Collects Treasury and Card Issuing terms of service when requesting those capabilities. \n externalaccount | Collects the external account of the connected account. \n supportdetails | Collects information that helps customers recognize the connected accounts business. This support information may be visible in payment statements, invoices, and receipts. \n climate | Allows a connected account to opt into Stripe Climate. \n tax | Allows a connected account to opt into Stripe Tax. \n summary | Final review step of onboarding. The connected account can update entered information from this step. The terms of service and privacy URL is displayed in this screen. \n summaryrisk | From the summary step, a connected account can update information related to risk requirements. \n summarybusinesstype | From the summary step, a connected account can update information related to their business type. \n summarybusiness | From the summary step, a connected account can update information related to their business. \n summarysupport | From the summary step, a connected account can update information related to their businesses public facing information. \n summarypersons | From the summary step, a connected account can update information about each person on their account. \n summaryexternalaccount | From the summary step, a connected account can update information related to their external account. \n summarytax | From the summary step, a connected account can update information related to their Stripe Tax integration. \n summarytaxidentificationform | From the summary step, a connected account can update information related to their W8/W9 certified tax information. This is shown when Stripe must collect W8/W9 information. \n summaryclimate | From the summary step, a connected account can update information related to their Stripe Climate integration. \n`stripeuserauthentication``riskintervention``legalentitysharing``businesstype``businessdetails``businessverification``businessbankaccountownershipverification``businessdocuments``representativedetails``representativedocument``representativeadditionaldocument``legalguardiandetails``owners``directors``executives``confirmowners``risacompliancesurvey``treasuryandcardissuingtermsofservice``externalaccount``supportdetails``climate``tax``summary``summaryrisk``summarybusinesstype``summarybusiness``summarysupport``summarypersons``summaryexternalaccount``summarytax``summarytaxidentificationform``summaryclimate`## Handle new requirements becoming dueServer-side\nSet up your integration to listen for changes to account requirements. You can test handling new requirements (and how they might disable charges and payouts) with the test trigger cards.\nBased on your application’s verification requirements, send the connected account back through onboarding when it has currentlydue or eventuallydue requirements.  Use these signals to determine when it’s necessary to re-initiate onboarding for a connected account.\n`currentlydue``eventuallydue`You don’t need to worry about determining which requirements are missing. Onboarding collects the necessary information. For example, if there’s a typo preventing verification, onboarding prompts the connected account to upload an identity document (such as a Driver’s License in the United States). If any information is missing, onboarding requests it.\nStripe notifies you about any upcoming requirements updates that affect your connected accounts. You can proactively collect this information by reviewing the future requirements for your accounts.\n#Handle verification errors\nListen to the account.updated event. If the account contains any currentlydue fields when the currentdeadline arrives, the corresponding functionality is disabled and those fields are added to pastdue.\n`currentlydue``currentdeadline``pastdue`Let your accounts remediate their verification requirements by directing them to the Account onboarding component.\n#Disable Stripe user authentication\nWhen using embedded onboarding, Stripe user authentication is enabled by default. You can use disablestripeuserauthentication to remove this behavior.\n`disablestripeuserauthentication`We recommend implementing two-factor authentication or equivalent security measures as a best practice. For account configurations that support this feature, such as Custom, you assume liability for connected accounts if they can’t pay back negative balances.\n#See also\n• Get started with Connect embedded components\n• Customize embedded components"}, {"path": "connect\\embedded-risk.md", "url": "https://docs.stripe.com/connect/embedded-risk", "content": "#Embedded Stripe Managed Risk | Stripe Documentation\nURL: https://docs.stripe.com/connect/embedded-risk\n\n#Embedded Stripe Managed Risk\n#Embed Stripe risk management features into your own website.\nWith Stripe Managed Risk, we provide an end-to-end business risk management solution and your platform isn’t liable for your connected accounts’ negative balances. For connected accounts without access to a Stripe-hosted dashboard, Stripe Managed Risk requires that your website includes the following embedded components:\n• Account onboarding\n• Account management\n• Notification banner\nThrough those embedded components, Stripe provides:\n• Ongoing monitoring and detection of connected accounts’ credit, fraud, and supportability risk\n• Risk interventions to ensure business supportability and prevent losses\n• Co-branded emails and embedded notifications to inform businesses of interventions\n• Embedded forms to respond to and remediate interventions\n• Stripe risk operations to review merchant information and make risk decisions\n• Stripe liability for connected account negative balances\n#Risk interventions\nWith Stripe Managed Risk, Stripe takes the following actions throughout a connected account’s operations:\n• Verifies the information collected during onboarding\n• Evaluates ongoing fraud risk\n• Monitors compliance\nWhen Stripe detects elevated risk or non-compliance, we raise a risk review or apply a risk intervention, which is an action taken to mitigate losses, such as:\n• Pausing payouts or charges\n• Holding reserves\n• Prohibiting the account from using payment processing services\nWhile some high-priority interventions have consequences that take effect immediately, most interventions notify connected accounts with a deadline to respond before their business is disrupted. Connected accounts are responsible for promptly reviewing and responding to interventions.\n#Emails\nWhen Stripe raises a risk intervention, we email the connected account to notify them of the issue. The email provides high-level guidance on:\n• What the business must do to resolve the issue\n• By when the business must address the issue\n• Consequences to the business if no action is taken\nRisk intervention emails might include links to more information about a particular topic, such as restricted business lists or how card brand monitoring programs work. Emails might also include links to details about activity on the connected account, like disputed payments or reserve balances.\nEmails sent to fully embedded connected accounts include:\n• Co-branding\n• A primary button that takes users to the embedded notification banner (as configured in your Connect Emails)\n• Links leading to the co-branded support site (see Support) and your embedded components\nThe following example shows a fully embedded risk intervention email:\n#Notification banner\nIn addition to notifying connected accounts about risk interventions through email, Stripe also renders alerts via the notification banner component. The notification banner only appears when there are active notifications.\nThe notification banner provides high level guidance on:\n• What the business must do to resolve the issue\n• By when the business must address the issue\n• Consequences to the business if no action is taken\nIn the example above, the banner shows a single notification requiring action within 2 days to continue taking payments and receiving payouts. The banner’s headline states whether the intervention affects payments, payouts, or both.\nThe banner can also have multiple notifications to help connected accounts quickly address all open issues.\nMultiple notifications in the embedded notification banner\nThe notification’s due date indicator shows how much time is remaining and becomes red to indicate overdue requirements that the connected account must address urgently to avoid consequences.\nNotification for a past due risk intervention\nAfter the connected account responds, the notification updates to indicate that no action is required.\nNotification for an in-review risk intervention\nWhen all notifications are in review the banner automatically collapses and can be expanded to see more details.\nCollapsed notification banner\nThe banner informs your connected account when Stripe suspends their operation and provides a means for contacting support to appeal.\nNotification of unsupportable business\n#Responding to interventions\nNotifications in the notification banner include a button that the account user can click to respond directly in a modal window. In the following example, the notification prompts the user to complete an identity verification.\nEmbedded identity verification\nConnected accounts must authenticate with Stripe to resolve risk interventions in the modal window.\nSome interventions might request additional information about the business or its operations, which the user can provide and submit directly from within the modal, as shown in the following example.\nEmbedded form to respond to risk intervention\nMost intervention emails include a button directing users to the notification banner where they can respond directly. In rare cases, the email might direct the user to respond by replying to the email.\n#Support for risk issues\nIf a connected account needs help with a risk issue, they can:\n• Contact Stripe’s risk specialist team using the Contact support link at the bottom of the response modal.\n• Reply to any risk email to create a support request.\nThe forms provided through the intervention notifications are the fastest resolution for risk issues because they minimize the back-and-forth nature of email communication."}, {"path": "connect\\embedded-support.md", "url": "https://docs.stripe.com/connect/embedded-support", "content": "#Embedded Connect Support | Stripe Documentation\nURL: https://docs.stripe.com/connect/embedded-support\n\n#Embedded Connect Support\n#Use Stripe support management features from your own website.\nIn some configurations that use embedded components, Stripe provides targeted support for your connected accounts. That support is available when your connected accounts don’t have access to a Stripe-hosted Dashboard and your platform isn’t liable for their negative balances. It includes:\n• A Stripe-hosted support site with self-serve content specific to Stripe’s embedded components\n• Access to email and live chat support for your connected accounts\n• Links to the self-serve support site in your embedded components and co-branded risk and compliance emails\nYour connected accounts might need help with payment processing-specific issues like responding to disputes or confirming expected fund settlement times. They can also have questions about risk interventions where only Stripe has full visibility and control. Providing direct access to Stripe Support for such situations greatly reduces your platform support team’s operational load. In addition, you can implement a complete self-serve solution for risk interventions by combining that support access with Stripe Managed Risk.\n#Prerequisites\nSet up your platform with a fully embedded connect configuration. The Stripe-hosted self-serve support site becomes discoverable to your users after you implement the required embedded components for your configuration.\n#Access the support site\nYour users can access the Stripe-hosted support site at https://support.stripe.com/embedded-connect/.\n`https://support.stripe.com/embedded-connect/`Embedded components include Contact support links in the bottom right of each dialog. We also include links in flows where users are most likely to need Stripe’s help.\nEach of the following embedded components contains links to contact support:\n• Account managementEdit Professional detailsEdit Public detailsEdit Personal detailsEdit Payout details\n• Notification bannerCompliance formsRisk forms\n• Onboarding\n• Authentication dialog\n• Edit Professional details\n• Edit Public details\n• Edit Personal details\n• Edit Payout details\n• Compliance forms\n• Risk forms\n#Self-serve help\nThe support site includes articles and related questions across several topic areas, including the following:\n• Accounts\n• Declines\n• Disputes\n• Fraud\n• Legal\n• Payments\n• Payouts\n• Privacy\n• Refunds\n• Reserves\n• Verification\n#Contacting support\nContact support links appear on the right side of each page on the self-serve support site.\nIf the user is authenticated (for example, provided an SMS OTP), clicking the link opens a support widget. The widget lets them start a real-time chat with Support or send an email.\nClicking the link while not authenticated, or clicking Send us an email in the widget, opens a form to open a support case by email."}, {"path": "connect\\enable-payment-acceptance-guide.md", "url": "https://docs.stripe.com/connect/enable-payment-acceptance-guide", "content": "#Enable other businesses to accept payments directly | Stripe Documentation\nURL: https://docs.stripe.com/connect/enable-payment-acceptance-guide\n\n#Enable other businesses to accept payments directly\n#Facilitate direct payments between other businesses and their own customers.\nThis guide covers letting your users accept payments, moving a portion of your users’ earnings into your balance, and paying out the remainder to your users’ bank accounts. To illustrate these concepts, we’ll use an example platform that lets businesses build their own online stores.\n#Prerequisites\n# Register your platform.\n# Add business details to activate your account.\n# Complete your platform profile.\n# Customize your brand settings. Add a business name, icon, and brand color.\n#Set up StripeServer-side\nInstall Stripe’s official libraries so you can access the API from your application:\n#Available as a gem\nsudo gem install stripe\n`# Available as a gem\nsudo gem install stripe`#If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n`# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'`## Create a connected account\nWhen a user (seller or service provider) signs up on your platform, create a user Account (referred to as a connected account) so you can accept payments and move funds to their bank account. Connected accounts represent your user in Stripe’s API and help facilitate the collection of onboarding requirements so Stripe can verify the user’s identity. In our store builder example, the connected account represents the business setting up their Internet store.\n#Create a connected account and prefill information\nUse the /v1/accounts API to create a connected account. You can create the connected account by using the default connected account parameters, or by specifying the account type.\n`/v1/accounts`curl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`If you’ve already collected information for your connected accounts, you can prefill that information on the Account object. You can prefill any account information, including personal and business information, external account information, and so on.\n`Account`Connect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the Connect service agreement.\nWhen testing your integration, prefill account information using test data.\n#Create an account link\nYou can create an account link by calling the Account Links API with the following parameters:\n• account\n• refreshurl\n• returnurl\n• type = accountonboarding\n`account``refreshurl``returnurl``type``accountonboarding`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding`### Redirect your user to the account link URL\nThe response to your Account Links request includes a value for the key url. Redirect to this link to send your user into the flow. Account Links are temporary and are single-use only because they grant access to the connected account user’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you won’t be able to read or write information for the account.\n`url`#### Security tip\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n#Handle the user returning to your platform\nConnect Onboarding requires you to pass both a returnurl and refreshurl to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n`returnurl``refreshurl`#### Note\nYou can use HTTP for your returnurl and refreshurl while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n`returnurl``refreshurl`#### returnurl\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\nNo state is passed through this URL. After a user is redirected to your returnurl, check the state of the detailssubmitted parameter on their account by doing either of the following:\n`returnurl``detailssubmitted`- Listening to account.updated webhooks\n• Calling the Accounts API and inspecting the returned object\n`account.updated`#### refreshurl\nYour user is redirected to the refreshurl in these cases:\n`refreshurl`- The link is expired (a few minutes went by since the link was created)\n• The user already visited the link (the user refreshed the page or clicked back or forward in the browser)\n• Your platform is no longer able to access the account\n• The account has been rejected\nYour refreshurl should trigger a method on your server to call Account Links again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.\n`refreshurl`### Handle users that haven’t completed onboarding\nIf a user is redirected to your returnurl, they might not have completed the onboarding process. Use the /v1/accounts endpoint to retrieve the user’s account and check for chargesenabled. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). To see if they’ve completed the onboarding process, check the state of the detailssubmitted parameter on their account.\n`returnurl``/v1/accounts``chargesenabled``detailssubmitted`## Enable payment methods\nView your payment methods settings and enable the payment methods you want to support. Card payments are enabled by default but you can enable and disable payment methods as needed. This guide assumes Bancontact, credit cards, EPS, iDEAL, Przelewy24, SEPA Direct Debit, and Sofort are enabled.\nBefore the payment form is displayed, Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden in an overflow menu.\n#Private preview\nThe embedded payment method settings component allows connected accounts to configure the payment methods they offer at checkout without the need to access the Stripe Dashboard. Request access and learn how to integrate with Payment Method Configurations.\n#Accept a payment\nEmbed Stripe Checkout as a payment form directly on your website or redirect users to a Stripe-hosted page to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer You can also use the Payment Element, a prebuilt UI component that is embedded as an iframe in your payment form, to accept multiple payment methods with a single frontend integration.\n#Create a Checkout Session  Client-side Server-side\nA Checkout Session controls what your customer sees in the embeddable payment form such as line items, the order amount and currency, and acceptable payment methods. When performing direct charges, Checkout uses the connected account’s branding settings. See the Customize branding section for more information.\nUnlike destination charges and separate charges and transfers, users (connected accounts) are responsible for handling disputes on direct charges—it’s not the responsibility of the platform.\nOn your server, make the following call to the Stripe API. After creating a Checkout Session, redirect your customer to the URL returned in the response.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[applicationfeeamount]\"=123 \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\"`- lineitems - This argument represents items that your customer is purchasing and that will show up in the hosted user interface.\n• successurl - This argument redirects a user after they complete a payment.\n• cancelurl  - This argument redirects a user after they click cancel.\n• Stripe-Account - This header indicates a direct charge for your connected account. With direct charges, the connected account is responsible for Stripe fees, refunds, and chargebacks. The connected account’s branding is used in Checkout, which allows their customers to feel like they’re interacting directly with the merchant instead of your platform.\n• (Optional) paymentintentdata[applicationfeeamount] - This argument specifies the amount your platform plans to take from the transaction. After the payment is processed on the connected account, the applicationfeeamount is transferred to the platform and the Stripe fee is deducted from the connected account’s balance.\n`lineitems``successurl``cancelurl``Stripe-Account``paymentintentdata[applicationfeeamount]``applicationfeeamount`### Handle post-payment events  Server-side\nStripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.\nIn addition to handling the checkout.session.completed event, we recommend handling two other events when collecting payments with Checkout:\n`checkout.session.completed`| Event | Description | Next steps |\n --- | --- | --- \n checkout.session.completed | The customer has successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. \n checkout.session.asyncpaymentsucceeded | The customer’s payment succeeded. | Fulfill the purchased goods or services. \n checkout.session.asyncpaymentfailed | The payment was declined, or failed for some other reason. | Contact the customer through email and request that they place a new order. \nThese events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded.\n`processing``succeeded`## Testing\nTest your account creation flow by creating accounts and using OAuth. Test your Payment methods settings for your connected accounts by logging into one of your test accounts and navigating to the Payment methods settings. Test your checkout flow with your test keys and a test account. You can use our test cards to test your payments flow and simulate various payment outcomes.\n#Payouts\nBy default, any charge that you create for a connected account accumulates in the connected account’s Stripe balance and is paid out on a daily rolling basis. Connected accounts can manage their own payout schedules in the Stripe Dashboard.\n#See also\n• Manage connected accounts in the Dashboard\n• Issue refunds\n• Customize statement descriptors\n• Work with multiple currencies"}, {"path": "connect\\express-accounts.md", "url": "https://docs.stripe.com/connect/express-accounts", "content": "#Using Connect with Express connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/express-accounts\n\n#Using Connect with Express connected accounts\n#Express connected accounts enable your platform to manage payout schedules, customize the flow of funds, and control branding. Stripe handles onboarding, account management, and identity verification.\n#Express demo\nTo see the complete Express onboarding flow in action, try the sample end-to-end Express integration before you start building your own. This demo includes an example of a connected account onboarding experience and account management for Rocket Rides, an on-demand marketplace.\nYou can find the demo’s complete source code on GitHub.\n#Before you begin\nTo create Express connected accounts, you must meet all of these requirements:\n• Minimum API version: Express connected accounts require API version 2017-05-25 or later. Capabilities require API version 2019-02-19 or later.\n• Platform in a supported country: Platforms in Australia, Austria, Belgium, Brazil, Bulgaria, Canada, Croatia, Cyprus, the Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hong Kong, Hungary, Ireland, Italy, Japan, Latvia, Lithuania, Luxembourg, Malta, Mexico, the Netherlands, New Zealand, Norway, Poland, Portugal, Romania, Singapore, Slovakia, Slovenia, Spain, Sweden, Switzerland, Thailand, the United Kingdom, and the United States can create Express accounts for most countries Stripe supports. For information about country-specific restrictions, or to request notification when Express accounts become available in your country, contact us.\n• Countries that don’t support self-serve: Due to restrictions that apply when using Connect in the United Arab Emirates and Thailand, platform users in these countries can’t self-serve Express connected accounts. To begin onboarding for Express connected accounts in these countries, contact us.\n• Platforms in the UAE: Platforms in the UAE can only use Express connected accounts based in the UAE with the following charge types: destinationcharges and separate charges and transfers. Destination charges using the onbehalfof attribute are not yet supported for UAE platforms.\n• Vetting for fraud: Because your platform is responsible for losses incurred by Express connected accounts, you must closely examine all accounts that sign up through your platform for potential fraud. Refer to our risk management best practices guide for more information.\n• Platform profile: You need to complete your platform’s profile.\n#Onboarding Express connected accounts outside of your platform’s country\nYou can enable onboarding on a per-country basis in the Connect Settings section of your Dashboard.\nThe Express account onboarding flow is currently localized in English, French, Spanish, Bulgarian, Simplified Chinese, Traditional Chinese, Czech, Danish, Dutch, Estonian, Finnish, German, Greek, Hungarian, Indonesian, Italian, Japanese, Latvian, Lithuanian, Norwegian, Polish, Portuguese, Romanian, Slovak, Slovenian, Swedish, and Thai.\nKeep the following in mind when onboarding accounts globally:\n• International business: Your platform is responsible for understanding the implications of doing business internationally, such as tax and financial reporting.\n• Charge flows: Be sure to review your options for creating charges based on the countries you intend to operate in.\n• Service agreement type: Your platform can create connected accounts under the recipient service agreement to enable cross-border transfers. Such accounts have restricted access to capabilities.\n#Configure the onboarding experience\nBefore onboarding your first account, go to the Connect settings page to customize the visual appearance of the form with your brand’s name, color, and icon. Connect Onboarding requires this information.\n#Create an Express connected account and prefill information\nUse the Create Account API to create a connected account with type set to express. You can prefill any information, but at a minimum, you must specify the type. The country of the account defaults to the same country as your platform, and the account confirms the selection during onboarding.\n`type``express``type`#### Note\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as address and websiteurl, see the Create Account API reference.\n`address``websiteurl`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=express\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=express`If you know the country and capabilities for your connected account, you can provide that information when you create the account. Connect Onboarding then collects the requirements for those capabilities. To reduce onboarding effort, request only the capabilities you need.\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d type=express \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d businesstype=individual \\\n  --data-urlencode \"businessprofile[url]\"=\"https://example.com\"\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d type=express \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d businesstype=individual \\\n  --data-urlencode \"businessprofile[url]\"=\"https://example.com\"`If you’ve already collected information for your connected accounts, you can prefill that information on the Account object. You can prefill any account information, including personal and business information, external account information, and so on.\n`Account`Connect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the Connect service agreement.\nWhen you onboard an account without its own website and your platform provides it with a personal URL, prefill its businessprofile.url. If the account doesn’t have a URL, you can prefill its businessprofile.productdescription instead.\n`businessprofile.url``businessprofile.productdescription`When testing your integration, prefill account information using test data.\nIf you omit capabilities, Connect Onboarding uses the settings in the Configuration settings section of the Stripe Dashboard to automatically request capabilities based on the account’s country.\n`capabilities`## Create an account link\nCreate an Account Link with the following parameters:\n• account - use the account ID returned by the API from the previous step\n• refreshurl\n• returnurl\n• type = accountonboarding\n`account``refreshurl``returnurl``type``accountonboarding`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding`## Redirect your account to the account link URL\nAn Account Link contains a url. Redirect the account to this link to send your account into the onboarding flow. Each Account Link URL can only be used once because it grants access to the account holder’s personal information. Authenticate the account in your application before redirecting them to this URL.\n`url`Before creating the first account link for an Express connected account, prefill any Know Your Customer (KYC) information. After you create an account link for an Express connected account, you can’t read or update its KYC information.\n#Security tip\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n#Handle the connected account returning to your platform\nConnect Onboarding requires you to pass both a returnurl and refreshurl to handle all cases where the connected account is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your connected account.\n`returnurl``refreshurl`#### Note\nYou can use HTTP for your returnurl and refreshurl while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n`returnurl``refreshurl`#### returnurl\nStripe issues a redirect to this URL when the connected account completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\nNo state is passed through this URL. After a connected account is redirected to your returnurl, check the state of the detailssubmitted parameter on their account by doing either of the following:\n`returnurl``detailssubmitted`- Listen to account.updated events with a Connect webhook.\n• Retrieve the account with the API.\n`account.updated`#### refreshurl\nYour connected account is redirected to the refreshurl in these cases:\n`refreshurl`- The link is expired (a few minutes passed after the link was created).\n• They already visited the URL (they refreshed the page or clicked back or forward in the browser).\n• Your platform can no longer access the account.\n• The account has been rejected.\nSet up your refreshurl to trigger a method on your server to call Account Links again with the same parameters, and redirect the connected account to the Connect Onboarding flow to create a seamless experience.\n`refreshurl`## Handle connected accounts that have not completed onboarding\nA connected account that’s redirected to your returnurl might not have completed the onboarding process. Retrieve their account and check for chargesenabled. If the account isn’t fully onboarded, provide UI prompts to allow them to continue onboarding later. They can complete their account activation through a new account link (generated by your integration). You can check the state of the detailssubmitted parameter on their account to see if they’ve completed the onboarding process.\n`returnurl``chargesenabled``details_submitted`## See also\n• Express Dashboard\n• Integrate the Express Dashboard\n• Customize the Express Dashboard"}, {"path": "connect\\express-dashboard-taxes.md", "url": "https://docs.stripe.com/connect/express-dashboard-taxes", "content": "#Deliver tax forms with an interface built by Stripe | Stripe Documentation\nURL: https://docs.stripe.com/connect/express-dashboard-taxes\n\n#Deliver tax forms with an interface built by Stripe\n#Learn how to e-deliver tax forms to connected accounts with an interface built by Stripe.\n#How does e-delivery through an interface built by Stripe work for connected accounts?\nStripe Express Dashboard\nStarting with tax season 2021, Stripe enabled e-delivery of tax forms through the Stripe Express Dashboard. Your connected accounts can use Stripe Express to manage their tax forms, update their tax information, and manage their tax form delivery preferences. Learn more about working with your users to collect verified tax information for the upcoming tax season in the 1099 Tax Support and Communication Guide.\n#Note\nReview a detailed product walk-through of the Stripe Express dashboard and Stripe outreach to your eligible connected accounts.\nConnect Embedded Components\nStarting with tax season 2024, Stripe enabled e-delivery of tax forms through Connect embedded components. Your connected account owners can access the components to manage their tax forms, update their tax information, and manage their tax form delivery preferences.\n#Which connected accounts have access to e-delivery through an interface built by Stripe?\nAccess to e-delivery though Connect embedded components is only if you enabled delivery through an interface built by Stripe and have set up the embedded components, including having component links configured.\nE-delivery through the Stripe Express Dashboard is available to connected accounts that already have access to the Express dashboard and accounts where you have built and managed the full experience otherwise. If you set up Connect embedded components or didn’t enable delivery through an interface built by Stripe, we won’t invite your Connected accounts to the Stripe Express Dashboard.\nThere are a few notable exceptions that might affect eligibility for e-delivery. For most platforms, these exceptions include less than 2% of connected accounts. For the accounts that aren’t eligible for e-delivery, Stripe can support postal deliveries to the address on file.\n#How do I enable outreach using an interface built by Stripe to collect identity information and e-delivery consent ahead of tax season?\nCollection of tax identity information and e-delivery consent early in the tax season is critical for enabling a smooth tax season. If your platform opts for e-delivery through the interface built by Stripe and enables collection of tax information in advance using 1099 tax form settings, Stripe emails platforms’ connected accounts starting the week of November 4, 2024 to confirm their tax information and provide e-delivery consent through that interface. We don’t send outreach emails to platforms’ connected accounts until 7 days after you enable the setting.\nThis outreach from Stripe gives connected account owners an opportunity to review and update their tax information and confirm their delivery preferences before you file with the IRS, which maximizes e-delivery opt-in rates, speeds up tax form delivery, and minimizes errors on finalized 1099 forms.\nIf you don’t enable collection of tax information in advance and only configure e-delivery, postal delivery initiates at the time you file for any accounts that have not provided e-delivery consent. If accounts provide consent after you file, that consent is applicable only for the next tax year.\n#When can my connected account owners access the tax information on an interface built by Stripe?\nStripe Express Dashboard\nConnected account owners that currently do not have access but are eligible for it can view the Stripe Express Dashboard and the tax forms page starting in November 2024 after receiving the email invitation from Stripe. This will be triggered if you choose to turn on e-delivery of your tax forms through the Express Dashboard and enable early collection of tax information and delivery preferences under your 1099 tax settings.\nCurrently, connected account owners with existing access to the Express Dashboard can edit their tax information. When you opt your platform in to e-delivery, your connected owners see the tax forms page with a row for your platform.\nConnect Embedded Components\nIt is up to you when you implement the Account Management component to allow your users to edit their account information. Before pre-filing confirmation begins on November 4, when you opt your platform in to e-delivery your connected accounts will see the “Tax form details” section with the option to update their delivery method.\n#How does a connected account without current access gain access to the Stripe Express Dashboard?\nConnected account owners that are eligible for access to the Express Dashboard receive an invite from Stripe to confirm their tax information starting in November 2024. These emails include a link to Stripe Express Dashboard Account claims. For connected account owners who’ve never claimed their account and accessed the Stripe Express Dashboard, we first gather their email and phone number to set up their credentials. After that, we present them with a series of identity verification questions (Name, TIN, and DOB) to validate that they do own the account. If they fail these challenges, we provide follow-up questions such as address, Bank Last 4, and last payout amount from the platform to verify their identity. If they fail these questions after multiple attempts, we kick-off a manual review through Stripe Express support.\n#Which email address does Stripe use for e-delivery?\nFor connected accounts that have access to the Express dashboard from onboarding: Stripe already has emails associated with these users that are collected at onboarding. For these accounts, Stripe emails the primary user associated with the account. Multi-user Express Dashboard accounts aren’t supported.\nIf an eligible connected account without current access claimed their account on Stripe Express with a valid email address and phone number, the email address they used to sign up is what Stripe uses. Otherwise, Stripe uses the email address on the account.\nStripe can’t deliver forms electronically if there is no email address on the account. Instead, Stripe attempts to deliver paper forms if a valid address is on the tax form and you opted in to paper delivery.\n#Why do emails need to be updated for connected accounts?\nWe need updated emails as part of pre-filing confirmation and e-delivery outreach.\nIf you are using e-delivery with the Stripe Express dashboard:\n• In order for a connected account to onboard, log in, or access their tax forms, they need to be able to receive the email from Stripe inviting them to create their account.\n• If a user has updated their email, they must contact your platform for assistance updating their connected account email because Stripe can only resend these emails to the address on file.\n• You only need to update emails on behalf of the connected account before they’ve claimed their accounts. After they claim the account, then Stripe is able to assist your users with updating their emails.\n#How do I update the email address?\nYou can update the email addresses on your connected accounts in the following ways. These updates carry year over year:\n• Use the Update API.\n• Use the CSV import functionality on the Emails page in the Dashboard.\n• Edit the email addresses in the Payee Details section in the 1099 dashboard.\nYou can’t update email addresses using the emailaddress field in a CSV import directly into the 1099 product. Changes made using this method don’t carry over each year.\n`emailaddress`## How do connected accounts edit their information?\nAs your connected accounts onboard to the Stripe Express Dashboard, account owners can edit their account details within the Tax reporting page. they’re able to edit their name, their TIN, and their address, but they aren’t able to change their date of birth or their entity type. For date of birth and entity updates, account owners need to contact Stripe Support.\nIf you are instead using embedded components, your users can edit their account details in the Account Management component.\n#What else can a connected account manage using an interface built by Stripe?\nStripe Express Dashboard\nThe Stripe Express Dashboard also includes the Earnings page, which displays connected accounts’ upcoming payouts and earnings history through the activity feed. The activity feed shows transactions from your platform that affect connected accounts’ balances, such as payments, refunds, transfers, and payouts.\nIn the Account settings, connected account owners can update account details including legal entity information and personal information such as name, address, and taxpayer identification numbers, and view and update their bank account information for payouts.\nConnect Embedded Components\nThe Account Management component also includes the ability to view and edit account information such as personal or business information, public information, and payout bank accounts.\nThe Documents component includes documents such as 1099 tax forms and tax invoices.\n#How are tax forms kept in sync between the platform and the connected account?\nThe Tax reporting view in the platform dashboard is still the main place to generate, correct, split, and file 1099s for your connected accounts. Edits made by connected account owners (Name, Social Security Number or Employer Identification Number, address) update your connected accounts and thus the forms in the Tax reporting view in the Dashboard (unless Tax form information was overriden) until they’re filed. For any updates made by a connected account after the filing date, you are given the choice to either correct the tax form or leave the tax form as is. Updates might take up to 24 hours to sync due to TIN aggregation done by Stripe. Note, we stop syncing connected account information with the Tax reporting dashboard for the tax year on February 14.\nStripe doesn’t share the updated sensitive PII (such as SSN or EIN) from accounts with your platform through the API for security reasons.\n#Can I collect consent for e-delivery through a surface built by Stripe?\nYes, you can collect consent for e-delivery through the Stripe Express Dashboard and the Account Management embedded component. Connected accounts can only view their tax forms after providing e-delivery consent. In the Express Dashboard, after providing e-delivery consent, connected accounts are provided with the option to request an optional paper copy. You can update the e-delivery consent for an individual form through either the Form Editor UI on the 1099 Dashboard or using a CSV import using the ‘e-delivery consent’ field from Jan 2023.\n#Note\nConnected accounts are directed to your support team if they would like to revoke e-delivery consent.\n#How do connected accounts get alerted when their 1099 forms are available?\nStripe sends an email notification to your connected accounts when their 1099 forms are available. This email includes both Stripe’s logo and your platform’s logo. The platform logo is taken from your Connect branding settings, so please make sure this is up to date before the week of November 4, 2024.\nFor connected accounts where you own the full experience otherwise, make sure that you also update email addresses on the accounts before the week of November 4, 2024 so Stripe can email them the following week.  You can update this information using the Accounts API. Express connected accounts already have a user associated with them, and Stripe emails tax forms to the primary user associated with the account.\n#How should I prepare my connected accounts for e-delivery and the upcoming tax season?\nPrepare your connected accounts:\nCreate a support article with information for your connected account owners to let them know that their 1099s will be delivered by Stripe and that they should expect to receive an email from Stripe in January. See an example.\nCommunicate with all eligible connected account owners to let them know they should expect to receive an email from Stripe. This helps with maximizing opt-in to e-delivery and minimizing concerns about phishing.\n#Sample language for communicating with your connected account users\nSubject: Our tax partner Stripe will be sending you an important email. Body: “In the next few days, you will receive an email from Stripe with a link to download your 1099 tax form.  partners with Stripe to facilitate payments and tax reporting, including 1099 forms. We recommend adding  to your address book so the email isn’t marked as spam. When you receive the email, please click into it and follow the instructions to confirm your tax details.”\n#Note\nThe email communications are sent from can be found in your communication settings, where you can also customize the domain.\n#How do I navigate to prior years tax forms?\nIn the Express dashboard, choose the year in the drop-down to look for past years’ forms. In the embedded component, it is in the list of documents.\nForms for 2019 or earlier aren’t available through your Dashboard. These forms might be filed through a different system called Payable. If you used Stripe during that period of time, please reach out to support to get the tax forms you need.\n#Why are my users being asked to enter the last four digits of their TIN to download their forms?\nConnected account owners who have consented to e-delivery must pass a TIN validation to download their tax forms as an added layer of security. The key here is that they must enter the last four digits of the TIN exactly as it appears on their 1099 tax form. For Prior Years tax forms, we present a similar TIN challenge to enter the last four digits for the TIN as it appears on that particular form. If your platform didn’t use Stripe in the past to file 1099s, then those forms aren’t available in an interface built by Stripe.\n#Why are connected account owners having issues validating their TIN?\nYour users might run into issues downloading their 1099 tax forms if they have updated the TIN on their connected account, if your platform has overwritten the TIN on the 1099 tax form, if they’ve simply forgotten the TIN that appears on the tax form, or if they recently received a new TIN from the IRS and it isn’t in their system yet.\nIn these instances, users reach out to your platform so that you can work with your users to confirm what TIN appears on the 1099 tax form or assist them with getting a corrected version of their 1099 tax form. You can also download the user’s tax form from the Tax reporting dashboard and email it to them directly. Only team members with the Tax Analyst role are able to access this information.\n#Why are payouts blocked, restricted, or show as restricted soon for my account?\nYour connected account might get blocked after they update their information for a few different reasons:\n• If you have applied a capability such as a 1099 capability, and they update their name or TIN to a value that doesn’t match against the IRS database then they must update their information with a valid name and TIN combination.\n• If your connected account was verified previously and changes their name or TIN, they’re prompted to re-sign a Terms of Service agreement. Failure to do so might result in payouts being blocked until your account re-signs their Terms of Service agreement.\n• If your connected account updates their details with values that can’t be verified against standard government databases, they might be asked to upload proof of identity that helps Stripe identify them. Failure to do so results in payouts being blocked. Your accounts can go into an interface built by Stripe and submit proof of identity.\n#Are Taxpayer Identification Numbers (TINs) checked against the IRS database?\nTIN is verified against the IRS database if:\n• You have applied the 1099-K, 1099-MISC, or any other capabilities that require a verified TIN, and\n• The connected account meets the threshold for the applied capability.\nConnected accounts that enter an incorrect Name-TIN combination might see their payouts paused until they update their Name and TIN with verified information.\n#I made a correction to a 1099, how long does this take to sync?\nYou can correct only tax forms that the IRS has accepted. To start a correction, update the data in the tax forms. You can use either the Tax form editor or CSV export to update the tax form. After you update the form, select the updated form on the Tax reporting page, then click Correct to create a correction. It can take up to 48 to 72 hours after the platform files the correction for the payee notification.\n#Are my connected accounts able to consolidate their view of taxes across platforms?\nIf you are choosing to deliver to the Express Dashboard, as they get paid from different platforms, Stripe Express users can add each platform to the same Stripe Express accounts to create a single view of their earnings and their tax forms.\n#Is there a Stripe support address we can direct users to in our help center or is this only available in the onboarding flow of the Express Dashboard?\nIf you are choosing to deliver to the Express Dashboard, direct users to https://support.stripe.com/express. From here they can contact Stripe which ensures their questions are routed to a specialized support group best able to help them.\n#If a connected account owner consents to e-delivery, do they still get a mailed copy?\nIf the platform has paper delivery enabled, Stripe presents the connected account owner with the option to request this method of delivery. If they select this option, then Stripe mails the paper copy of their tax form to the address the platform has on file. Note the option to also request a paper copy is currently only available in the Stripe Express Dashboard.\n#What tax details are prompted for during the pre-verification?\nFor merchants set up as US Companies, Stripe’s 1099 product uses the business tax details except when they’re set up as a single member LLC or sole proprietorship, in which case it uses the owner’s personal tax details because those account types are disregarded entities for income tax purposes according to the IRS. For Individuals, Stripe uses personal tax details. For more information, refer to Updating 1099 tax form details for connected accounts.\nIf a connected account requests to use their business tax details on their 1099 tax form, and you want to support that, you can make the changes by collecting the business tax details from the user, and updating the 1099 tax forms using CSV import or the Tax Form Editor once tax form totals are finalized in January.\n#How can a connected account get their invitation email sent again?\nThe connected account owner can request a new invitation link that’s sent to their email. Direct them to this support page to resend their own invitation email. Ineligible users (connected accounts that didn’t meet the 2024 threshold of $600 for NEC/MISC or $5,000 and 0 transactions for K) don’t receive an email from Stripe.\n#My connected account did not receive a pre-filing confirmation email\nTo check whether your connected account has received an email invite, go to the 1099 Dashboard page. If the pre-filing confirmation status is Sent, Stripe attempted outreach to your user. If the status is Queued or Not eligible, like the example below, Stripe hasn’t sent an invite yet.\nTo send your user the pre-filling confirmation email, first confirm that their email address in Stripe is correct. Then, follow these steps:\nIf Stripe hasn’t sent the pre-filing confirmation email, confirm that your user’s email in Stripe matches the email where they expect to receive the tax form.\nTo update your user’s email address, follow the steps below. Learn more about other ways to update emails for your accounts.\n#My connected account was locked out of their Stripe Express account for failing the verification process. How can I resolve this issue?\nConnected accounts must claim their Stripe Express accounts in order to view the Tax Forms page in the Stripe Express Dashboard. To authorize the claim, Stripe asks the user a series of questions to verify their identity. For security reasons, if the user fails to correctly answer the verification questions too many times, Stripe locks their account. You can see the status in the 1099 dashboard. A status of “Not claimed, no attempts left” means the connected account is locked. A “Claimed” status means the connected account claimed their Stripe account.\nYou can reset your user’s claim attempts in the 1099 Dashboard. Before removing them from manual review, we recommend reviewing and updating account claim information (such as representative name, address, SSN, EIN, and DOB) with your connected account. Otherwise, the account might continue to fail to claim their Express account.\nIf there’s a mismatch between the information you have on file and what your user expects, you can update their connected account directly. You can’t make updates in the 1099 Dashboard and you must have the correct user role."}, {"path": "connect\\express-dashboard.md", "url": "https://docs.stripe.com/connect/express-dashboard", "content": "#Express Dashboard | Stripe Documentation\nURL: https://docs.stripe.com/connect/express-dashboard\n\n#Express Dashboard\n#Learn about the features of the Express Dashboard.\nThe Express Dashboard is a user interface that’s available to your platform’s connected accounts. They can use the Express Dashboard to monitor their available balance, view upcoming payouts, and track their earnings in real time. This guide outlines the features of the Express Dashboard and how your connected accounts can access it.\n#Express Dashboard features\nThe Express Dashboard displays the connected account’s balance transactions and net volume.\n#Transactions list\nThe Transactions list displays a connected account’s balance transactions, including charges, transfers, and payouts. The Transactions list organizes each transaction by type, date, and amount. By default, it displays generic descriptions of charges and transfers, such as Payment from {YOUR PLATFORM}. To learn how to create custom descriptions, see Customize the Express Dashboard.\n`Payment from {YOUR PLATFORM}`### Earnings chart\nThe Earnings chart displays the net volume of the account’s charges and transfers over time. They can select different time intervals to view.\n#Accessing the Express Dashboard\nThere are two ways to access the Express Dashboard, login links and self-service. We recommend using login links.\n#Platform login links\nYou can generate single-use account-specific login links that redirect connected accounts from your platform application to the Express Dashboard login page. They then log into the Dashboard using SMS authentication.\nTo learn about using login links, see Integrate the Express Dashboard in your platform.\n#Self-serve access\nConnected accounts can access the Express Dashboard by logging into Stripe Express using their account email and SMS authentication.\n#Note\nOnly live mode accounts can log into Stripe Express. For testing, use login links.\nTo learn more about self-serve access, see the Stripe Express support article.\n#Supported browsers\nThe Express Dashboard supports the same browsers that the full Stripe Dashboard supports. Express users must access the Dashboard in a web browser, not in embedded web views inside mobile or desktop applications.\n#See also\n• Integrate the Express Dashboard\n• Customize the Express Dashboard"}, {"path": "connect\\file-tax-forms.md", "url": "https://docs.stripe.com/connect/file-tax-forms", "content": "#File your 1099 tax forms | Stripe Documentation\nURL: https://docs.stripe.com/connect/file-tax-forms\n\n#File your 1099 tax forms\n#Learn how to file 1099 forms with the appropriate revenue authorities, such as the IRS and state tax authorities.\nBefore you can file your 1099 tax forms, you must ensure they’re complete and accurate.\n#Getting your 1099 Forms\nIf you work for or use a platform that pays you through Stripe and want to learn about your 1099 forms and how to retrieve them, see 1099 tax forms.\n#Obtain “Ready” status\nStripe categorizes your tax forms as follows:\n• Will not file\n• Needs attention\n• Ready\nStripe automatically identifies forms if they exceed the IRS or state filing thresholds as Ready or Needs attention:\n`Ready``Needs attention`You must obtain a Ready status before you can file your tax forms.\n`Ready`Forms in Needs attention status might be missing the name, taxpayer identification number (TIN), or part of the address. You can provide missing information by updating the connected account or updating the tax form.\n`Needs attention`Forms with federal filing status or state filing status of Will not file are below either the IRS or State thresholds. When a form doesn’t meet the threshold set at the federal or state level it’s not filed with that respective tax authority. You can file tax forms that are below the threshold or are incomplete by specifying filing requirements in a CSV import. You can also use filing requirements to omit a tax form from filing.\n`Will not file`## “Ready” or “Needs Attention” forms that appear to be below threshold\nSome forms with totals that might seem below the federal threshold can also show up as Ready or Needs Attention for two reasons:\n`Ready``Needs Attention`- Grouped TIN\n• The state threshold is lower than the IRS threshold\n#Grouped TIN\nPer IRS regulations, when multiple forms share the same Tax Identification Number (TIN), Stripe calculates each form’s filing eligibility based on the aggregate total of all those forms. As a result, an individual form that appears to be below the IRS threshold can still require filing because the total amount of all forms sharing its TIN exceeds the threshold.\nWhen Stripe calculates the aggregate total of forms that share the same TIN, it includes a maximum of 100 forms. If you have more than 100 forms that share the same TIN, manually verify their filing eligibility.\nStripe files each form separately, regardless of whether it shares a TIN with other forms.\nIf an account is grouped, you will see this in the Dashboard:\nTo determine which forms share the same TIN, enter the ID of the form in the Forms grouped with filter and apply the filter.\n#The state threshold is lower than the IRS threshold\nAnother reason why a form might appear as Ready or Needs attention for the IRS is that the form needs to be filed to a state that is part of the Combined Federal and State Filing (CFSF) program. For CFSF states, forms filed to the IRS are automatically forwarded to the appropriate state, eliminating the need to file separately to the state. Check the 1099 form requirements by state section to determine which states are part of the CFSF program and have lower state filing thresholds than the IRS.\n`Ready``Needs attention`## Confirm tax form settings\nConfirm the accuracy of your payer information and tax form settings before filing. You’ll reconfirm some tax form settings in the filing process, but you should also confirm the tax form settings before filing.\n#File your tax forms\nWhen you’re ready to file, perform one final check of the forms that are in a Ready state. Clicking the File button automatically pulls forms in a Ready state (or Ready! If you applied filing requirements) into the filing process.\n`Ready``Ready``Ready!`If needed, you can complete the filing process more than once and file forms in batches as they become Ready. The forms for the IRS and the States will be filed at the same time. Currently, there’s no option to file forms with the IRS and States separately.\n`Ready`#### Caution\nIf you have forms in a Needs Attention state and want to file them as they are, you can override the form status by explicitly updating the filing requirement.\n`Needs Attention`From the Tax reporting view in the Dashboard, click the File button to begin the filing process.\nConfirm your payer information. To change any payer information, close the filing process and go to your tax form settings. If you file forms with incorrect payer information, the IRS requires you to mail a letter with the corrections.\nNext, confirm the settings for specific tax form types. To change the settings, close the filing process and go to your tax form settings.\nFinally, accept a standard IRS penalty of perjury statement. Click the File tax forms button to queue your tax forms for automatic filing with the IRS.\nIf you aren’t filing any 1099 tax form corrections, you can disregard delivery preferences for form corrections. Choose either Mail or None and proceed with filing your forms. Tax forms will be delivered according to your delivery settings.\nAccept an IRS penalty of perjury statement\nAfter you click File tax forms, a Success message displays.\n#After filing your 1099 tax forms\nAfter you submit your filing request, Stripe collects and transmits your forms to the IRS and applicable state reporting agencies, and delivers forms to your connected accounts based on your delivery settings.\nIf you’ve enabled e-delivery, Stripe immediately emails your connected accounts so they can access forms in the Stripe Express Dashboard. For postal delivery, USPS first class mail can take up to 10 business days.\nIf you need to file a form with both the IRS and the state, the form is sent only one time to the connected account user. For more information, see Deliver tax forms.\n#Understand tax form status\nTo help you determine if you need to take action on any forms, the status of filed tax forms updates automatically.\n#Federal Filing Status:\nThe IRS typically responds to us within 5 business days. At that point, you can expect to see the Federal filing status change from Filed to either Accepted or Rejected. Learn more about common rejection reasons.\n`Filed``Accepted``Rejected`### State filing Status\nStates have varied timelines for submission results. In most cases, state filings can take up to 14 days for the State filing status to move from Filed to either Accepted or Rejected. Learn more about common rejection reasons.\n`Filed``Accepted``Rejected`#### Note\nThe Rejected status implies that the form was either rejected by the State after submission, or that the State refused to accept the information during submission.\n`Rejected`### Delivery status\nFor electronic delivery, the delivery status changes to Delivered a few minutes after the email is delivered.\n`Delivered`For postal mail, the delivery status changes to Delivered after Stripe’s postal delivery partner confirms that the mailing is delivered. That can take several days.\n`Delivered`A delivery status of Failed means that an issue prevented the mailing from being completed. This typically occurs when the mailing address on file contains errors.\n`Failed`"}, {"path": "connect\\get-started-connect-embedded-components.md", "url": "https://docs.stripe.com/connect/get-started-connect-embedded-components", "content": "#Get started with Connect embedded components | Stripe Documentation\nURL: https://docs.stripe.com/connect/get-started-connect-embedded-components\n\n#Get started with Connect embedded components\n#Learn how to embed dashboard functionality into your website.\nUse Connect embedded components to add connected account dashboard functionality to your website. These libraries and their supporting API allow you to grant your users access to Stripe products directly in your dashboard.\nFor an immersive version of this guide, see the Connect embedded components integration quickstart. You can also download a sample integration from there. To customize the appearance of Connect embedded components, use the appearance options when you initialize StripeConnectInstance. See the full list of appearance parameters.\n`appearance``StripeConnectInstance`## Initialize Connect.jsClient-sideServer-side\nStripe uses an AccountSession to express your intent to delegate API access to your connected account.\nThe AccountSessions API returns a client secret that allows an embedded component in the web client to access a connected account’s resources as if you were making the API calls for them.\n#Create an AccountSession Server\nIn a single page application, your client initiates a request to obtain the account session to your server. You can create a new endpoint on your server that returns the client secret to the browser:\nrequire 'sinatra'\nrequire 'stripe'\n#This is a placeholder - it should be replaced with your secret API key.\n#Sign in to see your own test API key embedded in code samples.\n#Don’t submit any personally identifiable information in requests made with this key.\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\npost '/accountsession' do\n  contenttype 'application/json'\n  # Create an AccountSession\n  begin\n    accountsession = Stripe::AccountSession.create({\n      account: '{{CONNECTEDACCOUNTID}}',\n      components: {\n        payments: {\n          enabled: true,\n          features: {\n            refundmanagement: true,\n            disputemanagement: true,\n            capturepayments: true\n          }\n        }\n      }\n    })\n    {\n      clientsecret: accountsession[:clientsecret]\n    }.tojson\n  rescue => error\n    puts \"An error occurred when calling the Stripe API to create an account session: #{error.message}\";\n    return [500, { error: error.message }.tojson]\n  end\nend\n`require 'sinatra'\nrequire 'stripe'\n#This is a placeholder - it should be replaced with your secret API key.\n#Sign in to see your own test API key embedded in code samples.\n#Don’t submit any personally identifiable information in requests made with this key.\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\npost '/accountsession' do\n  contenttype 'application/json'\n  # Create an AccountSession\n  begin\n    accountsession = Stripe::AccountSession.create({\n      account: '{{CONNECTEDACCOUNTID}}',\n      components: {\n        payments: {\n          enabled: true,\n          features: {\n            refundmanagement: true,\n            disputemanagement: true,\n            capturepayments: true\n          }\n        }\n      }\n    })\n    {\n      clientsecret: accountsession[:clientsecret]\n    }.tojson\n  rescue => error\n    puts \"An error occurred when calling the Stripe API to create an account session: #{error.message}\";\n    return [500, { error: error.message }.tojson]\n  end\nend`### Create Account Session API\nThe Create Account Session API determines component and feature access for Connect embedded components. Stripe enforces these parameters for any components that correspond to the account session. If your site supports multiple user roles, make sure components and features that are enabled for that account session correspond to the current user’s role.  For example, you can enable refund management only for administrators of your site, but not for other users. To make sure user role access are enforced, your back end must host the logic that maps your site’s user role to account session components.\n#Set up Connect.js Client\nWe recommend setting up Connect.js with npm as shown in the following example, but it’s also possible without npm.\nInstall the npm package to use Connect.js as a module.\nnpm install --save @stripe/connect-js\n`npm install --save @stripe/connect-js`### Load and initialize Connect.js Client\nCall loadConnectAndInitialize with your publishable key and a function that retrieves a client secret by calling the new endpoint you created on your server. Use the returned StripeConnectInstance to create embedded components. After initializing Connect.js, you can mount components to or unmount components from the DOM at any time. That includes any elements rendered inside React or Vue portals.\n`loadConnectAndInitialize``StripeConnectInstance`To create a component, call create on the StripeConnectInstance that you created above, then pass in the component name. This returns a custom element that Connect.js registers and uses to automatically wire your DOM up to Stripe. You can then append this element to your DOM.\n`create``StripeConnectInstance``append`Call create with payments, then add the result to your DOM to render a payments UI.\n`create``payments`  \n  Payments\n  \n  Something went wrong!\n`\n  \n  Payments\n  \n  Something went wrong!\n`import {loadConnectAndInitialize} from '@stripe/connect-js';\nconst fetchClientSecret = async () => {\n  // Fetch the AccountSession client secret\n  const response = await fetch('/accountsession', { method: \"POST\" });\n  if (!response.ok) {\n    // Handle errors on the client side here\n    const {error} = await response.json();\n    console.error('An error occurred: ', error);\n    document.querySelector('#error').removeAttribute('hidden');\n    return undefined;\n  } else {\n    const {clientsecret: clientSecret} = await response.json();\n    document.querySelector('#error').setAttribute('hidden', '');\n    return clientSecret;\n  }\n}\nconst stripeConnectInstance = loadConnectAndInitialize({\n    // This is a placeholder - it should be replaced with your publishable API key.\n    // Sign in to see your own test API key embedded in code samples.\n    // Don’t submit any personally identifiable information in requests made with this key.\n    publishableKey: \"pktestf3duw0VsAEM2TJFMtWQ90QAT\",\n    fetchClientSecret: fetchClientSecret,\n  });\nconst paymentComponent = stripeConnectInstance.create(\"payments\");\nconst container = document.getElementById(\"container\");\ncontainer.appendChild(paymentComponent);\n`import {loadConnectAndInitialize} from '@stripe/connect-js';\nconst fetchClientSecret = async () => {\n  // Fetch the AccountSession client secret\n  const response = await fetch('/accountsession', { method: \"POST\" });\n  if (!response.ok) {\n    // Handle errors on the client side here\n    const {error} = await response.json();\n    console.error('An error occurred: ', error);\n    document.querySelector('#error').removeAttribute('hidden');\n    return undefined;\n  } else {\n    const {clientsecret: clientSecret} = await response.json();\n    document.querySelector('#error').setAttribute('hidden', '');\n    return clientSecret;\n  }\n}\nconst stripeConnectInstance = loadConnectAndInitialize({\n    // This is a placeholder - it should be replaced with your publishable API key.\n    // Sign in to see your own test API key embedded in code samples.\n    // Don’t submit any personally identifiable information in requests made with this key.\n    publishableKey: \"pktestf3duw0VsAEM2TJFMtWQ90QAT\",\n    fetchClientSecret: fetchClientSecret,\n  });\nconst paymentComponent = stripeConnectInstance.create(\"payments\");\nconst container = document.getElementById(\"container\");\ncontainer.appendChild(paymentComponent);`See a complete list of supported embedded components →\n#Configure Connect.jsClient-side\nThe loadConnectAndInitialize method on the client takes several different options to configure Connect.js.\n`loadConnectAndInitialize`| Option | Description |  |\n --- | --- | --- \n publishableKey | The publishable key for your integration. | required \n fetchClientSecret | The function that retrieves the client secret returned by /v1/accountsessions. This tells StripeConnectInstance which account to delegate access to. This function is also used to retrieve a client secret function to refresh the session when it expires. | required \n appearance | An object to customize the look of Connect embedded components. | optional \n locale | A parameter to specify the locale that Connect embedded components use. The locale defaults to the browser language. If the specified locale isn’t directly supported, we use a reasonable alternative (for example fr-be might fall back to fr-fr). See localization for the list of supported locales. | optional \n fonts | An array of custom fonts available for use by any embedded components created from a StripeConnectInstance. You can specify fonts as CssFontSource or CustomFontSource objects. | optional \n`publishableKey``fetchClientSecret``/v1/accountsessions``StripeConnectInstance``appearance``locale``fr-be``fr-fr``fonts``StripeConnectInstance`### Customize the look of Connect embedded components\nThe embedded components Figma UI toolkit contains every component, common patterns, and an example application. You can use it to visualize and design embedded UIs on your website.\nWe offer a set of options to customize the look and feel of Connect embedded components. These customizations affect buttons, icons, and other accents in our design system.\n#Necessary popups\nSome behavior in embedded components, such as user authentication, must be presented in a popup. You can’t customize the embedded component to eliminate such popups.\nYou can set these options when initializing StripeConnectInstance by passing an Appearance to the appearance object. You can only use the Connect.js options to modify styles in Connect embedded components. The font family and background color of Connect embedded components can be overridden with CSS selectors, but Stripe doesn’t support overriding any other styles.\n`StripeConnectInstance``appearance`const stripeConnectInstance = loadConnectAndInitialize({\n  publishableKey: \"pktestf3duw0VsAEM2TJFMtWQ90QAT\",\n  fetchClientSecret: fetchClientSecret,\n  fonts: [\n    {\n      cssSrc: \"https://myfonts.example.com/mycssfile.css\",\n    },\n    {\n      src: `url(https://my-domain.com/assets/my-font-2.woff)`,\n      family: 'My Font'\n    }\n  ],\n  appearance: {\n    // See all possible variables below\n    overlays: \"dialog\",\n    variables: {\n      fontFamily: 'My Font',\n      colorPrimary: \"#FF0000\",\n    },\n  },\n});\n`const stripeConnectInstance = loadConnectAndInitialize({\n  publishableKey: \"pktestf3duw0VsAEM2TJFMtWQ90QAT\",\n  fetchClientSecret: fetchClientSecret,\n  fonts: [\n    {\n      cssSrc: \"https://myfonts.example.com/mycssfile.css\",\n    },\n    {\n      src: `url(https://my-domain.com/assets/my-font-2.woff)`,\n      family: 'My Font'\n    }\n  ],\n  appearance: {\n    // See all possible variables below\n    overlays: \"dialog\",\n    variables: {\n      fontFamily: 'My Font',\n      colorPrimary: \"#FF0000\",\n    },\n  },\n});`### The fonts object\nThe fonts object in stripeConnect.initialize takes an array of CssFontSource or CustomFontSource objects.\n`fonts``stripeConnect.initialize`If you use custom fonts on your page (for example, .woff or .tff files), you must specify the font files when initializing Connect embedded components. Doing so allows Connect embedded components to properly render the fonts. You can specify the files as:\n`.woff``.tff`#### CssFontSource\nUse this object to pass a stylesheet URL that defines your custom fonts when creating a StripeConnectInstance. With a CssFontSource object, your CSP configuration must allow fetching the domains associated with the CSS file URLs specified as CssFontSource.\n`StripeConnectInstance``CssFontSource`| Name | Type | Example value |\n cssSrc | string required | https://fonts.googleapis.com/css?family=Open+Sans \n A relative or absolute URL pointing to a CSS file with @font-face definitions. The file must be hosted on https. If you use a content security policy (CSP), the file might require additional directives. \n`cssSrc``required``https://fonts.googleapis.com/css?family=Open+Sans`#### CustomFontSource\nUse this object to pass custom fonts when creating a StripeConnectInstance.\n`StripeConnectInstance`| Name | Type | Example value |\n family | string required | Avenir \n The name to give the font. \n src | string required | url(https://my-domain.com/assets/avenir.woff) \n A valid src value pointing to your custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix. The file must be hosted on https. \n display | string optional | auto \n A valid font-display value. \n style | string optional | normal \n One of normal, italic, or oblique. \n unicodeRange | string optional | U+0-7F \n A valid unicode-range value. \n weight | string optional | 400 \n A valid font-weight. This is a string, not a number. \n`family``required``Avenir``src``required``url(https://my-domain.com/assets/avenir.woff)``.woff``.otf``.svg``display``optional``auto``style``optional``normal``normal``italic``oblique``unicodeRange``optional``U+0-7F``weight``optional``400`### The appearance object\nThe appearance object in loadConnectAndInitialize takes the following optional properties:\n`appearance``loadConnectAndInitialize`| Name | Type | Example value |\n overlays | ‘dialog’ (default) | ‘drawer’ | dialog \n The type of overlay used throughout the Connect.js design system. Set this to be either a Dialog or Drawer. \n variables | object | {colorPrimary: \"#0074D4\"} \n See the full list of appearance variables. \n`overlays``dialog``variables``{colorPrimary: \"#0074D4\"}`### Update Connect embedded components after initialization\nThe update method supports updating Connect embedded components after initialization. You can use it to switch appearance options at runtime (without refreshing the page). To do so, use the same stripeConnectInstance object you created with initialize and call the update method on it:\n`update``stripeConnectInstance``initialize``update`stripeConnectInstance.update({\n  appearance: {\n    variables: {\n      colorPrimary: \"#FF0000\",\n    },\n  },\n  locale: 'en-US',\n});\n`stripeConnectInstance.update({\n  appearance: {\n    variables: {\n      colorPrimary: \"#FF0000\",\n    },\n  },\n  locale: 'en-US',\n});`#### Note\nNot all options (for example, fonts) are updatable. The supported options for this method are a subset of the options offered in initialize. This supports updating the appearance and locale.\n`fonts``initialize``appearance``locale`### Width and height\nConnect embedded components behave like regular block HTML elements. By default, they take 100% of the width of their parent HTML element, and grow in height according to the content rendered inside. You can control the width of Connect embedded components by specifying the width of the HTML parent. You can’t directly control the height as that depends on the rendered content, however, you can limit the height with maxHeight and overflow: scroll, the same way you can with other HTML block elements.\n`block``width``width``width``height``maxHeight``overflow: scroll``block`## Authentication\nWe offer a set of APIs to manage account sessions and user credentials in Connect embedded components.\n#Refresh the client secret\nOn long running sessions, the session from the initially provided client secret might expire. When it expires, we automatically use fetchClientSecret to retrieve a new client secret and refresh the session. You don’t need to pass in any additional parameters.\n`fetchClientSecret`import { loadConnectAndInitialize } from \"@stripe/connect-js\";\n// Example method to retrieve the client secret from your server\nconst fetchClientSecret = async () => {\n  const response = await fetch('/accountsession', { method: \"POST\" });\n  const {clientsecret: clientSecret} = await response.json();\n  return clientSecret;\n}\nconst stripeConnectInstance = loadConnectAndInitialize({\n  publishableKey: \"{{PUBLISHABLEKEY}}\",\n  fetchClientSecret: fetchClientSecret,\n});\n`import { loadConnectAndInitialize } from \"@stripe/connect-js\";\n// Example method to retrieve the client secret from your server\nconst fetchClientSecret = async () => {\n  const response = await fetch('/accountsession', { method: \"POST\" });\n  const {clientsecret: clientSecret} = await response.json();\n  return clientSecret;\n}\nconst stripeConnectInstance = loadConnectAndInitialize({\n  publishableKey: \"{{PUBLISHABLEKEY}}\",\n  fetchClientSecret: fetchClientSecret,\n});`### Log out\nWe recommend that you call logout on the stripeConnectInstance to destroy the associated account session object after a user logs out of your app. This disables all Connect embedded components that link to that stripeConnectInstance.\n`logout``stripeConnectInstance``stripeConnectInstance`// Call this when your user logs out\nstripeConnectInstance.logout();\n`// Call this when your user logs out\nstripeConnectInstance.logout();`## CSP and HTTP header requirements\nIf your website implements a Content Security Policy, you need to update the policy by adding the following rules:\n• frame-src https://connect-js.stripe.com https://js.stripe.com\n• img-src https://.stripe.com\n• script-src https://connect-js.stripe.com https://js.stripe.com\n• style-src sha256-0hAheEzaMe6uXIKV4EehS9pu1am1lj/KnnzrOYqckXk= (SHA of empty style element)\n`frame-src``https://connect-js.stripe.com``https://js.stripe.com``img-src``https://.stripe.com``script-src``https://connect-js.stripe.com``https://js.stripe.com``style-src``sha256-0hAheEzaMe6uXIKV4EehS9pu1am1lj/KnnzrOYqckXk=`If you’re using a CSS file to load web fonts for use with Connect embedded components, its URL must be allowed by your connect-src CSP directive.\nSetting certain HTTP response headers enables the full functionality of Connect embedded components:\n• Cross-Origin-Opener-Policy, unsafe-none. This (unsafe-none) is the default value of the header, so not setting this header works. Other values such as same-origin break user authentication in Connect embedded components.\n`unsafe-none``unsafe-none``same-origin`## Supported browsers\nWe support the same set of browsers that the Stripe Dashboard currently supports:\n• The last 20 major versions of Chrome and Firefox\n• The last two major versions of Safari and Edge\n• The last two major versions of mobile Safari on iOS\nConnect embedded components are only supported in web browsers and can’t be used in embedded web views inside mobile or desktop applications.\n#Localization\nWhen initializing Connect.js, you can pass a locale parameter. To match an embedded component’s locale to your website’s locale, pass the locale parameter with the locale of the UI your website renders.\n`locale``locale`The default value of the locale parameter is determined by the browser configured locale. If the specified locale isn’t directly supported, a reasonable alternative is used (for example fr-be might fall back to fr-fr).\n`locale``fr-be``fr-fr`Connect embedded components support the following locales:\n Language | Locale code \n --- | --- \n Bulgarian (Bulgaria) | bg-BG \n Chinese (Simplified) | zh-Hans \n Chinese (Traditional - Hong Kong) | zh-Hant-HK \n Chinese (Traditional - Taiwan) | zh-Hant-TW \n Croatian (Croatia) | hr-HR \n Czech (Czechia) | cs-CZ \n Danish (Denmark) | da-DK \n Dutch (Netherlands) | nl-NL \n English (Australia) | en-AU \n English (India) | en-IN \n English (Ireland) | en-IE \n English (New Zealand) | en-NZ \n English (Singapore) | en-SG \n English (United Kingdom) | en-GB \n English (United States) | en-US \n Estonian (Estonia) | et-EE \n Filipino (Philippines) | fil-PH \n Finnish (Finland) | fi-FI \n French (Canada) | fr-CA \n French (France) | fr-FR \n German (Germany) | de-DE \n Greek (Greece) | el-GR \n Hungarian (Hungary) | hu-HU \n Indonesian (Indonesia) | id-ID \n Italian (Italy) | it-IT \n Japanese (Japan) | ja-JP \n Korean (South Korea) | ko-KR \n Latvian (Latvia) | lv-LV \n Lithuanian (Lithuania) | lt-LT \n Malay (Malaysia) | ms-MY \n Maltese (Malta) | mt-MT \n Norwegian Bokmål (Norway) | nb-NO \n Polish (Poland) | pl-PL \n Portuguese (Brazil) | pt-BR \n Portuguese (Portugal) | pt-PT \n Romanian (Romania) | ro-RO \n Slovak (Slovakia) | sk-SK \n Slovenian (Slovenia) | sl-SI \n Spanish (Argentina) | es-AR \n Spanish (Brazil) | es-BR \n Spanish (Latin America) | es-419 \n Spanish (Mexico) | es-MX \n Spanish (Spain) | es-ES \n Swedish (Sweden) | sv-SE \n Thai (Thailand) | th-TH \n Turkish (Türkiye) | tr-TR \n Vietnamese (Vietnam) | vi-VN \n`bg-BG``zh-Hans``zh-Hant-HK``zh-Hant-TW``hr-HR``cs-CZ``da-DK``nl-NL``en-AU``en-IN``en-IE``en-NZ``en-SG``en-GB``en-US``et-EE``fil-PH``fi-FI``fr-CA``fr-FR``de-DE``el-GR``hu-HU``id-ID``it-IT``ja-JP``ko-KR``lv-LV``lt-LT``ms-MY``mt-MT``nb-NO``pl-PL``pt-BR``pt-PT``ro-RO``sk-SK``sl-SI``es-AR``es-BR``es-419``es-MX``es-ES``sv-SE``th-TH``tr-TR``vi-VN`## Handle load errors\nIf a component fails to load, you can react to the failure by providing a load error handler to any embedded component. Depending on the cause of failure, the load error handler can be called multiple times. Any logic triggered by a load error handler must be idempotent.\n// Load errors are emitted by all components. We use Balances as an example here.\nconst balances = stripeConnectInstance.create('balances');\nbalances.setOnLoadError((loadError) => {\n  const componentName = loadError.elementTagName\n  const error = loadError.error\n  console.log(componentName + \" failed to load\")\n  console.log(`${error.type}: ${error.message}`);\n});\ncontainer.appendChild(balances);\n`// Load errors are emitted by all components. We use Balances as an example here.\nconst balances = stripeConnectInstance.create('balances');\nbalances.setOnLoadError((loadError) => {\n  const componentName = loadError.elementTagName\n  const error = loadError.error\n  console.log(componentName + \" failed to load\")\n  console.log(`${error.type}: ${error.message}`);\n});\ncontainer.appendChild(balances);`| Method | Description | Variables |\n --- | --- | --- \n setOnLoadError | The component executes this callback function when a load failure occurs. | loadError.error: See the load error objectloadError.elementTagName: The name of HTML tag used to render the component in the browser \n`setOnLoadError`- loadError.error: See the load error object\n• loadError.elementTagName: The name of HTML tag used to render the component in the browser\n`loadError.error``loadError.elementTagName`#### The load error object\n`error`Every time there’s a load failure, an error object is passed to the load error handler with the following properties.\n`error`| Name | Type | Example value |\n type | See types of load failures | authenticationerror \n The type of error \n message | string | undefined | Failed to fetch account session \n Further description about the error \n`type``authenticationerror``message``Failed to fetch account session`#### Types of load failures\nWhen a component fails to load, we detect the type of failure and map it to one of the types below. If the load error type can’t be determined it is marked as an apierror.\n`apierror`| Type | Description |\n --- | --- \n apiconnectionerror | Failure to connect to Stripe’s API \n authenticationerror | Failure to perform the authentication flow within Connect embedded components \n accountsessioncreateerror | Account session creation failed \n invalidrequesterror | Request failed with an 4xx status code, typically caused by platform configuration issues \n ratelimiterror | Request failed because an abnormal request rate was detected \n apierror | API errors covering any other type of problem, such as a temporary problem with Stripe’s servers \n`apiconnectionerror``authenticationerror``accountsessioncreateerror``invalidrequesterror``ratelimiterror``apierror`## Detect the display of embedded components\nAfter a component is created, no UI is displayed to users until the javascript for the component is loaded and parsed in the browser. This can cause components to appear to pop-in after they complete loading. To avoid this, display your own loading UI before the component is created and hide the UI after the component is displayed. All embedded components can accept a callback function that is called immediately before any UI is displayed to the user.\n`\n`// Loader start events are emitted by all components. We use Balances as an example here.\nconst container = document.getElementById('balances-container');\nconst balances = stripeConnectInstance.create('balances');\nbalances.setOnLoaderStart((event) => {\n  container.getElementById(\"spinner\").display = \"none\";\n  console.log(`${event.elementTagName} is visible to users`)\n});\ncontainer.appendChild(balances);\n`// Loader start events are emitted by all components. We use Balances as an example here.\nconst container = document.getElementById('balances-container');\nconst balances = stripeConnectInstance.create('balances');\nbalances.setOnLoaderStart((event) => {\n  container.getElementById(\"spinner\").display = \"none\";\n  console.log(`${event.elementTagName} is visible to users`)\n});\ncontainer.appendChild(balances);`| Method | Description | Variables |\n --- | --- | --- \n setOnLoaderStart | The component executes this callback function before any UI is displayed to the user. | event.elementTagName: The name of HTML tag used to render the component in the browser \n`setOnLoaderStart`- event.elementTagName: The name of HTML tag used to render the component in the browser\n`event.elementTagName`## Use Connect.js without npm\nWe recommend integrating with our javascript and React component wrappers, which simplify the loading of Connect embedded components and provide TypeScript definitions for our supported interfaces. If your build system currently doesn’t support taking a dependency on packages, you can integrate without these packages.\nManually add the Connect.js script tag to the  of each page on your site.\n`` -->\n` -->\n`After Connect.js completes loading, it initializes the global window variable StripeConnect and calls StripeConnect.onLoad, if defined. You can safely initialize Connect.js by setting up an onload function and calling StripeConnect.init with the same Connect.js options as loadConnectAndInitialize. You can use the Connect instance returned by init in the same way you use the instance returned by loadConnectAndInitialize to create embedded components in an HTML + JS integration.\n`StripeConnect``StripeConnect.onLoad``onload``StripeConnect.init``loadConnectAndInitialize``init``loadConnectAndInitialize`window.StripeConnect = window.StripeConnect || {};\nStripeConnect.onLoad = () => {\n  const stripeConnectInstance = StripeConnect.init({\n      // This is a placeholder - it should be replaced with your publishable API key.\n      // Sign in to see your own test API key embedded in code samples.\n      // Don’t submit any personally identifiable information in requests made with this key.\n      publishableKey: \"pktestf3duw0VsAEM2TJFMtWQ90QAT\",\n      fetchClientSecret: fetchClientSecret,\n    });\n  const payments = stripeConnectInstance.create('payments');\n  document.body.appendChild(payments);\n};\n`window.StripeConnect = window.StripeConnect || {};\nStripeConnect.onLoad = () => {\n  const stripeConnectInstance = StripeConnect.init({\n      // This is a placeholder - it should be replaced with your publishable API key.\n      // Sign in to see your own test API key embedded in code samples.\n      // Don’t submit any personally identifiable information in requests made with this key.\n      publishableKey: \"pktestf3duw0VsAEM2TJFMtWQ90QAT\",\n      fetchClientSecret: fetchClientSecret,\n    });\n  const payments = stripeConnectInstance.create('payments');\n  document.body.appendChild(payments);\n};`## User authentication in Connect embedded components\nConnect embedded components typically don’t require user authentication. In some scenarios, Connect embedded components require the connected account to sign in with their Stripe account to provide the necessary functionality (for example, writing information to the account legal entity in the case of the account onboarding component).\nAuthentication includes a popup to a Stripe-owned window. The connected account must authenticate before they can continue their workflow.\nThe following components require connected accounts to authenticate in certain scenarios:\n• Account Onboarding\n• Account Management\n• Balances\n• Payouts\n• Notification Banner\n• Financial Account\n• Issuing Cards List\nOther components might require authentication within the component after they initially render. Authentication for these components and scenarios is required for connected accounts where Stripe is responsible for collecting updated information when requirements change. For connected accounts where you’re responsible for collecting updated information when requirements are due or change, Stripe authentication is controlled by the disablestripeuser_authentication Account Session feature. We recommend implementing 2FA or equivalent security measures as a best practice. For account configurations that support this feature, like Custom, you assume liability for connected accounts if they can’t pay back negative balances."}, {"path": "connect\\get-started-tax-reporting.md", "url": "https://docs.stripe.com/connect/get-started-tax-reporting", "content": "#Get started with tax reporting | Stripe Documentation\nURL: https://docs.stripe.com/connect/get-started-tax-reporting\n\n#Get started with tax reporting\n#Use the Stripe 1099 tax reporting product to create, modify, file, and deliver tax forms for your connected accounts.\nStripe provides capabilities and a tax reporting dashboard to help platforms meet their tax reporting obligations.\nLog in to your Stripe account and use the Tax reporting view in the Dashboard to create, modify, file, and deliver 1099 tax forms for your connected accounts. If you use a team, only team members with the Tax Analyst or Administrator user role can access all tax-related features.\n#Tax season 2024 checklist\nFollow this guide to help you prepare for tax season.\n#Key dates\n• November 4: If you’re using e-delivery, Stripe begins outreach to your connected accounts.\n• January 3:  Last recommended day to enable Stripe outreach to your connected accounts to automatically collect paperless delivery consent and tax information.\n• January 15: (Tentative) The first date you can e-file tax forms in your Stripe Dashboard.\n• January 15: Last day that Stripe could send pre-filing outreach to your connected accounts\n• January 22: Latest recommended date to e-file tax forms in your Stripe Dashboard to have forms postmarked by the IRS deadline.\n• January 31: The IRS deadline to postmark 1099 tax forms to your connected accounts.\n• February 14: The last day that identity updates will automatically sync onto 1099 tax form drafts for tax year 2024.\n#Caution\nAction forms in the Needs attention state to get missing name, address, and taxpayer ID (SSN or EIN) details from your connected accounts. You need this information for filing.\n`Needs attention`## Get ready for tax season\n• Configure your platform’s tax settings for tax year 2024. You need to do this even if you previously used the Stripe 1099 tax reporting product.\n• Start reviewing forms in the Needs attention state with missing tax information.\n• Starting in August, you can edit tax forms in your Dashboard or through CSV.Provide any missing identity information required for filing.(Optional) Update form totals to reflect payment transactions outside of Stripe.(Optional) Export transaction logs to check which Stripe transactions have contributed to a 1099 form’s total.\n• If you’re planning to use e-delivery, enable both e-delivery and outreach from Stripe as delivery preferences in your tax form settings.\n• Provide any missing identity information required for filing.\n• (Optional) Update form totals to reflect payment transactions outside of Stripe.\n• (Optional) Export transaction logs to check which Stripe transactions have contributed to a 1099 form’s total.\n#Prepare for Stripe outreach to your connected accountsOctober 30th\n• Publish a support article explaining the tax timeline and your partnership with Stripe for taxes. View the example article.\n• Required for e-delivery:Use the Missing Email Address filter in your 1099 dashboard or export tax forms as a CSV to identify missing email addresses, since Column B will be blank if the email is missing. Update email addresses with the Accounts API so we can email your connected accounts.Make sure that your Connect branding settings and your support email address are up to date.Prepare your support teams for tax season 2024. View the example FAQs your support team might receive from your connected accounts.\n• Recommended for e-delivery:Notify your connected accounts when Stripe outreach occurs. View the example email copy.\n• Use the Missing Email Address filter in your 1099 dashboard or export tax forms as a CSV to identify missing email addresses, since Column B will be blank if the email is missing. Update email addresses with the Accounts API so we can email your connected accounts.\n• Make sure that your Connect branding settings and your support email address are up to date.\n• Prepare your support teams for tax season 2024. View the example FAQs your support team might receive from your connected accounts.\n• Notify your connected accounts when Stripe outreach occurs. View the example email copy.\n#Review tax form totals and identity informationDecember 31\n• Stripe begins outreach to your connected accounts starting the week of November 4 if you have opted into e-delivery / outreach from Stripe. We recommend opting in by January 3 so we can contact all of your accounts for pre-filing confirmation by January 15, the last possible day for automated outreach from Stripe. Note, we don’t send outreach emails to platforms’ connected accounts until 7 days after you enable the setting.\n• Continue actioning forms in Needs attention and reach out to accounts with missing information.\n• Audit tax calculations on some 1099 tax forms.\n• Verify your tax form settings so you’re ready to file 1099 tax forms in January.\n`Needs attention`## Prepare, file, and deliver 1099 tax formsJanuary 22\n• Input State Tax Registration or withholding numbers for all states where you plan to file.\n• File tax forms in your Stripe Dashboard no later than January 22. You can begin filing forms on January 15.When you press ‘File’ Stripe files any forms in a ‘Ready’ or ‘Ready!’ state.If you have forms in a ‘Needs Attention’ state and wish to file them, you need to explicitly update the filing requirement for these forms before filing.\n• Stripe e-delivers or postmarks tax forms for postal delivery by January 31.\n• After February 14, payee identity updates (name, TIN, address) stop flowing onto the 1099 tax forms that haven’t been filed yet. This doesn’t impact forms that you already filed by February 14.\n• When you press ‘File’ Stripe files any forms in a ‘Ready’ or ‘Ready!’ state.If you have forms in a ‘Needs Attention’ state and wish to file them, you need to explicitly update the filing requirement for these forms before filing.\n• If you have forms in a ‘Needs Attention’ state and wish to file them, you need to explicitly update the filing requirement for these forms before filing.\n#Set tax form default settings\nTo configure the settings for tax forms in your account you must log in as the account owner. If you use a team, any user that has the Administrator user role for your account can configure settings. To get started with generating your tax forms for 2024, open the Tax reporting page of the Dashboard, and then click Get started.\nChoose the default tax form to generate for your connected accounts, the calculation method to use for your tax form totals, the type of filer for your business, and the kind of transactions you process. We recommend that you use a tax advisor to determine which options are right for your business. You can change almost all tax form settings at any time for the forms that you haven’t filed.\nSelect a form type\nSelect tax calculation\nSelect type of filer\nSelect types of transactions processed\nNext, confirm the business information that displays as the Payer details on all of your tax forms. Make any necessary changes, then click Continue.\nNext, add state registration or withholding IDs for the states you plan to file with. You can enter these at any time in the future through tax form settings. If you intend to file in either Delaware and Pennsylvania, include your state IDs during this step to prevent possible rejection of your filings.\nThe next step involves choosing your delivery preferences to meet IRS obligations around delivering 1099 forms to payees. We offer two forms of delivery:\n• E-delivery through an interface built by Stripe: Owners of eligible connected accounts receive an electronic copy of the 1099 form through their Stripe interface. If the connected account previously did not have access to a Stripe interface, the Stripe Express Dashboard or Stripe Embedded Components may be used. Stripe sends an email invite to the connected account owners to confirm their tax details, collect their consent, and provide access to the electronic copy of the form. Read more about how e-delivery works.\n• Paper delivery through postal mail: Stripe delivers the 1099 forms to the owners of eligible connected accounts through postal mail based on the address on the tax form. If e-delivery is enabled, but the connected account hasn’t provided e-delivery consent at the time of filing, we fall back on postal delivery to meet IRS obligations.\nE-delivery through an interface built by Stripe: Owners of eligible connected accounts receive an electronic copy of the 1099 form through their Stripe interface. If the connected account previously did not have access to a Stripe interface, the Stripe Express Dashboard or Stripe Embedded Components may be used. Stripe sends an email invite to the connected account owners to confirm their tax details, collect their consent, and provide access to the electronic copy of the form. Read more about how e-delivery works.\nPaper delivery through postal mail: Stripe delivers the 1099 forms to the owners of eligible connected accounts through postal mail based on the address on the tax form. If e-delivery is enabled, but the connected account hasn’t provided e-delivery consent at the time of filing, we fall back on postal delivery to meet IRS obligations.\nAs a final step, you can view a summary of your tax form settings to confirm your choices. After you confirm your settings, the tax forms dashboard opens, where you can view all of your tax forms for 2024.\n#View and filter tax forms\nYou can view all of the tax forms for your connected account using the Tax reporting dashboard. Click the appropriate tab to filter the forms displayed. To display the State filing status, Federal filing status, or Delivery filing status instead of Overall filing status, click the gear icon to the right of the column heading and select the status to display.\nYou can apply any of the existing filters to limit the results to only those records that match the filter criteria. For example, to display only records for a specific payee, choose the Payee name filter and then enter all or part of a name to match. The records displayed include only the records for payees with Payee names that match the string you used for the filter.\nYou can use the following filters to display tax forms:\n Filter name | Filter values \n --- | --- \n Type | Type of tax form: 1099-K, 1099-MISC, or 1099-NEC \n Overall filing status | Overall status of tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected \n Federal filing status | Status of the Federal tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected \n State filing status | Status of the State tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected \n Delivery status | Delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed \n Postal delivery status | Postal delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed \n Electronic delivery status | Electronic delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed \n Pre-filing confirmation status | Status of Stripe’s pre-filing outreach: Not eligible, Queued, Sent \n Stripe merchant ID | Tax forms for the specified merchant ID \n Forms grouped with | Tax forms grouped with the specified tax form ID \n Payee name | Tax forms for the payee \n Payee state | Tax forms for the payee’s state \n Needs attention | Needs attention status: Any reason, Address, Business name, TIN - Any reason, TIN - Missing, TIN - Mismatch \n YTD volume | Tax forms with the specified year-to-date volume \n Correction | Correction status: Correction, Original \n Threshold | State or federal threshold status: Meets federal threshold, Meets state threshold, Meets any threshold, Meets state and federal threshold, Meets neither state nor federal thresholds \n Email address | Tax forms with the specified email address \n Missing email address | Filter for tax forms that either have or don’t have email addresses: True, False \n Delta values | Filter for tax forms with delta values: With delta values, Without delta values \n Standalone forms | Filter for standalone tax forms: All standalone forms, No standalone forms \n Paperless delivery consent | Status of paperless delivery (e-delivery) consent collection: Provided, Not provided, Revoked \n Grouped TIN | Tax forms that have grouped TINs: Grouped forms only, No grouped forms \n#Understand tax form status\nStripe automatically calculates the overall status for each tax form, and allows you to apply filing requirements for each form as appropriate. The filing requirement appears as a visual indicator in the tax form status. You can view the status for both State and Federal tax forms.\n Status | Description | Next steps \n --- | --- | --- \n Accepted | The IRS or state accepted the tax form. | No further action required. \n Filing | The tax form has been queued for transmission to the IRS or state, and will be sent shortly. | No further action required. \n Filed | The tax form was sent to the IRS or state, but hasn’t been accepted yet. | No further action required. \n Exported | The tax form was included in a state filing export, which you can find on the bulk jobs listing. | You must download the export and manually submit these to the appropriate state reporting agency. \n Needs attention | The tax form is above the IRS or state threshold, but requires additional information before filing. | Most tax forms require additional information before filing. You can update the form or update the connected account. If you determine that you shouldn’t file the tax form, or you want to file with incomplete information, you can update the filing requirement. \n Ready | The tax form is above the IRS or state threshold and ready to file. | File most tax forms. If you determine that you shouldn’t file the tax form, you can update the filing requirement. \n Rejected | The IRS or state rejected the tax form. | Review the IRS information return penalties, and your connected accounts’ tax forms for incorrect names or tax identification numbers. You have 60 days from the initial submission to file corrected tax forms to the IRS. Learn more about handling rejections. \n Will not file | The tax form is below the IRS or state threshold, or was overridden and won’t be filed. | Most tax forms don’t require further action. If you determine that you should file the tax form, (for example, if the connected account has withholding data), you can update the form. \n#Understand tax form TIN status\nPlatforms need valid TINs on the tax forms to ensure that the IRS and/or state accepts the forms, and Stripe displays the status of the TIN in the Tax Form Editor as follows:\n Status | Description | Next steps \n --- | --- | --- \n Verified | Name & TIN are verified | No further action required. \n Mismatch | Name + TIN didn’t match the records in IRS and need to be resolved before filing | Follow up with the account to get a name + TIN that matches IRS records. If you still want to file the form in this state, change the Filing requirement to Required even if incomplete. \n Overwritten | Platform has overwritten the Name and/or TIN | Verify the name + TIN directly with the IRS and/or use a third party TIN verification tool. You can still file this form in this status. \n Provided | Name and TIN were inherited from Connect Settings, but Stripe didn’t verify. | Verify the name + TIN directly with the IRS and/or use a third party TIN verification tool. You can still file this form in this status. \n Missing | Name or TIN not provided and needs to be resolved before filing | Follow up with the account to get a name + TIN that matches IRS records. If you still want to file the form in this state, change the Filing requirement to Required even if incomplete. \n#Understand tax form delivery status\nStripe sends your tax forms using the delivery method you set for your account, either mail or e-delivery. The Tax reporting page shows the delivery status for your tax forms. The following table describes each possible delivery status.\n Status | Description | Next steps \n --- | --- | --- \n Delivered | The forms were successfully delivered. | No further action required. \n Delivering | The forms were sent, but haven’t been received. | No further action required. \n Failed | The forms were not successfully delivered. | No further action required. \n Needs attention | The forms are ready to send, but require additional information. | Most tax forms require additional information before delivering. You can update the form or update the user information for the connected account. \n Ready | These forms are sent when the forms are filed. | No further action required. \n Scheduled | The forms are scheduled for delivery. | No further action required. \n Will not deliver | The forms won’t be delivered. | No further action required. \n#Updating tax forms\nYou can Update 1099 tax forms for the current year and choose whether or not to include tax identification numbers (TIN)."}, {"path": "connect\\handle-verification-updates.md", "url": "https://docs.stripe.com/connect/handle-verification-updates", "content": "#Handle verification updates | Stripe Documentation\nURL: https://docs.stripe.com/connect/handle-verification-updates\n\n#Handle verification updates\n#Help your connected accounts maintain compliance with changing verification requirements.\nBefore your connected accounts can accept payments and send payouts, you must fulfill what are typically called Know Your Customer (KYC) requirements. To do so, you must collect certain information about your connected accounts and send it to Stripe for verification.\nStripe frequently updates KYC requirements, often due to changes implemented by financial regulators, card networks, and other financial institutions.\n#Get risk requirements with the API\nAs part of a current preview, you can handle current and upcoming risk-related account issues with the account.requirements attribute. To learn more about how to participate in the preview, submit your email.\nThese updates might require you to take the following actions:\n# Modify your onboarding flow to account for the changed requirements.\n# Collect updated information from affected connected accounts and handle verification responses.\n# Handle risk-related requirements by notifying connected accounts of identified issues so you can guide them to resolve through Stripe interfaces.\nWhen upcoming requirements updates affect your connected accounts, we’ll notify you.\nIf you use embedded or Stripe-hosted onboarding, you can proactively collect information to fulfill future requirements. For embedded onboarding, include the collectionOptions attribute in the embedded onboarding component. For Stripe-hosted onboarding, specify the collectionoptions parameter when creating account links.\n`collectionOptions``collectionoptions`### API version considerations\nIn API version 2023-10-16 and later, the account object’s requirements.errors array specifies the latest verification error types in the code attribute. We recommend upgrading to API version 2023-10-16 and using requirements.errors.\n`account``code``requirements.errors`If you can’t update to version 2023-10-16, earlier versions of the requirements.errors array include a detailedcode field to return verification errors that weren’t compatible with the code attribute. The detailedcode attribute doesn’t appear in the API reference.\n`requirements.errors``detailedcode``code``detailedcode`If you’re using account or remediation links to collect new requirements, set the API version to 2021-09-07 or later.\nIf you’re receiving account.updated events. Set the webhooks API version to 2021-09-07 or later.\n`account.updated`## Modify your onboarding flow\n#Onboarding flow options\nWhen requirements change, we update Stripe-hosted and embedded onboarding flows to reflect the changes. However, if you use a custom API-based onboarding flow, you must update it to handle any changed requirements.\nRegardless of the onboarding flow type, you must address requirements changes for your existing connected accounts.\n Onboarding Flow Type | Description | Update Responsibility \n --- | --- | --- \n API-based | You build custom flows using Stripe APIs for your connected accounts. Your integration must meet all of Stripe’s onboarding requirements. | You’re responsible for identifying requirements changes and updating your flows to handle them. \n Embedded new | (Recommended method) Your connected accounts interact with a highly themeable and customizable UI in an embedded component without leaving your application. | You don’t have to update your onboarding flow when requirements change. Stripe automatically updates embedded onboarding components accordingly. \n Stripe-hosted | Your application redirects your connected accounts to Stripe to complete the onboarding process in a co-branded interface. | You don’t have to update your onboarding flow when requirements change. Stripe automatically updates hosted onboarding accordingly. \nIf you use embedded components or Stripe-hosted onboarding, requirements changes don’t require you to update your onboarding flow. Skip to the section on collecting updated information.\nIf you use a custom API-based onboarding flow, handle updated requirements by following these steps or by replacing your onboarding flow with embedded components or Stripe-hosted onboarding.\n#Note\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n#Modify your API-based onboarding flow\n#1. Preview updated verification requirements\nWhen verification requirements change, you must collect updated information by a certain date. Otherwise, connected accounts won’t be able to use the capabilities you request (for example, cardpayments). See details about the information you need to collect based on an account’s region, capabilities requested, and other factors.\n`cardpayments`You can avoid disruption of your connected accounts’ capabilities by planning the collection of updated information before the currentdeadline. To preview information about upcoming requirements changes, look at the Account object’s futurerequirements hash.\n`currentdeadline`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"futurerequirements\": {\n    \"currentdeadline\": 1656608400,\n    \"currentlydue\": [\n      \"company.taxid\"\n    ],\n    \"disabledreason\": null,\n    \"errors\": [],\n    \"eventuallydue\": [\n      \"company.taxid\"\n    ],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"futurerequirements\": {\n    \"currentdeadline\": 1656608400,\n    \"currentlydue\": [\n      \"company.taxid\"\n    ],\n    \"disabledreason\": null,\n    \"errors\": [],\n    \"eventuallydue\": [\n      \"company.taxid\"\n    ],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}`#### Note\nIf you use Stripe Data, you can retrieve the futurerequirements hash using a Sigma query.\n`futurerequirements`#### 2. Add required fields to your onboarding flow\nWhen you’ve identified the updated information you need to collect, add corresponding fields to your onboarding flow and update your connected accounts using the Accounts API.\nTo avoid disruption to your connected accounts, have your onboarding flow address all requirements listed in the Account object’s futurerequirements.currentlydue list.\nYou can also prepare for requirements that will apply when an account reaches their thresholds by considering the futurerequirements.eventuallydue list.\n#3. Test your updated onboarding flow\nTo simulate future verification requirements, create a test account using the Accounts API with enforcefuturerequirements in the email field. That populates the account’s requirements hash with all known future verification requirements.\n`enforcefuturerequirements``requirements`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d businesstype=individual \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  --data-urlencode email=\"jenny.rosen+enforcefuturerequirements@example.com\"\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d businesstype=individual \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  --data-urlencode email=\"jenny.rosen+enforcefuturerequirements@example.com\"`To verify that your updated onboarding flow fulfills the account requirements, onboard the test account and check its requirements hash. If your flow covers all the requirements, the currentlydue list is empty.\n`requirements`#### 4. Listen for account status changes to enable functionality\nDetect account status changes by listening to the account.updated event. After an account has gone through your onboarding flow, inspect the currentlydue and pendingverification lists in the account’s requirements hash. When both are empty, and requirements.disabledreason is null, you can enable functionality for the account. When payoutsenabled is true, the account can receive payouts. When chargesenabled is true, unlock payments for the account.\n`account.updated``currentlydue``pendingverification``requirements``requirements.disabledreason``payoutsenabled``chargesenabled`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"chargesenabled\": true,\n  \"payoutsenabled\": true,\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [],\n    \"disabledreason\": null,\n    \"errors\": [],\n    \"eventuallydue\": [],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"chargesenabled\": true,\n  \"payoutsenabled\": true,\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [],\n    \"disabledreason\": null,\n    \"errors\": [],\n    \"eventuallydue\": [],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}`## Collect updated information from accounts with outstanding requirements\nYou can collect updated information from your connected accounts using embedded components, Stripe-hosted onboarding, or the Stripe API. We recommend either integrating embedded components or directing your connected accounts to Stripe-hosted onboarding using Account Links.\nIn all cases, follow these steps:\n#1. Adjust your integration to handle new verification responses\nWhen Stripe receives updated information about your connected accounts, it takes time to verify the associated account fields. Until we complete verification, assume that any related functionality remains disabled. To detect field verification updates, listen for account.updated events and inspect them for verification errors. If you don’t resolve an error before its deadline, it disables requested capabilities for affected accounts.\nA disabled capability’s requirements hash contains a disabledreason that you can use to determine the action you must take. To investigate or to provide required information, use the Accounts to review tab in your Connect Dashboard.\n`requirements`### 2. Identify accounts with outstanding requirements\nIn your Connect Dashboard, select Accounts to review. It displays a list of connected accounts with current or future outstanding requirements. You can filter the list by account issue and status.\nYou can also see what information each connected account must provide, and the deadline, in the account object’s futurerequirements hash or by using a Sigma query.\n#3. Prepare for enforcement of updated requirements\nOn the enforcement date for an account (futurerequirements.currentdeadline), the contents of the futurerequirements hash move to the requirements hash and Stripe generates an account.updated event. Because this enforcement can cause more accounts to require review, use the enforcement date as a reminder to check the Accounts to review tab in your Connect Dashboard.\n`futurerequirements.currentdeadline``futurerequirements``requirements`### 4. Send connected accounts to the information collection flow\nIf any account has currentlydue requirements or verification errors, you must address them by the requirements currentdeadline. At that deadline, the requirements in the requirements.currentlydue array are added to the requirements.pastdue array and any associated capabilities become disabled until you provide the information and resolve the errors.\n`requirements.currentlydue``requirements.pastdue`Future requirements can immediately affect an account’s capabilities when they become current requirements. Make sure to address all requirements before their deadlines, even if they’re still in futurerequirements.\n`futurerequirements`When your accounts have requirements that are currentlydue, direct your accounts to address any issues according to your onboarding flow or with remediation links:\n`requirements``currentlydue`- API-based onboarding: Use your custom onboarding flow, optionally collecting futurerequirements as well.\n• Embedded onboarding: Render the embedded onboarding component for affected accounts.\n• Stripe-hosted onboarding: Use the Account Links API to generate a single-use link to Stripe-hosted onboarding. Send your connected accounts to this link from your application.\n• Remediation links: Use the Dashboard to generate remediation links that your connected accounts can use to provide required information.\n`futurerequirements`## See also\n• Handling verification with the API\n• Required verification information\n• Testing Connect\n• Testing account identity verification"}, {"path": "connect\\handling-api-verification.md", "url": "https://docs.stripe.com/connect/handling-api-verification", "content": "#Handle verification with the API | Stripe Documentation\nURL: https://docs.stripe.com/connect/handling-api-verification\n\n#Handle verification with the API\n#Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.\nPlatforms with accounts created using the API can provide Stripe with necessary information about their users for Know Your Customer (KYC) purposes. Platforms can use Connect Onboarding to collect KYC information, or use the Accounts and Persons APIs to provide Stripe with required information. We’ll then perform verification, asking for more information when needed.\nThe rest of this page goes through how platforms:\n• Discover verification requirements for a connected account\n• Provide the necessary information to Stripe\n#Note\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n#Verification process\nBefore enabling charges and payouts for a connected account, Stripe needs certain information that varies based on:\n• The origin country of the connected accounts\n• The service agreement type applicable to the connected accounts\n• The capabilities requested for the connected accounts\n• The business type (for example, individual or company) and company.structure (for example, public corporation or private partnership)\nPlatforms need to choose the proper onboarding flow for their business and users to meet the KYC requirements. Broadly speaking, this means providing all the requisite information upfront or incrementally. Either way, set up your integration to watch for and respond to requests from Stripe.\n# Establish a Connect webhook URL in your webhook settings to watch for activity, especially events of the account.updated type. When using the Persons API, you should also watch for person.updated events.\n# Immediately after creating an account, check the Account object’s requirements.currentlydue attribute for any additional requirements. Obtain any required information from the user and update the connected account.\n# Continue watching for account.updated event notifications to see if the requirements hash changes, and reach out to your user for additional information as needed.\n`account.updated``person.updated``Account``account.updated``requirements`When you provide additional information, you don’t need to resubmit any previously verified details. For example, if the dob is already verified, you don’t need to provide it again in subsequent updates.\n`dob`#### Caution\nWhen requirements.currentlydue isn’t empty, additional information is required. Connected accounts might be blocked from creating charges, receiving payouts, or performing certain tasks if you don’t provide this information in a timely manner.\n`requirements.currentlydue`### Change information after verification\nAfter an individual or company is verified, you can change some of their information, with limitations. See the Update Account API for limitations based on the configuration of the connected account. Contact support to make changes outside of these limitations.\n#Determine if verification is needed\nWhen you receive an account.updated event to your webhook or fetch an account with the API, you receive an Account object. The Account object’s chargesenabled and payoutsenabled attributes indicate whether the account can create charges and accept payouts.\n`account.updated``Account``chargesenabled``payoutsenabled`The Account object has a requirements hash, representing the requirements needed to verify the account.\n`Account``requirements`The requirements hash has the following arrays:\n`requirements`- eventuallydue: Requirements that you might need to collect, depending on whether the corresponding thresholds are reached. After a requirement becomes required, it also appears in the currentlydue list. If a requirement becomes required and its due date is before the existing currentdeadline, the currentdeadline changes to the corresponding threshold’s enforcement date.\n• currentlydue: Requirements that you must collect by the currentdeadline for the Account to remain active. currentlydue is a subset of eventuallydue.\n• pastdue: Requirements that have disabled capabilities because they weren’t verified before the currentdeadline. pastdue is a subset of currentlydue.\n• errors: Details about validation and verification failures that require particular requirements in currentlydue or pastdue to be collected again.requirement: Identifies the requirement corresponding to the error.code: An enum value describing why the requirement is invalid or can’t be verified.reason: An English message describing the error in more detail. The reason string can also suggest how to resolve the error.\n• disabledreason: Describes why the Account isn’t enabled and why it can’t process charges or transfers.\n• currentdeadline: Date by which requirements in currentlydue must be collected to keep the Account active. It represents the earliest deadline across all of the Account’s requested capabilities and risk requirements, including any hidden capabilities.\n• pendingverification: Requirements that might become required, depending on the results of verification or review. It’s an empty array unless an asynchronous verification is pending. Unsuccessful verification moves a requirement to eventuallydue, currentlydue, or pastdue. A requirement subject to both failed and pending verifications can also remain in pendingverification.\n`eventuallydue``currentlydue``currentdeadline``currentdeadline``currentlydue``currentdeadline``active``currentlydue``eventuallydue``pastdue``currentdeadline``pastdue``currentlydue``errors``currentlydue``pastdue`- requirement: Identifies the requirement corresponding to the error.\n• code: An enum value describing why the requirement is invalid or can’t be verified.\n• reason: An English message describing the error in more detail. The reason string can also suggest how to resolve the error.\n`requirement``code``reason``disabledreason``currentdeadline``currentlydue``active``pendingverification``eventuallydue``currentlydue``pastdue``pendingverification`The example below shows what the requirements hash might look like for an account that has some information that’s currentlydue, some information that’s eventuallydue, and some information that’s raising verification errors.\n`requirements``currentlydue``eventuallydue``errors`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"disabledreason\": null,\n      \"currentdeadline\": 1529085600,\n      \"pastdue\": [],\n      \"currentlydue\": [\n          \"company.taxid\",\n          \"company.verification.document\",\n          \"tosacceptance.date\",\n          \"tosacceptance.ip\"\n      ],\n      \"eventuallydue\": [\n          \"company.address.city\",\n          \"company.address.line1\",\n          \"company.address.postalcode\",\n          \"company.address.state\",\n          \"company.taxid\",\n          \"company.verification.document\",\n          \"externalaccount\",\n          \"tosacceptance.date\",\n          \"tosacceptance.ip\"\n      ],\n      \"errors\": [\n          {\n            \"requirement\": \"company.verification.document\",\n            \"reason\": \"The company name on the account couldn't be verified. Either update your business name or upload a document containing the business name.\",\n            \"code\": \"failednamematch\"\n          },\n      ]\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"disabledreason\": null,\n      \"currentdeadline\": 1529085600,\n      \"pastdue\": [],\n      \"currentlydue\": [\n          \"company.taxid\",\n          \"company.verification.document\",\n          \"tosacceptance.date\",\n          \"tosacceptance.ip\"\n      ],\n      \"eventuallydue\": [\n          \"company.address.city\",\n          \"company.address.line1\",\n          \"company.address.postalcode\",\n          \"company.address.state\",\n          \"company.taxid\",\n          \"company.verification.document\",\n          \"externalaccount\",\n          \"tosacceptance.date\",\n          \"tosacceptance.ip\"\n      ],\n      \"errors\": [\n          {\n            \"requirement\": \"company.verification.document\",\n            \"reason\": \"The company name on the account couldn't be verified. Either update your business name or upload a document containing the business name.\",\n            \"code\": \"failednamematch\"\n          },\n      ]\n  },\n  ...\n}`If requirements.currentlydue contains entries, check requirements.currentdeadline. The currentdeadline is a Unix timestamp identifying when information is needed. Usually, if Stripe doesn’t receive the information by the currentdeadline, payouts on the account are disabled. However, other consequences might apply in some situations. For example, if payouts are already disabled and the account is unresponsive to our inquiries, Stripe might also disable the ability to process charges.\n`requirements.currentlydue``requirements.currentdeadline``currentdeadline``currentdeadline`Separately, the requirements.disabledreason property can have a value. The value is a string describing the reason why this account is unable to make payouts or charges. In some instances, platforms and connected accounts can submit a form to resolve or appeal the reason.\n• Connected accounts with access to the full Stripe Dashboard and Standard accounts can access additional information (if available) in the Dashboard.\n• Platforms in any Connect configuration can navigate to Accounts to review to understand an account’s disabledreason. You might be able to provide additional information on behalf of your connected accounts. If the disabled reason is associated with an appeal, you can generate a link to a form for the account to resolve the appeal.\n`disabledreason`| Reason | Meaning |\n --- | --- \n actionrequired.requestedcapabilities | You need to request capabilities for the connected account. For details, see Request and unrequest capabilities. \n listed | Account might be on a prohibited persons or companies list (Stripe investigates and either rejects or reinstates the account accordingly). \n rejected.fraud | Account is rejected due to suspected fraud or illegal activity. \n rejected.incompleteverification | The account is rejected from incomplete verification requirements within the required threshold. \n rejected.listed | Account is rejected because it’s on a third-party prohibited persons or companies list (such as financial services provider or government). \n rejected.other | Account is rejected for another reason. \n rejected.termsofservice | Account is rejected due to suspected terms of service violations. \n requirements.pastdue | Additional verification information is required to enable capabilities on this account. \n requirements.pendingverification | Stripe is currently verifying information on the connected account. No action is required. Inspect the requirements.pendingverification array to see the information being verified. \n underreview | The account is under review by Stripe. \n`actionrequired.requestedcapabilities``listed``rejected.fraud``rejected.incompleteverification``rejected.listed``rejected.other``rejected.termsofservice``requirements.pastdue``requirements.pendingverification``underreview`## Validation and verification errors\nThe Account object includes a requirements.errors array that explains why the validation or verification requirements haven’t been met, which are needed to enable your account and capabilities. The errors array has the following attributes:\n`errors`- requirement: Specifies which information from the currentlydue array is needed.\n• code: Indicates the type of error that occurred. See the API reference for all possible error codes.\n• reason: Explains why the error occurred and how to resolve the error.\n`requirement``currentlydue``code``reason`Below is an example that shows what the errors array might look like for an account with requirements that are currentlydue. The example shows the reason why the submitted information can’t be used to enable the account, and how to resolve the error. If verification or validation is unsuccessful, requirements can reappear in currentlydue with error information. Set a Connect webhook to receive the account.updated event to receive these updates.\n`errors``currentlydue``currentlydue``account.updated`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"currentdeadline\": 1234567800,\n      \"currentlydue\": [\n          \"company.address.line1\",\n          \"{{PERSONID}}.verification.document\",\n      ],\n      \"errors\": [\n          {\n            \"requirement\": \"company.address.line1\",\n            \"code\": \"invalidstreetaddress\",\n            \"reason\": \"The provided street address cannot be found. Please verify the street name and number are correct in \\\"10 Downing Street\\\"\",\n          },\n          {\n            \"requirement\": \"{{PERSONID}}.verification.document\",\n            \"code\": \"verificationdocumentfailedgreyscale\",\n            \"reason\": \"Greyscale documents cannot be read. Please upload a color copy of the document.\",\n          }\n      ]\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"currentdeadline\": 1234567800,\n      \"currentlydue\": [\n          \"company.address.line1\",\n          \"{{PERSONID}}.verification.document\",\n      ],\n      \"errors\": [\n          {\n            \"requirement\": \"company.address.line1\",\n            \"code\": \"invalidstreetaddress\",\n            \"reason\": \"The provided street address cannot be found. Please verify the street name and number are correct in \\\"10 Downing Street\\\"\",\n          },\n          {\n            \"requirement\": \"{{PERSONID}}.verification.document\",\n            \"code\": \"verificationdocumentfailedgreyscale\",\n            \"reason\": \"Greyscale documents cannot be read. Please upload a color copy of the document.\",\n          }\n      ]\n  },\n  ...\n}`If verification or validation is unsuccessful but no requirements are currently due, a webhook triggers indicating that required information is eventually due.\n#Business information\nWhen information about a business is submitted, Stripe verifies the new information. For example, Stripe might verify that the provided business URL is valid, reachable, and includes information about the business. To retrieve the status of verification information regarding a business, utilize the requirements on the Account object.\n`requirements`Below is a list of errors related to business information verification:\n Error | Resolution \n --- | --- \n invalidbusinessprofilename | Business names must be easy for people to understand and must consist of recognizable words. \n invalidbusinessprofilenamedenylisted | Generic or well-known business names aren’t supported. Make sure the provided business name matches the account’s business. \n invalidproductdescriptionlength | A product description must be at least 10 characters. \n invalidproductdescriptionurlmatch | A product description must be different from the URL of the business. \n invalidurldenylistedinvalidurlformatinvalidurlwebpresencedetectedinvalidurlwebsitebusinessinformationmismatchinvalidurlwebsiteemptyinvalidurlwebsiteinaccessibleinvalidurlwebsiteinaccessiblegeoblockedinvalidurlwebsiteinaccessiblepasswordprotectedinvalidurlwebsiteincompleteinvalidurlwebsiteincompletecancellationpolicyinvalidurlwebsiteincompletecustomerservicedetailsinvalidurlwebsiteincompletelegalrestrictionsinvalidurlwebsiteincompleterefundpolicyinvalidurlwebsiteincompletereturnpolicyinvalidurlwebsiteincompletetermsandconditionsinvalidurlwebsiteincompleteunderconstructioninvalidurlwebsiteother | See handling URL verification errors below. \n`invalidbusinessprofilename``invalidbusinessprofilenamedenylisted``invalidproductdescriptionlength``invalidproductdescriptionurlmatch`invalidurldenylisted\n`invalidurldenylisted`invalidurlformat\n`invalidurlformat`invalidurlwebpresencedetected\n`invalidurlwebpresencedetected`invalidurlwebsitebusinessinformationmismatch\n`invalidurlwebsitebusinessinformationmismatch`invalidurlwebsiteempty\n`invalidurlwebsiteempty`invalidurlwebsiteinaccessible\n`invalidurlwebsiteinaccessible`invalidurlwebsiteinaccessiblegeoblocked\n`invalidurlwebsiteinaccessiblegeoblocked`invalidurlwebsiteinaccessiblepasswordprotected\n`invalidurlwebsiteinaccessiblepasswordprotected`invalidurlwebsiteincomplete\n`invalidurlwebsiteincomplete`invalidurlwebsiteincompletecancellationpolicy\n`invalidurlwebsiteincompletecancellationpolicy`invalidurlwebsiteincompletecustomerservicedetails\n`invalidurlwebsiteincompletecustomerservicedetails`invalidurlwebsiteincompletelegalrestrictions\n`invalidurlwebsiteincompletelegalrestrictions`invalidurlwebsiteincompleterefundpolicy\n`invalidurlwebsiteincompleterefundpolicy`invalidurlwebsiteincompletereturnpolicy\n`invalidurlwebsiteincompletereturnpolicy`invalidurlwebsiteincompletetermsandconditions\n`invalidurlwebsiteincompletetermsandconditions`invalidurlwebsiteincompleteunderconstruction\n`invalidurlwebsiteincompleteunderconstruction`invalidurlwebsiteother\n`invalidurlwebsiteother`See handling URL verification errors below.\n#Statement descriptors\nStripe validates the statement descriptor and statement descriptor prefix when set on an account. For example, Stripe might verify that the provided statement descriptor matches the description of the business. When validating the statement descriptor matches the business description, Stripe uses the first 22 characters of the statement descriptor, representing the part that is provided to the card networks. A business description is a close match of the account’s businessprofile.name, businessprofile.url, or the name of the company or individual.\n`businessprofile.name``businessprofile.url`To retrieve the status of verification information regarding statement descriptors, review the requirements on the Account object. Below is a list of errors related to statement descriptor verification:\n`requirements`| Error | Resolution |\n --- | --- \n invalidstatementdescriptorlength | A statement descriptor must be at least 5 characters. \n invalidstatementdescriptorbusinessmismatch | A statement descriptor must be similar to the business name, legal entity name, or URL of the account. \n invalidstatementdescriptordenylistedinvalidstatementdescriptorprefixdenylisted | Generic or well-known statement descriptors aren’t supported. \n invalidstatementdescriptorprefixmismatch | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. \n`invalidstatementdescriptorlength``invalidstatementdescriptorbusinessmismatch`invalidstatementdescriptordenylisted\n`invalidstatementdescriptordenylisted`invalidstatementdescriptorprefixdenylisted\n`invalidstatementdescriptorprefixdenylisted`Generic or well-known statement descriptors aren’t supported.\n`invalidstatementdescriptorprefixmismatch`## Person information\nDuring the verification process, information about the persons associated with an account needs to be collected. If you onboard:\n• Only companies, use the Persons API to collect this information.\n• Only individuals, you can use the Persons API or the individual hash on the Account object.\n• A combination of individuals and companies, use the Persons API to collect this information. This way you collect information in the same manner regardless of business type.\nTo retrieve the status of verification information regarding a person, use the requirements hash.\nBelow is a list of errors related to person verification:\n Error | Resolution \n --- | --- \n invalidaddresscitystatepostalcode | Stripe couldn’t validate the combination of the city, state, and postal code in the provided address. \n invalidaddresshighwaycontractbox | The address of the person must be a valid physical address from which the account conducts business and can’t be a Highway Contract Box. \n invalidaddressprivatemailbox | The address of the person must be a valid physical address from which the account conducts business and can’t be a private mailbox. \n invaliddobageunderminimum | The person must be at least 13 years old. \n invaliddobageovermaximum | The person’s date of birth must be within the past 120 years. \n invalidphonenumber | Stripe couldn’t validate the phone number on the account. Make sure the formatting matches the country of the person. \n invalidstreetaddress | Stripe couldn’t validate the street name and/or number for the provided address. \n invalidtaxidinvalidtaxidformat | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. \n`invalidaddresscitystatepostalcode``invalidaddresshighwaycontractbox``invalidaddressprivatemailbox``invaliddobageunderminimum``invaliddobageovermaximum``invalidphonenumber``invalidstreetaddress`invalidtaxid\n`invalidtaxid`invalidtaxidformat\n`invalidtaxidformat`Tax IDs must be a unique set of 9 numbers without dashes or other special characters.\n#Acceptable verification documents by country\nTo learn about specific document requirements, view Acceptable verification documents by country.\n#Company information\nDuring the verification process, you might need to collect information about the company for an account.\nTo retrieve the status of verification information regarding an account’s company, use the Account’s company.verification subhash:\n{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  ...\n  \"company\": {\n    \"verification\": {\n      \"document\": null\n    },\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  ...\n  \"company\": {\n    \"verification\": {\n      \"document\": null\n    },\n    ...\n  },\n  ...\n}`You can look up the definition for each verification attribute on the Account object.\n#Handle document verification problems\nMany complications with the verification process involve the uploaded document itself. To help you recognize and handle the most common problems, the table below lists possible values for the error code (in the requirements.errors array) and the likely resolutions for each error.\n`code``requirements.errors`Below is a list of errors related to document upload:\n Error | Resolution \n --- | --- \n verificationdocumentcorruptverificationdocumentfailedcopyverificationdocumentfailedgreyscaleverificationdocumentincompleteverificationdocumentnotreadableverificationdocumentnotuploadedverificationdocumentnotsignedverificationdocumentmissingbackverificationdocumentmissingfrontverificationdocumenttoolarge | The upload failed due to a problem with the file itself. Ask your user to provide a new file that meets these requirements:Color image (8,000 pixels by 8,000 pixels or smaller)10 MB or lessIdentity documents are JPG or PNG formatAddress or legal entity documents are JPG, PNG, or PDF formatLegal entity documents must include all pagesMust not be password protected \n verificationdocumentcountrynotsupportedverificationdocumentinvalidverificationdocumenttypenotsupported | The provided file isn’t an acceptable form of ID from a supported country, or isn’t a type of legal entity document that is expected. Ask your user to provide a new file that meets that requirement. For a list, see Acceptable ID types by country. \n verificationfailedotherverificationdocumentfailedother | Your team can contact Stripe to learn more about why identity verification failed. \n verificationdocumentexpiredverificationdocumentissueorexpirydatemissing | The issue or expiry date is missing on the document, or the document is expired. If it’s an identity document, its expiration date must be after the date the document was submitted. If it’s an address document, the issue date must be within the last six months. \nverificationdocumentcorrupt\n`verificationdocumentcorrupt`verificationdocumentfailedcopy\n`verificationdocumentfailedcopy`verificationdocumentfailedgreyscale\n`verificationdocumentfailedgreyscale`verificationdocumentincomplete\n`verificationdocumentincomplete`verificationdocumentnotreadable\n`verificationdocumentnotreadable`verificationdocumentnotuploaded\n`verificationdocumentnotuploaded`verificationdocumentnotsigned\n`verificationdocumentnotsigned`verificationdocumentmissingback\n`verificationdocumentmissingback`verificationdocumentmissingfront\n`verificationdocumentmissingfront`verificationdocumenttoolarge\n`verificationdocumenttoolarge`The upload failed due to a problem with the file itself. Ask your user to provide a new file that meets these requirements:\n• Color image (8,000 pixels by 8,000 pixels or smaller)\n• 10 MB or less\n• Identity documents are JPG or PNG format\n• Address or legal entity documents are JPG, PNG, or PDF format\n• Legal entity documents must include all pages\n• Must not be password protected\nverificationdocumentcountrynotsupported\n`verificationdocumentcountrynotsupported`verificationdocumentinvalid\n`verificationdocumentinvalid`verificationdocumenttypenotsupported\n`verificationdocumenttypenotsupported`The provided file isn’t an acceptable form of ID from a supported country, or isn’t a type of legal entity document that is expected. Ask your user to provide a new file that meets that requirement. For a list, see Acceptable ID types by country.\nverificationfailedother\n`verificationfailedother`verificationdocumentfailedother\n`verificationdocumentfailedother`Your team can contact Stripe to learn more about why identity verification failed.\nverificationdocumentexpired\n`verificationdocumentexpired`verificationdocumentissueorexpirydatemissing\n`verificationdocumentissueorexpirydatemissing`The issue or expiry date is missing on the document, or the document is expired. If it’s an identity document, its expiration date must be after the date the document was submitted. If it’s an address document, the issue date must be within the last six months.\nBelow is a list of errors related to identity verification:\n Error | Resolution \n --- | --- \n verificationfailedkeyedidentity | The name on the account couldn’t be verified. Ask your user to verify that they have provided their full legal name and to also provide a photo ID matching that name. \n verificationdocumentnamemismatchverificationdocumentdobmismatchverificationdocumentaddressmismatchverificationdocumentidnumbermismatchverificationdocumentphotomismatch | The information on the ID document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account. \n verificationdocumentfraudulentverificationdocumentmanipulated | The document might have been altered so it couldn’t be verified. Your team can contact Stripe to learn more. \n`verificationfailedkeyedidentity`verificationdocumentnamemismatch\n`verificationdocumentnamemismatch`verificationdocumentdobmismatch\n`verificationdocumentdobmismatch`verificationdocumentaddressmismatch\n`verificationdocumentaddressmismatch`verificationdocumentidnumbermismatch\n`verificationdocumentidnumbermismatch`verificationdocumentphotomismatch\n`verificationdocumentphotomismatch`The information on the ID document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account.\nverificationdocumentfraudulent\n`verificationdocumentfraudulent`verificationdocumentmanipulated\n`verificationdocumentmanipulated`The document might have been altered so it couldn’t be verified. Your team can contact Stripe to learn more.\nBelow is a list of errors related to business verification:\n Error | Resolution \n --- | --- \n verificationfailedkeyedmatchverificationfaileddocumentmatch | The information on the account couldn’t be verified. Your user can either upload a document to confirm their account details, or update their information on their account. \n verificationfailedtaxidnotissuedverificationfailedtaxidmatch | The information that your user provided couldn’t be verified with the IRS. Ask your user to correct any possible errors in the company name or tax ID, or upload a document that contains those fields. (US only) \n verificationfailedidnumbermatchverificationfailednamematchverificationfailedaddressmatch | The information on the document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account, or upload a document with information that matches the account. \n verificationdocumentaddressmissingverificationdocumentidnumbermissingverificationdocumentnamemissing | The uploaded document is missing a required field. Ask your user to upload another document that contains the missing field. \nverificationfailedkeyedmatch\n`verificationfailedkeyedmatch`verificationfaileddocumentmatch\n`verificationfaileddocumentmatch`The information on the account couldn’t be verified. Your user can either upload a document to confirm their account details, or update their information on their account.\nverificationfailedtaxidnotissued\n`verificationfailedtaxidnotissued`verificationfailedtaxidmatch\n`verificationfailedtaxidmatch`The information that your user provided couldn’t be verified with the IRS. Ask your user to correct any possible errors in the company name or tax ID, or upload a document that contains those fields. (US only)\nverificationfailedidnumbermatch\n`verificationfailedidnumbermatch`verificationfailednamematch\n`verificationfailednamematch`verificationfailedaddressmatch\n`verificationfailedaddressmatch`The information on the document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account, or upload a document with information that matches the account.\nverificationdocumentaddressmissing\n`verificationdocumentaddressmissing`verificationdocumentidnumbermissing\n`verificationdocumentidnumbermissing`verificationdocumentnamemissing\n`verificationdocumentnamemissing`The uploaded document is missing a required field. Ask your user to upload another document that contains the missing field.\n#Caution\nDon’t resubmit a file that previously failed. Duplicate uploads immediately trigger an error and aren’t rechecked.\n#Handle URL verification errors\nURLs for e-commerce businesses need to conform to certain card network standards. In order to comply with these standards, Stripe conducts a number of verifications when reviewing URLs. To learn about best practices for URLs and common elements for e-commerce businesses, see the website checklist. There are two methods to resolve URL verification errors:\n• Using the API: Please see the list of error codes below in order to understand and resolve the issue you are facing. If you need to update the URL, use the Update Account API, which will trigger Stripe to verify the new URL. If you have made changes to the website at the provided URL in order to resolve an error, but do not need to make changes to the URL itself, you can trigger reverification by using the API to change the URL to any other value and then change it back.\n• Using the Dashboard: Platforms can use the Accounts to review page or the Actions required list on the Account details page in the Stripe Dashboard to understand the impact to their connected accounts and what actions to take.\nNot all URL-related issues can be resolved using the API. Certain types of URL verification errors require additional information on how to access the connected account’s website or to attest that the account is exempt from URL requirements. These types of issues require you or your connected account to provide supplemental information.\nIn the Dashboard, visit your Accounts to review page or check the Actions required list (if present) on the Account details page to resolve the error. If you can’t resolve the issue, direct your connected account to contact Stripe Support. For guidance on how to review your accounts, see Review actionable accounts.\n#Note\nStripe’s Terms of Service requires all e-commerce businesses to populate the businessprofile.url property with a working URL of their business website when activating an account with the cardpayments capability. An account is considered an e-commerce business if it promotes or sells any products or services through an online website, social media profile, or mobile application. If the account doesn’t operate a website to promote their business, sell products, or accept payments, they’re required to provide businessprofile.productdescription instead. A product description needs to detail the type of products being sold as well as the manner in which the account’s customers are being charged (e.g. in person transactions). For more information, please see: Business website for account activation FAQ.\n`cardpayments`To help you handle the most common errors associated with the businessprofile.url field, the following table lists the related error codes (in the requirements.errors array) and possible resolutions.\n`businessprofile.url``requirements.errors`| Error | Resolution |\n --- | --- \n invalidurldenylisted | The provided URL matches a generic business website that Stripe believes is unrelated to the account. To resolve the issue, provide a URL that is specific to the business. \n invalidurlformat | The provided URL is in the incorrect format. To resolve the issue, provide a correctly formatted URL, such as https://example.com. \n invalidurlwebsiteinaccessible | We can’t reach the website at the provided URL. If you block certain regions from viewing your website, temporarily remove the blocker until your website has been verified. \n invalidurlwebsitebusinessinformationmismatch | Information on the website at the provided URL does not match the information on the Stripe account. \n invalidurlwebsiteincomplete | The website at the provided URL is missing either a business name or a clear description of goods and services offered. \n invalidurlwebsiteother | We are unable to verify the account’s business using a website, social media profile, or mobile application at the provided URL. \n invalidurlwebpresencedetected | We have detected that the account uses a website, social media profile, or mobile application to sell or promote products or services, but a URL hasn’t been provided. To resolve the issue, provide a URL. \n invalidurlwebsiteincompletecustomerservicedetails | The website does not contain customer service details. \n invalidurlwebsiteincompletereturnpolicy | The website does not contain a return policy and process. \n invalidurlwebsiteincompleterefundpolicy | The website does not contain a refund policy. \n invalidurlwebsiteincompletecancellationpolicy | The website does not contain a cancellation policy. \n invalidurlwebsiteincompletelegalrestrictions | The website does not contain applicable disclosures for products and services that are subject to legal or export restrictions. \n invalidurlwebsiteincompletetermsandconditions | The website does not contain terms and conditions. \n invalidurlwebsiteincompleteunderconstruction | We are unable to verify the website at the provided URL, because the website is still under construction. \n invalidurlwebsiteinaccessiblepasswordprotected | We are unable to verify the website at the provided URL, because the website is password-protected. \n invalidurlwebsiteinaccessiblegeoblocked | We are unable to verify the website at the provided URL, because certain regions are blocked from accessing it. If you block certain regions from viewing your website, temporarily remove the blocker until your website has been verified. \n invalidurlwebsiteempty | We are unable to verify the website at the provided URL, because the website has no content. \n`invalidurldenylisted``invalidurlformat``https://example.com``invalidurlwebsiteinaccessible``invalidurlwebsitebusinessinformationmismatch``invalidurlwebsiteincomplete``invalidurlwebsiteother``invalidurlwebpresencedetected``invalidurlwebsiteincompletecustomerservicedetails``invalidurlwebsiteincompletereturnpolicy``invalidurlwebsiteincompleterefundpolicy``invalidurlwebsiteincompletecancellationpolicy``invalidurlwebsiteincompletelegalrestrictions``invalidurlwebsiteincompletetermsandconditions``invalidurlwebsiteincompleteunderconstruction``invalidurlwebsiteinaccessiblepasswordprotected``invalidurlwebsiteinaccessiblegeoblocked``invalidurlwebsiteempty`## Handle identity verification\nYou can respond in two ways to an identity verification change. The first is to perform an Update Account call, correcting or adding information.\nSecondarily, we might ask you to upload a document. Depending on how much of the user’s information Stripe has been able to verify, we might require three different types of document uploads. You can determine what documents to upload based on the fields listed in requirements.currentlydue:\n`requirements.currentlydue`- person.verification.document: Requires a color scan or photo of an acceptable form of ID.\n• person.verification.additionaldocument: Requires a color scan or photo of a document verifying the user’s address, such as a utility bill.\n• company.verification.document: Requires a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation.\n`person.verification.document``person.verification.additionaldocument``company.verification.document`Uploading a document is a two-step process:\n# Upload the file to Stripe\n# Attach the file to the account\n#Note\nFor security reasons, Stripe doesn’t accept copies of IDs sent by email.\n#Upload a file\nTo upload a file, use the Create File API by using a POST to send the file data as part of a multipart/form-data request.\nThe uploaded file must meet these requirements:\n• Color image (8,000 pixels by 8,000 pixels or smaller)\n• 10 MB or less\n• Identity documents are JPG or PNG format\n• Address or legal entity documents are JPG, PNG, or PDF format\nPass the file data in the file parameter and set the purpose parameter to identitydocument:\n`file``purpose``identitydocument`curl https://files.stripe.com/v1/files \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -F \"purpose\"=\"identitydocument\" \\\n  -F \"file\"=\"@/path/to/a/file\"\n`curl https://files.stripe.com/v1/files \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -F \"purpose\"=\"identitydocument\" \\\n  -F \"file\"=\"@/path/to/a/file\"`This request uploads the file and returns a token:\n{\n  \"id\": \"{{FILEID}}\",\n  \"created\": 1403047735,\n  \"size\": 4908\n}\n`{\n  \"id\": \"{{FILEID}}\",\n  \"created\": 1403047735,\n  \"size\": 4908\n}`You may then use the token’s id value to attach the file to a connected account for identity verification.\n`id`### Attach the file\nAfter you upload the file and receive a representative token, provide the file ID using the appropriate field in your Update Account call.\nBelow is an example for an ID document:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"verification[document][front]\"={{FILEID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"verification[document][front]\"={{FILEID}}`Below is an example for a company document:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[verification][document][front]\"={{FILEID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[verification][document][front]\"={{FILEID}}`This update changes verification.status to pending. If an additional person needs to be verified, use the Persons API to update them.\n`verification.status``pending`### Confirm ID verification\nIf the color scan or photo of the ID passes Stripe’s checks, the document requirement is removed from requirements.currentlydue. Satisfying all verification requirements for the person or company triggers an account.updated webhook notification signaling the verification process is complete.\n`requirements.currentlydue``account.updated`Verification can take Stripe from a few minutes, to a couple business days to complete, depending on how readable the provided image is.\nIf the verification attempt fails, the requirements.errors array contains an error stating the cause. The error[reason], such as “The image supplied isn’t readable,” is safe to present to your user, but isn’t localized. The response also contains an error[code] value, such as verificationdocumentnotreadable, which you can use to localize errors for your users. Upon failure, requirements.currentlydue indicates that a new ID upload is required. If the deadline for verification is near, requirements.currentdeadline might also be populated with a date. Verification failure also triggers an account.updated webhook notification.\n`requirements.errors``error[reason]``error[code]``verificationdocumentnotreadable``requirements.currentlydue``requirements.currentdeadline``account.updated`## Handle risk verifications\n#New risk requirements\nThe following risk-related requirement data will be generally available on November 12, 2024. You can opt in to receiving it sooner by following the instructions provided by Stripe Support.\nStripe reports risk and compliance requirements in the accounts.requirements attribute. These requirements follow the schema: ..:\n`..`- id uniquely identifies information needed by Stripe or our financial partners. This identifier is always prefixed with interv to indicate that it is a risk verification requirement.\n• requirementdescription specifically describes the information needed to complete the requirement, such as identityverification, rejectionappeal, and so on.\n• resolutionpath specifies how you or your connected account can provide the requested information:challenge: Connected accounts must directly respond to challenge prompts. They often require sensitive information, such as a bank account, or information that only the account owner can provide, such as a selfie.form: Connected accounts can complete form requests, or you can complete them on their behalf.support: The requirement isn’t directly actionable. Contact Stripe Support.\n`id``interv``requirementdescription``identityverification``rejectionappeal``resolutionpath`- challenge: Connected accounts must directly respond to challenge prompts. They often require sensitive information, such as a bank account, or information that only the account owner can provide, such as a selfie.\n• form: Connected accounts can complete form requests, or you can complete them on their behalf.\n• support: The requirement isn’t directly actionable. Contact Stripe Support.\n`challenge``form``support`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"currentdeadline\": 1234567800,\n      \"currentlydue\": [\n          \"{{REQUIREMENTID}}.restrictedorprohibitedindustrydiligence.form\"\n      ],\n      \"pendingverification\": [],\n      ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"currentdeadline\": 1234567800,\n      \"currentlydue\": [\n          \"{{REQUIREMENTID}}.restrictedorprohibitedindustrydiligence.form\"\n      ],\n      \"pendingverification\": [],\n      ...\n  },\n  ...\n}`After satisfying a resolution path, the value of the requirement’s resolution path might change to support and the requirement also appears in the pendingverification section of the requirements hash. Stripe verifies the submitted information and either dismisses the requirement as resolved or posts a new currently due requirement.\n`support``pendingverification`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"currentdeadline\": 1234567800,\n      \"currentlydue\": [],\n      \"pendingverification\": [\n        \"{{REQUIREMENTID}}.restrictedorprohibitedindustrydiligence.support\"\n      ],\n      ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n      \"currentdeadline\": 1234567800,\n      \"currentlydue\": [],\n      \"pendingverification\": [\n        \"{{REQUIREMENTID}}.restrictedorprohibitedindustrydiligence.support\"\n      ],\n      ...\n  },\n  ...\n}`You can remediate risk and compliance requirements in any of the following ways, depending on the type of requirement:\n• Connect embedded components: You can embed Connect components directly into your website. When a requirement surfaces, direct your users to the account onboarding embedded component, where they’re prompted to complete outstanding requirements directly in your UI. Alternatively, use the Notification banner embedded component to prompt your users for any outstanding requirements.\n• Stripe hosted onboarding: You can generate links to direct your connected accounts to complete outstanding requirements programmatically through account links or manually in your platform Dashboard.\n• Complete on behalf of your accounts: You can use your platform Dashboard to identify and complete form-based risk requirements from connected account detail on behalf of your accounts.\nThe following requirementdescription values are relevant to requirements shown in the account.requirements attribute.\n`requirementdescription``account.requirements`| Value | Description |\n --- | --- \n businessmodelverification | We require additional information about the nature of the business to verify that we can support the account. \n restrictedorprohibitedindustrydiligence | The business might operate in a restricted category (for example, selling alcohol, insurance, or financial products). Stripe might require more information about the nature of the business or licensing information to verify that we can support the account. \n intellectualpropertyusage | The business might be selling products or services that are protected by copyright. We require additional information to verify that the account is authorized to sell those products. \n supportabilityrejectionappeal | The Stripe terms of service prohibit supporting the business. The account can appeal this determination. \n othersupportabilityinquiry | We require additional information to verify that we can support the account. \n creditreview | We require additional information about the nature of the business to verify that we can support the account. \n reserveappeal | We’ve applied a reserve to the account. The reserve doesn’t impact the account’s ability to accept payments with Stripe. The account can appeal our determination. \n identityverification | The person responsible for the account must verify their identify by uploading an ID document and a selfie. \n urlinquiry | The business URL must reflect the products and services that it provides. Stripe might require them to change the URL before we can support the account. \n addressverification | We need to verify the address of the business through document upload. \n domainverification | We need to verify that the account owner controls the URL or domain that they provided. \n bankaccountverification | We need to verify bank account details associated with the business. \n customerservicecontact | We need to verify customer service contact information associated with the business. \n fulfillmentpolicy | We need to verify the business’s fulfillment policy. \n productdescription | The business’s Stripe account must include an accurate product description. \n statementdescriptor | We need a statement descriptor that accurately reflects the business. \n capabilitydisableappeal | The Stripe Terms of Service prohibit supporting specific capabilities associated with this business. The account can appeal this determination. \n rejectionappeal | The Stripe Terms of Service prohibit supporting the business due to the level of risk it presents. The account can appeal this determination. \n platformconcern | The platform initiated an intervention on its own connected account. It can be a real intervention or an API integration test. \n othercomplianceinquiry | We require additional compliance information that doesn’t fit any of the other descriptions. \n otherbusinessinquiry | We require additional business information that doesn’t fit any of the other descriptions. \n`businessmodelverification``restrictedorprohibitedindustrydiligence``intellectualpropertyusage``supportabilityrejectionappeal``othersupportabilityinquiry``creditreview``reserveappeal``identityverification``urlinquiry``addressverification``domainverification``bankaccountverification``customerservicecontact``fulfillmentpolicy``productdescription``statementdescriptor``capabilitydisableappeal``rejectionappeal``platformconcern``othercomplianceinquiry``otherbusiness_inquiry`## See also\n• Identity verification for connected accounts\n• Account tokens\n• Testing Connect\n• Testing account identity verification\n• Required verification information"}, {"path": "connect\\hosted-onboarding.md", "url": "https://docs.stripe.com/connect/hosted-onboarding", "content": "#Stripe-hosted onboarding | Stripe Documentation\nURL: https://docs.stripe.com/connect/hosted-onboarding\n\n#Stripe-hosted onboarding\n#Onboard connected accounts by redirecting them to a Stripe-hosted onboarding flow.\nStripe-hosted onboarding handles the collection of business and identity verification information from connected accounts, requiring minimal effort by the platform. It’s a web form hosted by Stripe that renders dynamically based on the capabilities, country, and business type of each connected account.\nStripe-hosted onboarding supports Legal Entity Sharing, which allows owners of multiple Stripe accounts to share business information between them. When they onboard an account, they can reuse that information from an existing account instead of resubmitting it.\nThe hosted onboarding form in Stripe’s sample integration, Rocket Deliveries.\n#Customize the onboarding formDashboard\nGo to the Connect settings page in the Dashboard to customize the visual appearance of the form with your brand’s name, color, and icon. Stripe-hosted onboarding requires this information. Stripe also recommends collecting bank account information from your connected accounts as they’re onboarding.\n#Create an account and prefill informationServer-side\nCreate a connected account with the default controller properties. See design an integration to learn more about controller properties. Alternatively, you can create a connected account by specifying an account type.\ncurl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`If you know the country for your connected account, you can provide that information when you create the account. The country defaults to the same country as your platform if not provided.\nTo request capabilities for your connected account, you can provide that information when you create the account. Stripe’s onboarding UIs automatically collect the requirements for those capabilities. To reduce onboarding effort, request only the capabilities you need. If you omit capabilities, and your connected account has access to the full Stripe Dashboard or the Express Dashboard, capabilities are automatically requested. For accounts with access to the Express dashboard, Stripe-hosted onboarding uses the Configuration settings to request capabilities based on the account’s country.\nIf you have information about the account holder (like their name, address, or other details), you can proactively provide this when you create or update the account. Stripe-hosted onboarding asks the account holder to confirm the pre-filled information before accepting the Connect service agreement. Providing more information through the API reduces the number of prompts and enhances the onboarding flow for your connected account.\nAdditionally, if you onboard an account without its own website and your platform provides the account with a URL, prefill the account’s businessprofile.url. If the account doesn’t have a URL, you can prefill its businessprofile.productdescription instead.\nWhen testing your integration, use test data to simulate different outcomes including identity verification, business information verification, payout failures, and more.\n#Determine the information to collect\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the eventuallydue requirements for the account, while incremental onboarding only collects the currentlydue requirements.\n`eventuallydue``currentlydue`|  | Upfront onboarding | Incremental onboarding |\n --- | --- | --- \n Advantages | Entails a single request for information (normally)Creates fewer problems in receiving payouts and maintaining processing abilityExposes potential fraudsters or connected accounts who refuse to provide required information later | Onboards connected accounts quicklyResults in higher onboarding rates \n Disadvantages | Onboarding connected accounts can take longerSome legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | Creates a higher likelihood of disrupting business of an ongoing connected account \n• Entails a single request for information (normally)\n• Creates fewer problems in receiving payouts and maintaining processing ability\n• Exposes potential fraudsters or connected accounts who refuse to provide required information later\n• Onboards connected accounts quickly\n• Results in higher onboarding rates\n• Onboarding connected accounts can take longer\n• Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process\n• Creates a higher likelihood of disrupting business of an ongoing connected account\nTo determine whether to use upfront or incremental onboarding, review the required information for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\nFor connected accounts where you’re responsible for requirement collection, you can customize the behavior of future requirements using the collectionoptions parameter. Set collectionoptions.futurerequirements to include to collect the account’s future requirements.\n`collectionoptions``collectionoptions.futurerequirements``include`## Create an Account LinkServer-side\nCreate an Account Link using the connected account ID and include a refresh URL and a return URL. Stripe redirects the connected account to the refresh URL if the Account Link URL has already been visited, has expired, or is otherwise invalid. Stripe redirects connected accounts to the return URL when they have completed or left the onboarding flow. Additionally, based on the information you need to collect, pass either currentlydue or eventuallydue for collectionoptions.fields. This example passes eventuallydue to use upfront onboarding. Set to currentlydue for incremental onboarding.\n`currentlydue``eventuallydue``collectionoptions.fields``eventuallydue``currentlydue`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/refresh\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding \\\n  -d \"collectionoptions[fields]\"=eventuallydue\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/refresh\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding \\\n  -d \"collectionoptions[fields]\"=eventuallydue`### Redirect your connected account to the Account Link URL\nRedirect the connected account to the Account Link URL to send them to the onboarding flow. Each Account Link URL can only be used once because it grants access to the account holder’s personal information. Authenticate the account in your application before redirecting them to this URL.\n#Handle new requirements becoming dueServer-side\nSet up your integration to listen for changes to account requirements. You can test handling new requirements (and how they might disable charges and payouts) with the test trigger cards.\nBased on your application’s verification requirements, send the connected account back through onboarding when it has currentlydue or eventuallydue requirements.  Use these signals to determine when it’s necessary to re-initiate onboarding for a connected account.\n`currentlydue``eventuallydue`You don’t need to worry about determining which requirements are missing. Onboarding collects the necessary information. For example, if there’s a typo preventing verification, onboarding prompts the connected account to upload an identity document (such as a Driver’s License in the United States). If any information is missing, onboarding requests it.\nStripe notifies you about any upcoming requirements updates that affect your connected accounts. You can proactively collect this information by reviewing the future requirements for your accounts.\n#Handle verification errors\nListen to the account.updated event. If the account contains any currentlydue fields when the currentdeadline arrives, the corresponding functionality is disabled and those fields are added to pastdue.\n`currentlydue``currentdeadline``pastdue`Let your accounts remediate their verification requirements by directing them to the Stripe-hosted onboarding form.\n#Handle the connected account returning to your platformServer-side\nThe Account Link requires a refreshurl and returnurl to handle all cases in which the connected account is redirected back to your platform. It’s important to implement these correctly to provide the best onboarding flow for your connected accounts.\n`refreshurl``returnurl`#### Note\nYou can use HTTP for your refreshurl and returnurl while you’re in test mode (for example, to test locally), but for live mode only HTTPS is accepted. Be sure you’ve swapped any testing URLs for HTTPS URLs before going live.\n`refreshurl``returnurl`### Refresh URL\nYour connected account is redirected to the refreshurl when:\n`refreshurl`- The link is expired (a few minutes went by since the link was created).\n• The link was already visited (the connected account refreshed the page or clicked the back or forward button).\n• The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which causes them to become expired.\nThe refreshurl should call a method on your server to create a new Account Link with the same parameters and redirect the connected account to the new Account Link URL.\n`refreshurl`### Return URL\nStripe redirects the connected account back to this URL when they complete the onboarding flow or click Save for later at any point in the flow. It does not mean that all information has been collected, or that there are no outstanding requirements on the account. It only means the flow was entered and exited properly.\nNo state is passed with this URL. After a connected account is redirected to the returnurl, determine if the account has completed onboarding. Retrieve the account and check the requirements attribute for outstanding requirements. Or, listen to the account.updated event sent to your webhook endpoint and cache the state of the account in your application. If the account hasn’t completed onboarding, provide prompts in your application to allow them to continue onboarding later.\n`returnurl``account.updated`## Handle connected account-initiated updatesServer-side\nStripe-hosted onboarding also supports connected account-initiated updates to the information they’ve already provided. Listen to the account.updated event sent to your webhook endpoint to be notified when the account completes requirements and updates their information.\n`account.updated`When you create an Account Link, you can set the type to either accountonboarding or accountupdate.\n`type``accountonboarding``accountupdate`### Account onboarding\nAccount Links of this type provide a form for inputting outstanding requirements. Use it when you’re onboarding a new connected account, or when an existing user has new requirements (such as when a connected account had already provided enough information, but you requested a new capability that needs additional info). Send them to this type of Account Link to just collect the new information you need.\n#Account update\nAccount Links of this type are enabled for accounts where your platform is responsible for requirement collection. accountupdate links display the attributes that are already populated on the account object and allows your connected account to edit previously provided information (for example, they need to update their address). Provide an option in your application (for example, “edit my profile” or “update my verification information”) for connected accounts to make updates themselves.\n`account_update`## Supported browsers\nStripe-hosted onboarding supports:\n• The last 20 major versions of Chrome and Firefox\n• The last two major versions of Safari and Edge\n• The last two major versions of mobile Safari on iOS\nStripe-hosted onboarding is only supported in web browsers and cannot be used in embedded web views inside mobile or desktop applications."}, {"path": "connect\\how-connect-works.md", "url": "https://docs.stripe.com/connect/how-connect-works", "content": "#How Connect works | Stripe Documentation\nURL: https://docs.stripe.com/connect/how-connect-works\n\n#How Connect works\n#Learn how Connect's features support multiparty integrations.\nBusinesses such as marketplaces and software platforms use Connect to manage and route payments and payouts between sellers, customers, service providers, and other entities.\n• Onboarding: Onboard and verify sellers using connected accounts with Stripe-hosted flows, or build your own with our APIs.\n• Account management: Enable sellers to manage their account with Stripe-hosted Dashboards, embedded components, or custom interfaces you can build with our APIs.\n• Payments: Integrate payments and route funds to sellers on your platform.\n• Payouts: Pay out sellers with a variety of payout options. Enable cross-border payouts for global sellers.\n• Platform tools: Manage your platform or marketplace with a sophisticated suite of platform tooling for monetization, seller support, risk management, and tax reporting.\n#Elements of a Connect integration\nA Connect integration consists of five main components:\n• Your platform’s web or mobile application\n• Your platform’s Stripe account\n• Connected accounts\n• Stripe payments\n• Stripe payouts\nWhen onboarding to Connect, you create a Connect application on your platform’s Stripe account. The Connect application allows you to create and access data on your connected accounts. You use your Stripe API keys to make API requests on behalf of your connected accounts.\nConnect offers a number of different options for onboarding connected accounts and creating payments and payouts on them. Giving connected accounts access to Stripe-hosted Dashboards and embedded components lets you customize their financial workflows while minimizing your development effort and time to launch.\nConnect charge types offer different ways to orchestrate payments to your connected accounts, whether enabling them to accept payments directly or facilitating payments between multiple sellers. Connect payouts enable you to manage payout timing, destination payout accounts, and payout monetization on your connected accounts.\n#Availability\nThe countries where you can have connected accounts depends on the business location of your platform’s country:\n• Cross-border payouts: If your platform qualifies, you can pay out connected accounts in their local currencies.  Stripe determines if your platform meets the criteria to support cross-border payouts.\n• Extra features: If using Connect with additional payment methods or with Stripe Terminal, country availability is also dependent on those features.\nCross-border payouts: If your platform qualifies, you can pay out connected accounts in their local currencies.  Stripe determines if your platform meets the criteria to support cross-border payouts.\nExtra features: If using Connect with additional payment methods or with Stripe Terminal, country availability is also dependent on those features.\n#Country availability\n#Use cases\nConnect is highly flexible and designed to support many multiparty use cases:\n• SaaS platforms: Enable connected accounts to accept payments directly. Platforms such as Squarespace enable businesses to build their own online stores to sell directly to customers.\n• Marketplaces: Collect payments and pay out to multiple sellers. Platforms such as Airbnb connect homeowners to potential guests.\n• Top-up and pay out: Pay out to accounts without accepting payments. Add funds to your platform account and then transfer funds to your connected accounts without processing payments on Stripe.\n• In-person payments: Add Stripe Terminal to your multiparty integration. Enable your connected accounts to accept in-person payments alongside online payments with a single integration.\n#Design an integration\nTo determine how to build a Connect integration for your use case:\n# Complete the Connect platform onboarding process or view example integrations.\n# After onboarding, review your integration guide. The guide is customized with selections you’ve made in platform onboarding.\n# Follow the onboarding quickstart to set up and start using your integration."}, {"path": "connect\\identify-forms-missing-information.md", "url": "https://docs.stripe.com/connect/identify-forms-missing-information", "content": "#Remediate missing tax information | Stripe Documentation\nURL: https://docs.stripe.com/connect/identify-forms-missing-information\n\n#Remediate missing tax information\n#Learn how to find and correct forms with missing information.\nStripe automatically identifies forms that are above the IRS or state filing thresholds. In addition to the totals, a 1099 form also needs to have the name, address, and TIN of the connected account on the form to be ready for filing.\nIf a form is above the threshold (has a filing obligation) and has the name, address, and TIN on the form, Stripe labels the form Ready:\n`Ready`If you need to file a form but the form is missing this key information, Stripe labels the form Needs attention:\n`Needs attention`Refer to the Get started with tax reporting guide to learn more about tax form statuses.\nThe following information describes how to track what forms have Needs attention status, why they have that status, and what to do to get their status to Ready.\n`Needs attention``Ready`## Identity forms in that need attention\nThe Needs attention tab lists all forms with a Needs attention status.\n`Needs attention`#### Note\nSome forms that appear to be below the federal filing threshold can also appear as Ready or Needs attention due to Grouped TINs or state filing thresholds. Learn more\n`Ready``Needs attention`The Payee details section lists the missing data that causes the form to have a Needs attention status:\n`Needs attention`Refer to the Required verification information for taxes guide for information on what information is needed for each form.\nThe reasons a form might have a Needs attention status include:\n`Needs attention`- Missing address: The line1, city, state, or postal code is missing.\n• Missing TIN: The TIN is missing.\n• Mismatched TIN: The name and TIN are present on the form, but failed Stripe’s TIN verification with the IRS as they didn’t match IRS records. Learn more about Tax form TIN status.\n• Missing name: The name is missing from the account. This reason is rare.\nUse the filter to retrieve forms based on the reason for the Needs attention status:\n`Needs attention`## Remediation options\nThere are several ways to fix forms that need attention.\n#Scenario A: You’re able to retrieve the data\nThese are your options if you already have this data or able to retrieve it outside of Stripe.\n• Option 1 Recommended:  If you already have this data in your internal systems, or have a way to reach out to your connected account owners to collect this information directly, use the Accounts API to send that data to Stripe. Make sure these required fields are present on the Accounts API. After you send the data to Stripe, it appears in the tax form within 24-36 hours, and the form automatically transitions from Needs attention to Ready.\n• Option 2: Use CSV imports to get this data into the current year’s tax forms. If the CSV process imports all of the required information, the tax form automatically transitions from Needs attention to Ready. Importing these details using CSV only updates this information on the tax form, and doesn’t update the source of truth within Stripe. As a result, the connected account details view doesn’t show these updates.\n• Option 3: If you need to update only a few forms, you can choose to directly modify the forms in the Dashboard using the Tax Form Editor.\n`Needs attention``Ready``Needs attention``Ready`## Scenario B: You want Stripe to help get the data\nThese are your options if you don’t have the required information and you want Stripe to help you obtain this data. Stripe recommends using both options to for the best chance of collecting all the information for filing.\n• Option 1: If you enable e-delivery through an interface built by Stripe, connected account owners eligible for IRS filing receive emails from Stripe requesting confirmation of their tax information and to update their delivery preferences through that interface. If you implemented Connect embedded components, the email directs them to the embedded component. Otherwise, it directs them to the Stripe Express Dashboard. Connected account owners can then view and edit their personal details, including name, address, and TIN.\n• Option 2: Use Stripe Onboarding to collect missing detailsAdd the 1099 capability on your accounts programmatically or one-by-one using the Connect Dashboard. By adding the 1099 capability, you make name, address, and TIN a requirement on all your connected accounts. If your connected accounts have more than 600 USD in lifetime volume and don’t have name, address, and verified TIN on file, payouts are paused until Stripe has that information.There’s another feature in private preview called Additional Verifications that allows platforms to add TIN and address requirements on their connected accounts, along with flexibility on when to disable payouts. Reach out to your account manager to learn more.You can route your user to a Stripe surface to complete their requirements.For accounts with access to the Express Dashboard or embedded components where Stripe owns the requirement collection, Stripe automatically detects when there are currentlydue requirements (such as address or TIN) on the account and sends the connected account owner an email.For other accounts without access to a Stripe Dashboard, including Custom accounts, create account links and route your users to Stripe onboarding for Custom accounts.\nOption 1: If you enable e-delivery through an interface built by Stripe, connected account owners eligible for IRS filing receive emails from Stripe requesting confirmation of their tax information and to update their delivery preferences through that interface. If you implemented Connect embedded components, the email directs them to the embedded component. Otherwise, it directs them to the Stripe Express Dashboard. Connected account owners can then view and edit their personal details, including name, address, and TIN.\nOption 2: Use Stripe Onboarding to collect missing details\n# Add the 1099 capability on your accounts programmatically or one-by-one using the Connect Dashboard. By adding the 1099 capability, you make name, address, and TIN a requirement on all your connected accounts. If your connected accounts have more than 600 USD in lifetime volume and don’t have name, address, and verified TIN on file, payouts are paused until Stripe has that information.There’s another feature in private preview called Additional Verifications that allows platforms to add TIN and address requirements on their connected accounts, along with flexibility on when to disable payouts. Reach out to your account manager to learn more.\n# You can route your user to a Stripe surface to complete their requirements.For accounts with access to the Express Dashboard or embedded components where Stripe owns the requirement collection, Stripe automatically detects when there are currentlydue requirements (such as address or TIN) on the account and sends the connected account owner an email.For other accounts without access to a Stripe Dashboard, including Custom accounts, create account links and route your users to Stripe onboarding for Custom accounts.\n• There’s another feature in private preview called Additional Verifications that allows platforms to add TIN and address requirements on their connected accounts, along with flexibility on when to disable payouts. Reach out to your account manager to learn more.\n• For accounts with access to the Express Dashboard or embedded components where Stripe owns the requirement collection, Stripe automatically detects when there are currentlydue requirements (such as address or TIN) on the account and sends the connected account owner an email.\n• For other accounts without access to a Stripe Dashboard, including Custom accounts, create account links and route your users to Stripe onboarding for Custom accounts.\n`currentlydue`"}, {"path": "connect\\identity-verification.md", "url": "https://docs.stripe.com/connect/identity-verification", "content": "#Identity verification for connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/identity-verification\n\n#Identity verification for connected accounts\n#Use identity verification to reduce risk on your platform when using Connect.\nEvery country has its own requirements that accounts must meet so that Stripe can pay out funds to individuals and companies. These are typically known as Know Your Customer (KYC) requirements. Regardless of the country, broadly speaking, the requirements Stripe must meet are:\n• Collecting information about the individual or company receiving funds\n• Verifying information to establish that we know who our customers are\nConnect platforms collect the required information from users and provide it to Stripe. This can include information about the legal entity and personal information about the representative of the business, and those who own or control the business. Stripe then attempts verification. In some cases, Stripe might be able to verify an account by confirming some or all of the keyed-in data provided. In other cases, Stripe might require additional information, including, for example, a scan of a valid government-issued ID, a proof of address document, or both.\nThis page explains the verification flow options to meet Stripe KYC requirements, but the recommended way to manage verification is to integrate Connect Onboarding, which lets Stripe take care of the complexity around the basic KYC obligations. Handling the details of account verification is initially complex and requires vigilance to keep up with the constantly evolving regulatory changes around the world.\nIf you decide to handle account verification yourself, continue reading to learn about the verification flow options, how API fields translate to companies and individuals, and how to localize information requests. Also, read Handling Identity Verification with the API to learn how to programmatically provide information and handle requests.\nEven after Stripe verifies a connected account, platforms still must monitor for and prevent fraud. Don’t rely on Stripe’s verification to meet any independent legal KYC or verification requirements.\n#Verification requirements\nVerification requirements for connected accounts vary by account, depending on:\n• Country\n• Capabilities\n• Business type (for example, individual, company)\n• Business structure (for example, public corporation, private partnership)\n• The service agreement type between Stripe and the connected account\n• The risk level\nYou must collect and verify specific information to enable charges and payouts. For example, for a company in the US, you might need to collect:\n• Information about the business (for example, name, address, tax ID number).\n• Information about the person opening the Stripe account (for example, name, date of birth).\n• Information about beneficial owners (for example, name, email).\nAt certain variable thresholds—usually when a specified amount of time has passed or volume of charges have been made—you might need to collect and verify additional information. Stripe temporarily pauses charges or payouts if the information isn’t provided or verified according to the thresholds for required information. For example, additional information might include verification of the company tax ID number.\n#Onboarding flows\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the eventuallydue requirements for the account, while incremental onboarding only collects the currentlydue requirements.\n`eventuallydue``currentlydue`|  | Upfront onboarding | Incremental onboarding |\n --- | --- | --- \n Advantages | Entails a single request for information (normally)Creates fewer problems in receiving payouts and maintaining processing abilityExposes potential fraudsters or connected accounts who refuse to provide required information later | Onboards connected accounts quicklyResults in higher onboarding rates \n Disadvantages | Onboarding connected accounts can take longerSome legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | Creates a higher likelihood of disrupting business of an ongoing connected account \n• Entails a single request for information (normally)\n• Creates fewer problems in receiving payouts and maintaining processing ability\n• Exposes potential fraudsters or connected accounts who refuse to provide required information later\n• Onboards connected accounts quickly\n• Results in higher onboarding rates\n• Onboarding connected accounts can take longer\n• Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process\n• Creates a higher likelihood of disrupting business of an ongoing connected account\nTo determine whether to use upfront or incremental onboarding, review the required information for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\nFor connected accounts where you’re responsible for requirement collection, you can customize the behavior of future requirements using the collectionoptions parameter. Set collectionoptions.futurerequirements to include to collect the account’s future requirements.\n`collectionoptions``collectionoptions.futurerequirements``include`## Business type\nThe specific KYC information depends on the type of business entity. they’re:\n• individual: Collect information about the person.\n• company: Collect information about the company. Depending on the countries your connected accounts are in, you might also have to collect information about beneficial owners.\n• nonprofit: Collect information about the non-profit organization.\n• governmententity (available for US connected accounts only): Collect information about the government entity.\n`individual``company``nonprofit``governmententity`If you or your users are unsure of their entity type, the information might be in the business formation documents or tax documents for that entity.\nSee the list of requirements for different business types by country. When you know what information to collect, you can read more about handling identity verification with the API.\n#Business structure\nFor all business types other than individual, you can further classify your user’s business by identifying its legal (business) structure. A business structure describes the details of a business entity such as day-to-day operations, tax burdens, liability, and organizational schema. You can classify it by using company[structure] in the Account object.\n`individual``Account`Providing this information to Stripe gets you the most accurate business classification for compliance purposes. While it isn’t required, it can reduce onboarding requirements. For example, owner information is required for private companies, but not required for public companies. By default, a company is considered private if information on the company.structure isn’t provided.\n`company``company.structure`### Companies\nSee the table below for descriptions of the different business structures that you can use to classify a company. Refer to the US required verification information section for more details on requirements.\n`company`If you or your users think the entity type should be company but are unsure, the information might be in the business formation documents or tax documents for that entity.\n`company`| Business structure | Description |\n --- | --- \n multimemberllc | A business with multiple owners or members that’s registered in a US state as a Limited Liability Company (LLC). \n privatecorporation | A business incorporated in a US state that’s privately owned. It doesn’t have shares that are traded on a public stock exchange. It’s also called a closely-held corporation. If you’re a single-member LLC that has elected to be treated as a corporation for tax purposes, use this classification. \n privatepartnership | A business jointly owned by two or more people that’s created through a partnership agreement. \n publiccorporation | A business incorporated under the laws of a US state. Ownership shares of this corporation are traded on a public stock exchange. \n publicpartnership | A business formed by a partnership agreement with one or more people, but has shares that are publicly traded on a stock exchange. \n singlememberllc | A business entity registered with a US state as a limited liability company (LLC) and that has only one member or owner. \n soleproprietorship | A business that isn’t a separate legal entity from its individual owner. \n unincorporatedassociation | A business venture of two or more people that doesn’t have a formal corporate or entity structure. \n`multimemberllc``privatecorporation``privatepartnership``publiccorporation``publicpartnership``singlememberllc``soleproprietorship``unincorporatedassociation`### Non-profits\nSee the table below for descriptions of the different business structures that you can use to classify a nonprofit with. Refer to the US required verification information section for more details on requirements.\n`nonprofit`| Business structure | Description |\n --- | --- \n incorporatednonprofit | An organization incorporated under the laws of a US state that has obtained tax-exempt status as a non-profit entity under either state or federal law (for example, 501(c)(3)). \n unincorporatednonprofit | An organization that’s pursuing an objective other than profits, such as a social cause, and has obtained tax-exempt status in the US under either state or federal law (for example, 501(c)(3)) but hasn’t formally incorporated. \n`incorporatednonprofit``unincorporatednonprofit`### Government entities\nSee the table below for descriptions of the different business structures that you can use to classify a governmententity with. Refer to the US required verification information section for more details on requirements.\n`governmententity`| Business structure | Description |\n --- | --- \n governmentinstrumentality | An organization formed by a government statute or body based in the US to perform a certain function, but not the actual government body itself. \n governmentalunit | A branch of the state, local, or federal government of the US \n taxexemptgovernmentinstrumentality | An organization created by or pursuant to government statute and operated for public purposes. It has obtained federal tax-exempt status under state or federal law (for example, 501(c)(3)). \n`governmentinstrumentality``governmentalunit``taxexemptgovernmentinstrumentality`## Internationalization and localization\nIf you support users in multiple countries, consider internationalization and localization when asking for information. Creating an interface that uses not only the user’s preferred language but also the proper localized terminology results in a smoother onboarding experience.\nFor example, instead of requesting a business tax ID from your users, regardless of country, request:\n• EIN, US\n• Business Number, Canada\n• Company Number, UK\nYou can find recommended country-specific labels along with the other required verification information.\n#See also\n• Stripe-hosted onboarding\n• Updating Accounts\n• Handling additional verifications with the API\n• Account tokens\n• Required verification information\n• Testing verification"}, {"path": "connect\\instant-payouts.md", "url": "https://docs.stripe.com/connect/instant-payouts", "content": "#Instant Payouts for Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/instant-payouts\n\n#Instant Payouts for Connect\n#Offer connected accounts immediate access to their funds with instant payouts.\nWith Instant Payouts, Connect platforms and marketplaces can allow their users to access their balances immediately following a successful charge. Instant Payouts are available at any day or time, including weekends and holidays, and funds typically settle in the associated bank account within 30 minutes.\nYou can use Instant Payouts to:\n• Attract and retain new users\n• Realize additional revenue by assessing a fee\nFunds acquired from card payments are available for Instant Payouts as soon as the charge is complete. ACH or bank debits are only available for Instant Payouts after the payment has settled.\n#Eligible connected accounts\nInstant Payouts are only available for connected accounts that are in the same country as the platform and must use the local currency.\n#External Account eligibility\nTo receive Instant Payouts, a user must have an eligible external account. An external account in the context of Stripe Connect refers to a bank account or debit card associated with a connected account, and eligiblity varies by country.\nIf you’re responsible for connected accounts (including Custom and Express accounts), that might not be able to refund negative balances, enable Stripe-hosted onboarding and dashboard interfaces to collect debit card details. To enable this, navigate to your External Account settings, and under Allow debit cards?, select Yes.\n Country | Eligible External Account Type \n --- | --- \n US | Debit card; some bank accounts (check supported banks) \n Canada, Singapore, Australia | Debit card (check supported banks) \n United Kingdom, European Union | Bank account (check supported banks) \nYou can verify Instant Payout eligibility for your user by calling the External Accounts API with the Connected Account ID. The response returns the account’s 10 most recently active External Accounts, and those with instant in the availablepayoutmethods parameter are eligible for Instant Payouts. You can paginate through the results if you need to review more than the default display of 10.\n`instant``availablepayoutmethods`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"bankaccount\",\n      \"availablepayoutmethods\": [\n        \"standard\",\n        \"instant\"\n      ],\n      ...\n    }\n  ],\n}\n`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"bankaccount\",\n      \"availablepayoutmethods\": [\n        \"standard\",\n        \"instant\"\n      ],\n      ...\n    }\n  ],\n}`### Invite users to add eligible accounts\nIf your user doesn’t have an External Account eligible for Instant Payouts, you can prompt them to add an eligible account through the Account API.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d externalaccount={{BANKACCOUNTTOKENID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d externalaccount={{BANKACCOUNTTOKENID}}`## Monetization and fees\nSome marketplaces and platforms choose to monetize Instant Payouts, offering the convenience for a fee. If you monetize Instant Payouts, Stripe supports two methods of fee collection: Application Fees and account debits\n#Application Fees\nWith Application Fees, Stripe collects the fee you determine and initiates the Instant Payout synchronously. Stripe recommends applying an application fee because it’s a single, seamless transaction:\n• Users can’t pay out more than their available balance\n• Fees can be refunded through the API or the Dashboard\n• Monetization options include fixed or variable fees with minimums and maximums\n• Fees are paired to your Instant Payouts revenue with the Payout Object, helping with reporting and reconciliation. You can view your collected fees in the Payments tab on the Dashboard\nTo use Application Fees, set your pricing structure using the Dashboard.\n#Caution\nApplication Fees for Instant Payouts rely on the Balance API net-of-fees  field. Turning this on without using the new field could break your API integration.\n#Account Debits\nYou can directly debit your connected account’s Stripe balance and credit your platform account’s Stripe balance to collect fees. After the Instant Payout, call the Charge API, specifying the connected account ID as the source parameter. Consider the following limitations when using account debits to collect Instant Payout fees:\n`source`- You must get legally binding consent from your connected accounts.\n• Account debits carry an additional cost.\n• Debiting an account can’t make the connected account balance become negative unless you have reserves enabled (on by default for all new platforms created after January 31, 2017) and have a bank account in the same currency as the debit.\n• If the connected account has already paid out their available balance in full, you might be delayed in collecting the fee.\n• Reconciliation requires maintaining an internal database of debits and related payouts.\n#Initiate an Instant Payout\nYou can initiate Instant Payouts either manually on your users’ behalf or you can use the Stripe APIs to compose user interfaces to allow your users to initiate an Instant Payout. In circumstances where you initiate Instant Payouts on your users’ behalf, you may only do so in accordance with instructions and authorizations given by your users.\n# Call retrieve balance, expanding instantavailable-netavailable.\nThe property instantavailable.netavailable is the connected account’s instant balance net of platform fees for each instantly available destination. You must use this field if you’re monetizing with Application Fees. This amount is calculated from the platform’s Application Fee pricing structure set in the Dashboard.\n`instantavailable.netavailable`The property instantavailable.amount is the connected account’s gross balance, not including any platform fees.\n`instantavailable.amount`The following example shows a platform setting 2% pricing for any USD Instant Payout:\ncurl -G https://api.stripe.com/v1/balance \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"expand[]\"=\"instantavailable.netavailable\"\n`curl -G https://api.stripe.com/v1/balance \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"expand[]\"=\"instantavailable.netavailable\"`{\n  \"object\": \"balance\",\n  \"available\": [\n    {\n      \"amount\": 500,\n      \"currency\": \"usd\",\n      \"sourcetypes\": {\n        \"card\": 500\n      }\n    }\n  ],\n  \"instantavailable\": [\n    {\n      \"amount\": 500,\n      \"currency\": \"usd\",\n      \"netavailable\": [\n        {\n          \"amount\": 490,\n          \"destination\": \"baabc123\",\n          \"sourcetypes\": {\n            \"card\": 490\n          }\n        }\n      ],\n      \"sourcetypes\": {\n        \"card\": 500\n      }\n    }\n  ],\n  ...\n}\n`{\n  \"object\": \"balance\",\n  \"available\": [\n    {\n      \"amount\": 500,\n      \"currency\": \"usd\",\n      \"sourcetypes\": {\n        \"card\": 500\n      }\n    }\n  ],\n  \"instantavailable\": [\n    {\n      \"amount\": 500,\n      \"currency\": \"usd\",\n      \"netavailable\": [\n        {\n          \"amount\": 490,\n          \"destination\": \"baabc123\",\n          \"sourcetypes\": {\n            \"card\": 490\n          }\n        }\n      ],\n      \"sourcetypes\": {\n        \"card\": 500\n      }\n    }\n  ],\n  ...\n}`#### Note\nFunds from card charges are available immediately, but funds from bank debits (such as ACH) aren’t available immediately.\nKey considerations:\n• netavailable only appears when included as an expanded parameter.\n• netavailable only appears for connected accounts. You’ll receive an error expanding this for your platform.\n• A hash in netavailable only appears for instantly-available external accounts. External accounts that aren’t valid instant payouts destinations won’t appear.\n• External accounts can have different netavailable balances based on external account properties and platform-set pricing rules.\n`netavailable``netavailable``netavailable``netavailable`1. Call create payout with method=instant. Use the amount field corresponding with your monetization strategy, either instantavailable.amount or instantavailable.netavailable[0].amount. Use the destination from the balance endpoint to pay out to an intended external account.\n`method=instant``instantavailable.amount``instantavailable.netavailable[0].amount``destination`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=490 \\\n  -d currency=usd \\\n  -d method=instant \\\n  -d destination={{BANKACCOUNTTOKENID}}\n`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=490 \\\n  -d currency=usd \\\n  -d method=instant \\\n  -d destination={{BANKACCOUNTTOKENID}}`#### Caution\nInstant payouts to ineligible external accounts will fail, so confirm eligibility before surfacing the capability to your connected accounts.\n# View your application fee that was created by the payout.\ncurl https://api.stripe.com/v1/applicationfees/{{APPLICATIONFEEID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl https://api.stripe.com/v1/applicationfees/{{APPLICATIONFEEID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`## Eligibility and daily volume limits\nYour account has a maximum amount it can pay out instantly per day across all connected accounts. Your users can’t initiate Instant Payouts after you reach your daily limit. Daily limits reset at midnight US Central Time (CT).\n#Pricing\nIrrespective of your monetization decisions, Stripe charges marketplaces and platforms a 1% fee for all Instant Payouts. Each Instant Payout transaction has a minimum and maximum amount dependent on the currency. These fees are assessed as part of your overall Connect fees.\n Country | Instant Payout minimum | Instant Payout maximum \n --- | --- | --- \n US | 0.50 USD | 9,999 USD \n Canada | 0.60 CAD | 9,999 CAD \n Singapore | 0.50 SGD | 9,999 SGD \n United Kingdom | 0.40 GBP | 9,999 GBP \n Australia | 0.50 AUD | 9,999 AUD \n European Union | 0.40 EUR | 9,999 EUR \n#Manage risk and eligibility\nWhen platforms and marketplaces are liable for losses, you’re liable for uncovered negative balances due to refunds or disputes.\nStripe recommends setting risk parameters to protect your platform from unintended losses. We provide a number of best practices for managing fraud and risk, such as setting trust thresholds like the following:\n• Minimum processing volume\n• Days active\n• Chargeback rate\n#Marketing\nYour marketing of Instant Payouts to Connected Accounts must clearly and conspicuously disclose any fees you intend to apply for Instant Payouts.\nMake sure your marketing is consistent with Stripe’s marketing of the product, which states that: “You can request Instant Payouts 24/7, including weekends and holidays, and funds typically appear in the associated bank account within 30 minutes”. Some Instant Payouts might not settle within 30 minutes, and instead might take longer to be credited to the relevant bank account."}, {"path": "connect\\integrate-express-dashboard.md", "url": "https://docs.stripe.com/connect/integrate-express-dashboard", "content": "#Integrate the Express Dashboard in your platform | Stripe Documentation\nURL: https://docs.stripe.com/connect/integrate-express-dashboard\n\n#Integrate the Express Dashboard in your platform\n#Learn how to direct your connected accounts to their Express Dashboard using login links.\nThe Express Dashboard allows connected accounts to view their available balance, see upcoming payouts, and track their earnings in real time. This guide shows how to implement login links that redirect connected accounts from your platform to their Express Dashboards.\nYour live mode connected accounts can also access the Express Dashboard by logging into Stripe Express. However, you can provide login links from your platform to facilitate the log in process.\n#Create a login link\nUse the Login Link API to generate a URL for an account-specific Express Dashboard login page.\ncurl -X POST https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/loginlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl -X POST https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/loginlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`A successful response returns the generated login link URL:\n{\n  \"object\": \"loginlink\",\n  \"created\": 1495580507,\n  \"url\": \"https://stripe.com/express/Ln7FfnNpUcCU\"\n}\n`{\n  \"object\": \"loginlink\",\n  \"created\": 1495580507,\n  \"url\": \"https://stripe.com/express/Ln7FfnNpUcCU\"\n}`## Redirect to the login link\nTypically, you generate a login link URL on demand when a connected account intends to visit the Express Dashboard. For example, you include an Open Dashboard button in your application. When a connected account user clicks it, your application calls the API to generate a login link and redirects them to that URL.\n#Security tip\nDon’t email, text, or otherwise send login link URLs outside of your platform. Redirect authenticated users to it only from within your platform application.\nWhen you redirect a connected account user to a login link, Stripe sends an SMS authentication code to their phone number. They verify their identity on the Express Dashboard login page by entering the code.\nIf they don’t have access to their account phone number, they can change it by clicking I no longer have access to this phone number. This sends a verification code to their account email. They can change the account phone number by entering the code. If the user changes the number, Stripe redirects them to the Express Dashboard login page and sends an SMS authentication code to the new number.\n#See also\n• Customize the Express Dashboard\n• Collect payments and then pay out (if you process payments with Stripe)\n• Pay out money (if you add money from a bank account to pay out)"}, {"path": "connect\\invoices.md", "url": "https://docs.stripe.com/connect/invoices", "content": "#Create invoices with Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/invoices\n\n#Create invoices with Connect\n#With Connect, you can create invoices for connected accounts, optionally taking fees in the process.\nYou can create invoices for connected accounts, which support several approaches for collecting payments. You can use direct charges to create them directly on the connected account. Alternatively, you can create invoices on the platform with transfers to the connected account by using destination charges. You can also take an application fee on these invoices.\n#Note\nInvoice transactions are based on Invoicing pricing.\n#Create an invoice using direct charges\nTo create an invoice that directly charges on a connected account, create an invoice while authenticated as the connected account. For this to work, the customer must be defined on the connected account.\ncurl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"\n`curl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"`As with creating a direct charge on a connected account, you can create a customer on a connected account by using either the platform’s publishable key or the connected account’s publishable key. You can also create a token by using shared customers. When you use direct charges, the connected account is responsible for the cost of the Stripe fees, refunds, and chargebacks.\n#Create an invoice using destination charges\nTo create an invoice that charges on the platform and creates automatic transfers to a connected account, create an invoice while providing the connected account ID as the transferdata[destination] value.\n`transferdata[destination]`curl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}`For this to work, the customer must be defined on the platform account, and you must create the connected account token by using the platform’s publishable key. If charging a customer, the customer must exist within the platform account. When using automatic transfers, the platform is the business of record.\n#Display Connected Account Tax IDs and Business Details on your Invoices\nCertain regions have regulatory requirements for merchants to show their tax IDs and other business details on customer-facing documents.\nIn some cases, you can fulfill these requirements by displaying information about a connected account instead of information about your platform. The following steps show how to render a connected account’s tax ID and business details on invoice emails, invoice PDFs, Hosted Invoice Pages, and invoice receipts:\n# Create tax IDs for your connected account.\n# Set default tax IDs for your connected account.\n# Specify the connected account either using the onbehalfof parameter or as the issuer on existing or new invoices, subscriptions, and subscription schedules.\n`onbehalfof``issuer`### Create tax IDs for your connected account\nThe following example creates a single tax ID for the connected account. Stripe stores the tax ID on the connected account. To create additional tax IDs, call the endpoint again.\ncurl https://api.stripe.com/v1/taxids \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d type=euvat \\\n  -d value=DE123456789\n`curl https://api.stripe.com/v1/taxids \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d type=euvat \\\n  -d value=DE123456789`### Set default tax IDs for your connected account\nStripe automatically pulls default tax IDs from the invoice issuer’s account during finalization unless accounttaxids is already set on the invoices.\n`issuer``accounttaxids`You can set the tax IDs stored on the connected account as the default tax IDs for that account. The following example sets existing tax IDs as default tax IDs:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[invoices][defaultaccounttaxids][0]\"=atxi123 \\\n  -d \"settings[invoices][defaultaccounttaxids][1]\"=atxi456\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[invoices][defaultaccounttaxids][0]\"=atxi123 \\\n  -d \"settings[invoices][defaultaccounttaxids][1]\"=atxi456`### Set issuer on existing or new invoices, subscriptions, and subscription schedules as the connected account\nThe following example sets issuer on an existing subscription. During invoice finalization, subscription invoices pull in the issuer’s default tax IDs:\n`issuer`curl https://api.stripe.com/v1/subscriptions/{{SUBSCRIPTIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"invoicesettings[issuer][type]\"=account \\\n  -d \"invoicesettings[issuer][account]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/subscriptions/{{SUBSCRIPTIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"invoicesettings[issuer][type]\"=account \\\n  -d \"invoicesettings[issuer][account]\"={{CONNECTEDACCOUNTID}}`The following example sets issuer during invoice creation:\n`issuer`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"issuer[type]\"=account \\\n  -d \"issuer[account]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"issuer[type]\"=account \\\n  -d \"issuer[account]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}`Alternatively, the onbehalfof parameter also prints a connected account’s details on the invoice email, invoice PDF, Hosted Invoice Page, and invoice receipt.\n`onbehalfof`### Set account tax IDs on existing or new invoices, subscriptions, and subscription schedules\nYou can specify accounttaxids for invoices, subscriptions, and subscription schedules to override the default tax IDs. The following example sets accounttaxids on an existing subscription:\n`accounttaxids``accounttaxids`curl https://api.stripe.com/v1/subscriptions/{{SUBSCRIPTIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"invoicesettings[issuer][type]\"=account \\\n  -d \"invoicesettings[issuer][account]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"invoicesettings[accounttaxids][0]\"=txi123 \\\n  -d \"invoicesettings[accounttaxids][1]\"=txi456\n`curl https://api.stripe.com/v1/subscriptions/{{SUBSCRIPTIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"invoicesettings[issuer][type]\"=account \\\n  -d \"invoicesettings[issuer][account]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"invoicesettings[accounttaxids][0]\"=txi123 \\\n  -d \"invoicesettings[accounttaxids][1]\"=txi456`The following example sets accounttaxids during invoice creation:\n`accounttaxids`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"issuer[type]\"=account \\\n  -d \"issuer[account]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"accounttaxids[0]\"=txi123 \\\n  -d \"accounttaxids[1]\"=txi456\n`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"issuer[type]\"=account \\\n  -d \"issuer[account]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"accounttaxids[0]\"=txi123 \\\n  -d \"accounttaxids[1]\"=txi456`### Create tax IDs stored on the platform for your connected account\nThe tax ID you create is stored on the platform account instead of the connected account. The following example creates a single tax ID for the connected account without using the Stripe-Account header:\n`Stripe-Account`curl https://api.stripe.com/v1/taxids \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=euvat \\\n  -d value=DE123456789 \\\n  -d \"owner[type]\"=account \\\n  -d \"owner[account]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/taxids \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=euvat \\\n  -d value=DE123456789 \\\n  -d \"owner[type]\"=account \\\n  -d \"owner[account]\"={{CONNECTEDACCOUNTID}}`## Collect application fees\nOn the invoice, you can optionally withhold an application fee. The following example shows an applicationfeeamount for an invoice with a direct charge on the connected account:\ncurl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -d applicationfeeamount=\"10\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"\n`curl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -d applicationfeeamount=\"10\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"`This example shows an applicationfeeamount for an invoice with a destination charge:\n`applicationfeeamount`curl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -d applicationfeeamount=\"10\" \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/invoices \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d customer={{CUSTOMERID}} \\\n  -d applicationfeeamount=\"10\" \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}`## Make the connected account the settlement merchant\nTo make the connected account the settlement merchant, charge the customer using the onbehalfof parameter when you create or update the invoice. You must set onbehalfof in the API before finalizing an invoice—the Dashboard doesn’t have an interface for invoices you send on behalf of connected accounts.\n`onbehalfof``onbehalfof`Setting the onbehalfof parameter applies the branding, contact information, and account tax ID of the connected account to the invoice email, invoice PDF, Hosted Invoice Page, and invoice receipt. However, when you use onbehalfof in a sandbox, emails aren’t sent—similar to standard invoices sent using the API. While testing in a sandbox, you can verify that Stripe created an invoice by checking the Invoices page of the Dashboard.\n`onbehalfof``onbehalfof`To collect payments on behalf of the connected account, the connected account also needs to have account capabilities enabled for the relevant payment methods. You can automatically transfer payments for invoices created on behalf of the connected account by using destination charges. For more information about the onbehalfof​ parameter, refer to the relevant Connect documentation:\n`onbehalfof​`- For automatic transfers to the connected account, refer to the onbehalfof parameter details in the Create a charge guide.\n• For information on how to transfer payments manually, refer to Transfer availability.\n• For a list of account capabilities that are required to collect payments on behalf of the connected account, refer to Payment method capabilities.\n`onbehalfof`The following example shows how to use the onbehalfof parameter for a new invoice by using separate charges and transfers:\n`onbehalfof`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d onbehalfof={{CONNECTEDACCOUNTID}} \\\n  -d customer={{CUSTOMERID}}\n`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d onbehalfof={{CONNECTEDACCOUNTID}} \\\n  -d customer={{CUSTOMERID}}`As with standard destination charges, ​​you can set an applicationfeeamount on invoices. This example shows how to use onbehalfof with a destination charge and application fee.\n`applicationfeeamount``onbehalfof`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d onbehalfof={{CONNECTEDACCOUNTID}} \\\n  -d applicationfeeamount=10 \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d customer={{CUSTOMERID}}\n`curl https://api.stripe.com/v1/invoices \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d onbehalfof={{CONNECTEDACCOUNTID}} \\\n  -d applicationfeeamount=10 \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}} \\\n  -d customer={{CUSTOMERID}}`Invoices created on behalf of a connected account ​​don’t support bank transfers payment methods, such as ACH Credit Transfer and paper checks.\n#Integrate tax calculation and collection\nYou need to first determine which entity is liable for tax. The entity that’s liable for tax might be your connected account or the platform, depending on your business model. To learn more, see Stripe Tax with Connect.\n#See also\n• Create charges\n• Share customers across accounts\n• Multiple currencies"}, {"path": "connect\\legacy-transfers.md", "url": "https://docs.stripe.com/connect/legacy-transfers", "content": "#Controlling bank and debit card transfers | Stripe Documentation\nURL: https://docs.stripe.com/connect/legacy-transfers\n\n#Controlling bank and debit card transfers\n#Stripe allows platforms to entirely control the transfers for its Custom Connect accounts.\n#Caution\nThis page describes an older version of Connect. In the latest version of Connect, the legacy transfers endpoint has been deprecated in favor of payouts. The Dashboard’s user interface reflects this change, using the term “payouts” instead of transfers, regardless of your Stripe API version. Refer to bank and debit card payouts for information about the latest version of the Connect API.\n`transfers``payouts`By default, any charge you make on behalf of a connected account accumulates in the connected account’s Stripe balance and is paid out on a daily rolling basis. However, Stripe offers fine-grained control over this behavior for Custom accounts.\nYou can:\n• Set the destination bank accounts and debit cards\n• Control how frequently funds are automatically paid out\n• Perform manual transfers\n• Send funds instantly\n#Managing bank accounts and debit cards\nCustom accounts have an externalaccounts property: a list of all bank accounts and debit cards associated with the Stripe account. Any external account is a possible destination for funds.\n`externalaccounts`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"externalaccounts\": {\n    \"object\": \"list\",\n    \"hasmore\": false,\n    \"url\": \"/v1/accounts/acct14qyt6Alijdnw0EA/externalaccounts\",\n    \"data\": [\n      {\n        \"id\": \"{{BANKACCOUNTID}}\",\n        \"object\": \"bankaccount\",\n        \"account\": \"acct14qyt6Alijdnw0EA\",\n        \"accountholdername\": \"Jane Austen\",\n        \"accountholdertype\": \"individual\",\n        \"bankname\": \"STRIPE TEST BANK\",\n        \"country\": \"US\",\n        \"currency\": \"usd\",\n        \"defaultforcurrency\": false,\n        \"fingerprint\": \"sSZ2yLp0EZTH17cF\",\n        \"last4\": \"6789\",\n        \"metadata\": {\n        },\n        \"routingnumber\": \"110000000\",\n        \"status\": \"new\"\n      },\n      {...},\n      {...},\n    ],\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"externalaccounts\": {\n    \"object\": \"list\",\n    \"hasmore\": false,\n    \"url\": \"/v1/accounts/acct14qyt6Alijdnw0EA/externalaccounts\",\n    \"data\": [\n      {\n        \"id\": \"{{BANKACCOUNTID}}\",\n        \"object\": \"bankaccount\",\n        \"account\": \"acct14qyt6Alijdnw0EA\",\n        \"accountholdername\": \"Jane Austen\",\n        \"accountholdertype\": \"individual\",\n        \"bankname\": \"STRIPE TEST BANK\",\n        \"country\": \"US\",\n        \"currency\": \"usd\",\n        \"defaultforcurrency\": false,\n        \"fingerprint\": \"sSZ2yLp0EZTH17cF\",\n        \"last4\": \"6789\",\n        \"metadata\": {\n        },\n        \"routingnumber\": \"110000000\",\n        \"status\": \"new\"\n      },\n      {...},\n      {...},\n    ],\n  ...\n}`Destination accounts are added via the externalaccounts parameter when creating or updating Stripe accounts. The value should be a bank account or debit card token returned from Stripe.js. Alternatively, you can provide a hash of the bank account details, but using Stripe.js is preferred as it prevents sensitive data from hitting your server.\n`externalaccounts`When using debit cards as a transfer destination, the following restrictions apply:\n• Must be a non-prepaid US Visa, Mastercard, or Discover\n• Limited to 9,999 USD per transfer on Instant Payouts\n• Generally limited to 3,000 USD per transfer otherwise\n#Managing multiple bank and debit accounts\nBy default, providing a new value for externalaccounts while updating a Custom account replaces the existing account with the new one. To add additional bank accounts or debit cards to a connected account, use the Bank Account and Card creation API endpoints.\n`externalaccounts`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/externalaccounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d externalaccount={{BANKACCOUNTTOKENID}}\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/externalaccounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d externalaccount={{BANKACCOUNTTOKENID}}`When working with multiple currencies, Stripe automatically sends transfers to an associated bank account or debit card for its currency, thereby avoiding exchange fees. When there are multiple accounts available for a given currency, Stripe uses the one set as defaultforcurrency.\n`defaultforcurrency`Stripe maintains a list of available country/currency combinations for your reference and to help your users choose from the supported options.\n#Payout information\nWhen using automatic transfers, the transferschedule property on an account indicates how often the Stripe account’s balance is automatically paid out:\n`transferschedule`{\n  ...\n  \"transferschedule\": {\n    \"delaydays\": 7,\n    \"interval\": \"daily\"\n  },\n  ...\n}\n`{\n  ...\n  \"transferschedule\": {\n    \"delaydays\": 7,\n    \"interval\": \"daily\"\n  },\n  ...\n}`The delaydays property reflects how long it takes charges (or linked transfers) to become available for payout. This field is useful for controlling automatic payouts. For example, if you want your Custom accounts to receive their funds 2 weeks after the charge is made, set interval to daily and delaydays to 14. The default is the lowest permitted value for the account, determined by the connected account’s country. When setting or updating this field, you may pass the string minimum to choose the lowest permitted value.\n`delaydays``interval``daily``delaydays`There are four possible settings for the interval property:\n`interval`- manual prevents automatic payouts. You will have to manually pay out the account’s balance using the Transfers API (acting as the connected account). Also set an account to manual to use Instant Payouts.\n• daily automatically pays out charges delaydays days after they’re created. The delaydays value cannot be less than your own transfer schedule or less than the default transfer schedule for the account.\n• weekly automatically pays out the balance once a week, specified by the weeklyanchor parameter (a lower-case weekday such as monday).\n• monthly automatically pays out the balance once a month, specified by the monthlyanchor parameter (a number from 1 to 31).\n`manual``delaydays``delaydays``weeklyanchor``monthlyanchor`## Using manual transfers\nIf you set transferschedule[interval] to manual using the Accounts API, Stripe will hold funds in the account holder’s balance until told to pay them out (or until a maximum of 90 days have passed). To trigger a payout of these funds, use the Transfers API.\n`transferschedule[interval]``manual`The Transfers API is only for moving funds from a connected Stripe account’s balance into their external account. To move funds between Stripe accounts, see creating separate charges and transfers or creating destination charges through the platform.\n#Note\nEscrow has a precise legal definition and Stripe does not support escrow accounts. However, we do provide escrow-like behavior through manual transfers. This gives you control over transfer timing, with the ability to delay payouts to Custom accounts for up to 90 days.\nManual transfers can be used as an alternative to escrow when there may be a risk of a delayed delivery, or if there’s the possibility of a refund being needed.\n#Standard transfers\nAs a basic transfer example, to have 10 USD sent from a Custom account’s Stripe balance to their external account:\ncurl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -d \"amount\"=1000 \\\n  -d \"currency\"=\"usd\" \\\n  -d \"destination\"=\"defaultforcurrency\"\n`curl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -d \"amount\"=1000 \\\n  -d \"currency\"=\"usd\" \\\n  -d \"destination\"=\"defaultforcurrency\"`Setting destination=defaultforcurrency tells Stripe to transfer to the account’s default bank account or debit card for the given currency.\n`destination=defaultforcurrency`With a standard transfer, you can payout up to the user’s available balance. To find that amount, perform a retrieve balance call on their behalf.\nStripe tracks balance contributions from different payment sources in separate balances. The retrieve balance response breaks down the components of each balance by source type. For example, if you want to create a transfer specifically for a non-credit-card balance, specify the sourcetype in your request.\n`sourcetype`curl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"amount\"=24784 \\\n  -d \"currency\"=\"usd\" \\\n  -d \"destination\"=\"defaultforcurrency\" \\\n  -d \"sourcetype\"=\"bankaccount\"\n`curl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"amount\"=24784 \\\n  -d \"currency\"=\"usd\" \\\n  -d \"destination\"=\"defaultforcurrency\" \\\n  -d \"sourcetype\"=\"bankaccount\"`Note that it is possible for any source’s balance component to go negative (through refunds or chargebacks), and transfers can’t be created for greater than the aggregate available balance.\n#Using Instant Payouts\nWith Instant Payouts, you can immediately send funds to a Custom account’s debit card. Funds typically appear in the associated bank account within 30 minutes, making it possible to go from charge to payout in mere moments.\nTo use Instant Payouts, specify instant for the method property when creating the transfer:\n`method`curl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -d \"amount\"=1000 \\\n  -d \"currency\"=\"usd\" \\\n  -d \"method\"=\"instant\"\n`curl https://api.stripe.com/v1/transfers \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -d \"amount\"=1000 \\\n  -d \"currency\"=\"usd\" \\\n  -d \"method\"=\"instant\"`Instant Payouts differ from other manual transfers in a couple of ways:\n• You can transfer an account’s available balance plus its pending balance\n• Instant Payouts can be requested on weekends and holidays\nInitially, platforms can transfer up to 500 USD per day—in total, across all connected accounts—through Instant Payouts. Contact us if you need this threshold increased.\nInstant Payouts is available for all of the largest US banks, but a small percentage of banks do not yet support it. For those banks, you will have to fall back to standard payouts.\nWhen you add a card to an account, Stripe returns a property availablepayoutmethods in the response, which will be a set containing the payout methods Stripe supports for that card. Only values in this set should be passed as the method when creating a transfer.\n`availablepayoutmethods``method`{\n  \"id\": \"{{CARDID}}\",\n  \"object\": \"card\",\n  ...\n  \"account\": \"acct1032D82eZvKYlo2C\",\n  \"availablepayoutmethods\": [\"standard\", \"instant\"],\n}\n`{\n  \"id\": \"{{CARDID}}\",\n  \"object\": \"card\",\n  ...\n  \"account\": \"acct1032D82eZvKYlo2C\",\n  \"availablepayoutmethods\": [\"standard\", \"instant\"],\n}`If a Custom account’s card does not support Instant Payouts, you should clearly communicate to the owner of that account that they will not receive their payouts instantly.\n#Using webhooks with transfers\nAll transfer activity on connected accounts can be tracked using webhooks. (When using Connect, you should always be using webhooks.) Specific to transfers, you’ll see these events:\n• transfer.created\n• transfer.updated\n• transfer.paid\n• transfer.failed\n`transfer.created``transfer.updated``transfer.paid``transfer.failed`For most transfers, these event notifications occur over a series of days. Instant Payouts typically send transfer.paid within 30 minutes.\n`transfer.paid`If a transfer cannot be completed, a transfer.failed event occurs. The event’s  failurereason property indicates why.\n`transfer.failed``failurereason`## See also\n• Custom accounts\n• Updating accounts\n• Understanding Connect account balances"}, {"path": "connect\\legal-entity-sharing.md", "url": "https://docs.stripe.com/connect/legal-entity-sharing", "content": "#Legal Entity Sharing | Stripe Documentation\nURL: https://docs.stripe.com/connect/legal-entity-sharing\n\n#Legal Entity Sharing\n#Streamline connected account onboarding by sharing business information across accounts that belong to the same owner.\nLegal Entity Sharing enables a connected account owner to reuse certain business information, such as their legal company name or business details, during account onboarding. The information can come from their Stripe user account or from an existing connected account that they own. They don’t have to resubmit that information or repeat related Know Your Customer (KYC) processes.\nSome shared information remains synchronized between accounts. If the account owner updates it on one account, the update automatically applies to all shared accounts.\n#Use Case Example\nEmma, an artisan jeweler, has been selling her wares through a personal website that accepts payments using Stripe Checkout. Looking to expand her business, she discovers an online marketplace called Artisan Market and decides to sign up. Artisan Market is a Stripe Connect platform.\nBecause Emma is the sole proprietor for both her website and her new marketplace venture, they share the same legal entity information. When Emma onboards her connected account for Artisan Market, Legal Entity Sharing lets her reuse some of the information she provided when setting up payments for her website. She doesn’t have to resubmit documentation for that information.\nThe wider exposure increases Emma’s sales, and she decides to expand by moving her business from her home studio to a dedicated workshop in a commercial building. Because Legal Entity Sharing synchronizes company address information between shared accounts, Emma only needs to update the business address on one of her accounts. Legal Entity Sharing automatically updates the address on the other account.\n#Availability\nLegal Entity Sharing is available for accounts where Stripe is responsible for collecting requirements (the account’s controller.requirementcollection is stripe).\n`stripe`For accounts where controller.requirementcollection is platform, including Custom accounts, the account owner can copy some existing account information during onboarding. However, sharing doesn’t apply to future updates. Each account must be updated individually.\n`platform`If the platform has requested any capabilities for the new account, the owner can only share information from accounts in the same country as the new account. Otherwise, they can share information from any of their existing accounts.\nStripe-hosted and embedded onboarding flows support Legal Entity Sharing. However, embedded onboarding flows require Stripe user authentication. If you set disablestripeuserauthentication to true, your embedded onboarding flow can’t use Legal Entity Sharing.\nAPI based onboarding flows can’t use Legal Entity Sharing.\nWhen a legal entity is shared between accounts, some information is synchronized between shared accounts. If the account owner changes that information on one account, the changes automatically apply to all shared accounts. Other information can be copied from existing accounts during onboarding, but future updates to it aren’t synchronized.\n#Note\nDuring onboarding, Stripe offers Legal Entity Sharing if the authenticated account owner has any existing accounts. The owner can select an existing account to share information with the new account, or they can choose to set up the new account from scratch. If they set up the new account from scratch, they can’t share it with existing accounts later. However, they can select it to share information when onboarding new accounts.\nLegal Entity Sharing shares the following information between Accounts, and updates on one account automatically apply to shared accounts:\n• businesstype\n• country\n• company\n• individual\nLegal Entity Sharing copies the following information from an existing account during onboarding. However, future updates to this information aren’t automatically copied to shared accounts:\n• externalaccounts\n• businessprofile\n• settings.payments.statementdescriptor\n• settings.cardpayments.statementdescriptorprefix\n• settings.branding\n#Manage access\nIf you don’t want to offer this feature to your connected accounts during onboarding, you can disable it from your Dashboard.\nDisabling Legal Entity Sharing doesn’t affect existing accounts that already use the feature. It only hides the feature from new connected accounts."}, {"path": "connect\\manage-payout-schedule.md", "url": "https://docs.stripe.com/connect/manage-payout-schedule", "content": "#Manage payout schedule | Stripe Documentation\nURL: https://docs.stripe.com/connect/manage-payout-schedule\n\n#Manage payout schedule\n#Manage the automatic payout schedule to your connected accounts.\nWhen using automatic payouts, the settings.payouts.schedule hash on an Account contains details on when a Stripe account’s funds are available and when the balance is automatically paid out:\n{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"settings\": {\n    \"payouts\": {\n      \"schedule\": {\n        \"delaydays\": 7,\n        \"interval\": \"daily\"\n      },\n      ...\n    },\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"settings\": {\n    \"payouts\": {\n      \"schedule\": {\n        \"delaydays\": 7,\n        \"interval\": \"daily\"\n      },\n      ...\n    },\n    ...\n  },\n  ...\n}`## delaydays property\nThe delaydays property reflects how long it takes for onbehalfof charges (or direct charges performed on the connected account) to become available for payout. You can edit this property on accounts where you own fraud and dispute liability.\n`onbehalfof`This field is useful for dictating automatic payouts. Stripe calculates the delay in business days or calendar days based on the connected accounts’ country. For example, if you want a connected account based in Singapore (which uses calendar day delays) to receive their funds two weeks after the charge is made, set interval to daily and delaydays to 14. When setting or updating this field, you can pass the string minimum to choose the lowest permitted value.\n`interval``daily``delaydays``minimum`For accounts where Stripe manages fraud and dispute liability (for example, Standard accounts), the default is the lowest permitted value for the account, determined by the connected account’s country. If you’re opted into accelerated payout speeds, the value uses the accelerated timing. You can request to lower this by contacting Stripe Support. For accounts where you own fraud and dispute liability, the value remains at your original payout speed by default.\n#Interval property\nPlatforms that manage fraud and dispute liability, or have platform controls, can adjust the payout interval. There are four possible settings for the interval property:\n`interval`- manual: This setting prevents automatic payouts. You will have to manually pay out the account’s balance using the Payouts API (acting as the connected account). You also set an account to manual to use Instant Payouts.\n• daily: This setting automatically pays out charges delaydays days after they’re created. The delaydays value can’t be less than your own payout schedule or less than the default payout schedule for the account.\n• weekly: This setting automatically pays out the balance once a week, with the day specified by the weeklyanchor parameter (a lower-case weekday such as monday).\n• monthly: This setting automatically pays out the balance once a month, as specified by the monthlyanchor parameter (a number from 1 to 31). Payouts nominally scheduled between the 29th and 31st of the month are instead sent on the last day of a shorter month.\n`manual``delaydays``delaydays``weeklyanchor``monthlyanchor`"}, {"path": "connect\\manual-payouts.md", "url": "https://docs.stripe.com/connect/manual-payouts", "content": "#Using manual payouts | Stripe Documentation\nURL: https://docs.stripe.com/connect/manual-payouts\n\n#Using manual payouts\n#Send manual payouts to your connected accounts.\nIf you set the value of schedule.interval to manual, we hold funds in the accountholder’s balance until you specify otherwise. You must pay out the funds within the time period specified below, based on the business’s country:\n`manual`| Country | Holding Period |\n --- | --- \n Thailand | 10 days \n United States | 2 years \n All other countries | 90 days \nTo trigger a payout of these funds, use the Payouts API.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[payouts][schedule][interval]\"=manual\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"settings[payouts][schedule][interval]\"=manual`The Payouts API is only for moving funds from a connected Stripe account’s balance into their external account. To move funds between the platform and a connected account, see creating separate charges and transfers or creating destination charges through the platform.\n#Note\nEscrow has a precise legal definition, and Stripe doesn’t provide escrow services or support escrow accounts. However, you can control payout timing through manual payouts, which allow you to delay payouts to certain accounts. When using manual payouts, you must pay out funds within the time frame for the business’s country.\nDelayed payouts can be useful when a delivery is delayed or when there’s a possibility of a refund.\n#Regular payouts\nThe following example sends 10 USD from a connected account’s Stripe balance to their external account:\ncurl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=1000 \\\n  -d currency=usd\n`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=1000 \\\n  -d currency=usd`With a standard payout, you can move an amount up to the user’s available balance. To find that amount, perform a retrieve balance call on their behalf.\nStripe tracks balance contributions from different payment sources in separate balances. The retrieve balance response breaks down the components of each balance by source type. For example, to create a payout specifically for a non-credit-card balance, specify the sourcetype in your request.\n`sourcetype`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=24784 \\\n  -d currency=usd \\\n  -d sourcetype=bankaccount\n`curl https://api.stripe.com/v1/payouts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=24784 \\\n  -d currency=usd \\\n  -d sourcetype=bankaccount`While individual balance components can go negative (such as through refunds or chargebacks), you can’t create payouts for greater than the aggregate available balance."}, {"path": "connect\\margin-reports.md", "url": "https://docs.stripe.com/connect/margin-reports", "content": "#Connect margin reports | Stripe Documentation\nURL: https://docs.stripe.com/connect/margin-reports\n\n#Connect margin reports\n#Compute your margins by analyzing your Connect volume, revenue, and fees associated with activity where you're responsible for pricing and fees.\nThe Connect margin reports show platforms their aggregated and transaction-level payment volumes, revenue, and fees associated with activity where the platform is responsible for pricing and fees. Use these reports to calculate your margins and set your fees appropriately given your underlying Stripe fees and network costs.\n#Platform support\nThese reports only support platforms that explicitly state an application fee, either directly in the API or through Platform Pricing Tools. They don’t include revenue from account debits or transferdata.amount.\n#Available margin reports\n Report type | Description | Usage \n --- | --- | --- \n Summary | Platform-level aggregated view of Connect volume, revenue, and fees | Calculate monthly margins for your platform \n Connected Account | Connected account-level view of Connect volume, revenue, and fees | Identify which connected accounts drive margins up or down \n Transaction | Transaction-level view of Connect volume, revenue, and fees | Identify which transactions drive margins up or down \nSummary margin report example\n#Access the margin reports\n# Go to the Connect Margin Report page. It’s also available in the Reports hub in your Stripe Dashboard. Margin Reports are only available in live mode, not in testing environments, such as a sandbox.\n# Using the month picker, select the time-period, then click Download on your desired Margin Report type. The report for a month is available 7 days after the end of that month.\n#User access\nUsers with the following user roles can access the Margin Reports:\n• Administrator\n• Analyst\n• Data Migration Specialist\n• Developer\n• Tax Analyst\n• View only\n#Margin report data\nMargin reports include charges based on the timestamp of the originating event, not the timestamp when a fee is assessed. For example, to view a fee assessed on February 1 for a charge created on January 31, run the report for January. These reports only support platforms that explicitly state an application fee, either directly in the API or through Platform Pricing Tools. They don’t include revenue from account debits or transferdata.amount.\nA margin report includes data for the following types of charges:\n• Connect direct charges where the platform collects application fees\n• Destination charges where the platform collects application fees, with or without onbehalfof\nIt also includes application fees and Stripe fees paid for Instant Payouts.\nIt doesn’t include data for the following types of charges:\n• Direct charges where the connected account is responsible for fees\n• Direct charges on the platform (such as SaaS subscriptions they run on the same account)\n• Separate charges and transfers\n• Direct charges initiated by a connected account\n• Direct charges for connected accounts that are no longer connected to your platform when you generate the report\n#Note\nA margin report normalizes all values to USD using the conversion rate at the time of activity. We plan to add other normalization currencies in a future release.\n#Available columns for each margin report\nThe Summary and Connected Account margin reports show aggregated monthly data, whereas the Transaction margin report shows data for individual transactions.\n#Note\nThe total amounts shown in the Summary and Connected Account margin reports are normally greater than the sum of the amounts in the Transaction margin report. That’s because the Transaction report includes only fees that apply at a transaction level. It doesn’t include out-of-band fees, such as Card Account Updater fees or non-transactional scheme fees.\n#Summary margin report\nThis report shows the aggregated volume, revenue, and fees for the platform for the entire selected month. You can calculate the net volume, revenue, or fees as the sum of all values in their category. To determine the net margin, add the net revenue and net fees.\nYou can calculate net take rate in several ways. One common method is (net margin)/net volume)×10000.\nAmount fields include:\n• subtotalamount: Amount excluding any tax\n• taxamount: Amount of tax\n• totalamount: sum of subtotalamount and taxamount\n`subtotalamount``taxamount`The Summary margin report includes the following data for the selected time period:\n Type | Category | Description \n --- | --- | --- \n Volume | Charges, Payment method = {payment method} | Volume of charges for the {payment method} payment method \n Refunds | Volume of refunds \n Disputes | Volume of disputes \n Revenue | Application fee, payment method = {payment method} | Amount of application fees for the {payment method} payment method \n Application fee refunds | Amount of application fees refunded by the platform \n Network fee (assessed by card networks) | Card payments - Transaction network costs | Interchange (or discount, for Amex) fees and transaction-level scheme fees; a single charge typically incurs one interchange fee and one or more scheme fees \n Card payments - Other network costs | Non-transactional scheme fees such as FANF (Fixed Acquirer Network Fee from Visa) directly attributable to a connected account \n Card payments - Other network costs (platform level) | Non-transactional scheme fees directly attributable to the platform itself \n Stripe fee | Stripe processing fees - {payment method} | Stripe processing fees for cards and other payment methods \n Connect - {fee type} | Connect fees, such as Account Volume Billing, Active Account Billing, and (for Stripe Managed Risk and Support) Loss Liability \n Varies | Other product fees that apply to the platform and are directly attributable to a connected account, such as for Radar and Card Account Updater \n Varies (platform level) | Other product fees that apply to the platform and are directly attributable to the platform itself, such as Card Account Updater fees for cards created on the platform \nDisconnecting an account from your platform can affect the values in the Summary margin report.\n#Connected Account margin report\nThis report shows all volume, revenue, and fees attributed to each connected account for the entire selected month. It doesn’t include any connected accounts that have been deleted or disconnected from your platform. You can use it to understand which connected accounts are margin-positive, margin-neutral, or margin-negative for your platform.\nBecause fees appear as negative numbers, you can calculate a connected account’s margin as the sum of its associated revenues and fees.\nConnected account detail fields include:\n• connectedaccountid: Unique identifier of the connected account associated with the charge\n• businessname\n• displayname\n• connectedaccountcountry: Two-letter ISO code representing the country of the transaction account\nThe Connected Account margin report includes the following data for the selected time period:\n Type | Category | Description \n --- | --- | --- \n Volume | amount | Sum of the amounts of all charges on the connected account, excluding any tax \n chargecount | Number of charges on the connected account \n amountrefunded | Sum of the amounts of all refunds for charges on the connected account \n refundcount | Number of charges on the connected account that were refunded \n amountdisputed | Sum of the disputed amounts on charges on the connected account \n disputecount | Number of charges on the connected account that were disputed \n Revenue | applicationfeeamount | Sum of the amounts requested by the platform to be deducted from the charge amounts across all charges on the connected account \n applicationfeeamountrefunded | Total amount of the applicationfeeamount that was refunded to the connected account \n applicationfeeinstantpayoutsamount | Sum of the application fees earned by monetizing Instant Payouts to the connected account \n applicationfeeinstantpayoutsamountrefunded | Total amount of the applicationfeeinstantpayoutsamount that was refunded to the connected account \n Fees | networkcostssubtotalamount | Sum of the Interchange (or discount, for American Express) fees and transaction-level scheme fees attributed to the connected account \n othernetworkcostssubtotalamount | Sum of the non-transactional scheme fees, such as the Fixed Acquirer Network Fee (FANF) from Visa, attributed to the connected account \n stripeperauthfeesubtotalamount | Sum of the per-authorization fees charged by Stripe for card processing with IC+ pricing attributed to the connected account \n stripevolumefeesubtotalamount | Sum of the Volume fees charged by Stripe for card processing with IC+ pricing attributed to the connected account \n stripeothercardpaymentsfeessubtotalamount | Sum of the other card processing fees charged by Stripe for card processing, such as per-dispute and per-sale fees, attributed to the connected account \n stripeprocessingfeessubtotalamount | Sum of the fees charged by Stripe for payments processing for users with IC+ pricing, such as fees for using payment methods like Affirm or AfterPay, not including Stripe card payments fees or network costs, attributed to the connected account \n stripedisputefeessubtotalamount | Sum of the dispute fees paid by the platform attributed to the connected account \n striperefundfeessubtotalamount | Sum of the refund fees paid by the platform attributed to the connected account \n adaptiveacceptancefeesubtotalamount | Sum of the adaptive acceptance fees attributed to the connected account \n cardaccountupdaterfeesubtotalamount | Sum of the card account updater fees attributed to the connected account \n connectaccountinitiationbillingfeesubtotalamount | Sum of the account initialization fees attributed to the connected account \n connectlossliabilityfeesubtotalamount | Sum of the fees charged by Stripe to cover risk losses attributed to the connected account \n connectcrossbordertransferfeesubtotalamount | Sum of the the cross-border payout transfer fees attributed to the connected account \n connectinstantpayoutfeesubtotalamount | Sum of the Instant Payout fees attributed to the connected account \n connectactiveaccountbillingfeesubtotalamount | Sum of the active connected account fees attributed to the connected account (when calculating this value, an account that didn’t receive any payouts to a bank account or debit card is not considered active) \n connectpayoutfeesubtotalamount | Sum of the connect payout fixed fees attributed to the connected account \n connectaccountvolumebillingfeesubtotalamount | Sum of the connect payout volume fees attributed to the connected account \n connectionsverificationfeesubtotalamount | Sum of the bank account verification fees attributed to the connected account \n networktokenfeesubtotalamount | Sum of the network token fees attributed to the connected account \n radarfeessubtotalamount | Sum of the radar fees, including radar for fraud teams, attributed to the connected account \n stripebillingfeessubtotalamount | Sum of the Stripe Billing fees attributed to the connected account \n stripetaxfeessubtotalamount | Sum of the Stripe tax fees attributed to the connected account \n terminalfeessubtotalamount | Sum of the terminal fees, such as tap to pay, P2PE, per-auth, and per-sale services fees, attributed to the connected account \n otherfeessubtotalamount | Sum of all other fees charged to the connected account that aren’t included in another field \n taxamount | Sum of the taxes that Stripe has charged for transactions attributed to the connected account \n currency | Currency of the values \n#Transaction margin report\nThis report shows a transaction-level breakdown of volume, revenue, and fees for the entire selected month. It doesn’t include non-transactional revenue or fees. You can use it to understand which transactions are margin-positive, margin-neutral, or margin-negative.\nBecause fees appear as negative numbers, you can calculate a transaction’s margin as the sum of its associated revenues and fees.\n#Note\nDon’t use the Transaction margin report to understand profitability at the level of a connected account. Use the Connected Account margin report.\nCharge detail fields include:\n• chargeid: Unique identifier of the charge\n• connectedaccountid: Unique identifier of the connected account associated with the charge\n• activityat: Time in UTC at which we attribute the line item\n• paymentmethodtype: Type of payment method used for the transaction, such as card, ACH credit transfer, or link\n• cardfunding: Card funding type; can be credit, debit, prepaid, or unknown\n• cardbrand: Card brand; can be American Express, Diners Club, Discover, Eftpos Australia, JCB, MasterCard, UnionPay, Visa, or Unknown\n• cardnetwork: Identifies which network processed the transaction; examples include amex, cartesbancaires, diners, discover, eftposau, interac, jcb, mastercard, unionpay, visa, unknown\n• cardcountry: Two-letter ISO code representing the country of the transaction card\n• connectedaccountcountry: Two-letter ISO code representing the country of the transaction account\n• chargetype: Type of the charge is destination (always included) or direct (included only for accounts that are connected at the time the report is generated)\n`card``ACH credit transfer``link``credit``debit``prepaid``unknown``American Express``Diners Club``Discover``Eftpos Australia``JCB``MasterCard``UnionPay``Visa``Unknown``amex``cartesbancaires``diners``discover``eftposau``interac``jcb``mastercard``unionpay``visa``unknown``destination``direct`The Transaction margin report includes the following data for the selected time period:\n Type | Category | Description \n --- | --- | --- \n Volume | amount | Amount of the charge, excluding any tax \n amountrefunded | Amount of the charge that was refunded \n amountdisputed | Amount of the charge that was disputed by the customer \n Revenue | applicationfeeamount | Amount requested by the platform to be deducted from the charge amount \n applicationfeeamountrefunded | Application fee amount that was refunded \n Cost | stripeprocessingfeessubtotalamount | Fees charged by Stripe for payments processing, such as fees for using payment methods like Affirm or AfterPay; for users with IC+ pricing, does not include Stripe card payments fees or network costs \n stripeprocessingfeestaxamount | Tax on the fees charged by Stripe for payments processing \n stripedisputefeessubtotalamount | Dispute fees charged by Stripe \n stripedisputefeestaxamount | Tax on the dispute fees charged by Stripe \n striperefundfeessubtotalamount | Stripe processing fees that were refunded \n striperefundfeestaxamount | Tax on the Stripe processing fees that were refunded \n networkcostssubtotalamount | Interchange (or discount, for Amex) fees and transaction-level scheme fees; a single charge typically incurs one interchange fee and one or more scheme fees \n networkcoststaxamount | Tax on the transaction-level network costs charged to the platform \n stripeperauthfeesubtotalamount | Per-authorization fees charged by Stripe for card processing with IC+ pricing \n stripeperauthfeetaxamount | Tax on the per-authorization fees charged by Stripe for card processing with IC+ pricing \n stripevolumefeesubtotalamount | Volume fees charged by Stripe for card processing with IC+ pricing \n stripevolumefeetaxamount | Tax on the volume fees charged by Stripe for card processing with IC+ pricing \n stripeothercardpaymentsfeessubtotalamount | Other fees charged by Stripe for card processing with IC+ pricing \n stripeothercardpaymentsfeestaxamount | Tax on the other fees charged by Stripe for card processing with IC+ pricing \n striperadarfeessubtotalamount | Radar fees charged to the platform \n striperadarfeestaxamount | Tax on the Radar fees charged to the platform \n stripeadaptiveacceptancefeesubtotalamount | Adaptive acceptance fees charged to the platform \n stripeadaptiveacceptancefeetaxamount | Tax on the adaptive acceptance fees charged to the platform \n stripeconnectlossliabilityfeesubtotalamount | Loss liability fees charged by Stripe to manage risk on the transaction \n stripeconnectlossliabilityfeetaxamount | Tax on the loss liability fees charged by Stripe to manage risk on the transaction \n stripeotherfeessubtotalamount | All other fees charged on the transaction that aren’t explicitly included in another field \n stripeotherfeestaxamount | Tax charged on the other fees \n currency | Currency of the charge and fees"}, {"path": "connect\\migrate-to-controller-properties.md", "url": "https://docs.stripe.com/connect/migrate-to-controller-properties", "content": "#Migrate your Connect integration to use controller properties instead of account types | Stripe Documentation\nURL: https://docs.stripe.com/connect/migrate-to-controller-properties\n\n#Migrate your Connect integration to use controller properties instead of account types\n#Learn how to work with account controller properties instead of specifying account types.\nYou can now configure connected accounts using account controller properties instead of defining accounts as Standard, Express, or Custom. These controller properties let you specify discrete account behaviors like which Stripe-hosted dashboard the account can access or who Stripe collects fees from. This modularity allows for more flexible configuration options.\nUsing account controller properties doesn’t require you to update your API version. Migrating your integration to use controller properties is optional. If you only use one type of connected account and aren’t interested in using a new configuration, you don’t need to update your integration.\nWe recommend you update your integration to take advantage of the increased modularity and new configurations available. The new properties are fully backwards compatible, so you can migrate your integration incrementally while continuing to work with account types.\nEach account type maps to a set of controller properties. We automatically set those properties on your existing connected accounts and on any accounts that you create with account types going forward. When you update your integration to work with controller properties, you don’t have to update any of your connected accounts.\n#Note\nYou can start using features such as embedded components without making any of the changes in this guide.\n#Before you begin\n• Learn how account controller properties work and how they map to your existing connected accounts.\n• Determine which of the new account configurations make sense for your integration.\nUpdating your integration involves:\n• Identifying code in your integration that references the account type, and updating it to reference the corresponding controller properties instead.\n• Updating your account creation process to specify controller properties instead of type. Specifying type is no longer required.\n`type``type`## Account controller properties\nYou can specify values for the controller properties when you create a connected account using the Accounts API. Any property that you don’t specify is set to a default value that has the least complex integration requirements.\nIf you’re building a new integration, you can get a configuration recommendation by completing Connect platform onboarding.\n Property | Default value | Description \n --- | --- | --- \n controller.losses.payments | stripe | Possible values:application: Your platform is responsible for negative balances and manages credit and fraud risk on the connected account, which requires you to review and acknowledge your responsibilities in the Dashboardstripe: Stripe is liable when this account can’t pay back negative balances resulting from payments. Your platform is still liable for a negative balance on your platform account. \n controller.fees.payer | account | Possible values:account: The connected account pays all Stripe fees directly to Stripe, inclusive of payment processing feesapplication: The Connect platform pays all Stripe fees, inclusive of payment processing feesapplicationcustom: The account was created with type=customapplicationexpress: The account was created with type=expressWhen you create an account, you can only specify application or account.applicationexpress and applicationcustom are not valid creation parameters.For a comprehensive description of Stripe fee payment models, see the fee behavior documentation. \n controller.requirementcollection | stripe | Possible values:application: Your platform is responsible for collecting updated information when requirements are due or changestripe: Stripe is responsible for collecting updated information when requirements are due or changeA value of application means that your platform can fully access the KYC properties on the account, as well as attest that the account has seen and accepted the Stripe service agreement using the API. \n controller.stripedashboard.type | full | Possible values:express: The connected account can access the Express Dashboardfull: The  connected account can access the full Stripe Dashboardnone: The account can’t access the Express or Stripe Dashboard \n type | See the description | Possible values:custom: The account was created as a Custom connected accountexpress: The account was created as an Express connected accountstandard: The account was created as a Standard connected account or with controller properties matching Standard accountsnone: The account was created with no type value and its controller properties don’t match any of the three account typesSpecifying type is optional. If you create an account using type, you can only specify custom, express, or standard. none isn’t a valid account creation parameter. \n`stripe`- application: Your platform is responsible for negative balances and manages credit and fraud risk on the connected account, which requires you to review and acknowledge your responsibilities in the Dashboard\n• stripe: Stripe is liable when this account can’t pay back negative balances resulting from payments. Your platform is still liable for a negative balance on your platform account.\n`application``stripe`controller.fees.payer\naccount\n`account`Possible values:\n• account: The connected account pays all Stripe fees directly to Stripe, inclusive of payment processing fees\n• application: The Connect platform pays all Stripe fees, inclusive of payment processing fees\n• applicationcustom: The account was created with type=custom\n• applicationexpress: The account was created with type=express\n`account``application``applicationcustom``applicationexpress`When you create an account, you can only specify application or account.\n`application``account`applicationexpress and applicationcustom are not valid creation parameters.\n`applicationexpress``applicationcustom`For a comprehensive description of Stripe fee payment models, see the fee behavior documentation.\ncontroller.requirementcollection\nstripe\n`stripe`Possible values:\n• application: Your platform is responsible for collecting updated information when requirements are due or change\n• stripe: Stripe is responsible for collecting updated information when requirements are due or change\n`application``stripe`A value of application means that your platform can fully access the KYC properties on the account, as well as attest that the account has seen and accepted the Stripe service agreement using the API.\n`application``full`- express: The connected account can access the Express Dashboard\n• full: The  connected account can access the full Stripe Dashboard\n• none: The account can’t access the Express or Stripe Dashboard\n`express``full``none`type\nSee the description\nPossible values:\n• custom: The account was created as a Custom connected account\n• express: The account was created as an Express connected account\n• standard: The account was created as a Standard connected account or with controller properties matching Standard accounts\n• none: The account was created with no type value and its controller properties don’t match any of the three account types\n`custom``express``standard``none`Specifying type is optional. If you create an account using type, you can only specify custom, express, or standard. none isn’t a valid account creation parameter.\n`type``type``custom``express``standard``none`## Mapping account types to controller parameters\nEach of the three account types maps to values in the controller hash of v1/accounts that match the behavior of that type.\n`controller``v1/accounts`### Standard\nIf you create an account without specifying any controller properties, the default values match the behavior of a Standard account. You can also create the equivalent of a Standard account by specifying the values that map to Standard account behavior.\nThese values map to a Standard account’s behavior:\n• losses.payments: stripe\n• fees.payer: account\n• requirementcollection: stripe\n• stripedashboard.type: full\n`losses.payments``stripe``fees.payer``account``requirementcollection``stripe``stripedashboard.type``full`Request (using default values for all properties):\ncurl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"\n`curl -X POST https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\"`Response:\n{\n  controller: {\n    type: \"application\",\n    iscontroller: true,\n    losses: {\n      payments: \"stripe\"\n    },\n    requirementcollection: \"stripe\",\n    fees: {\n      payer: \"account\",\n    },\n    stripedashboard: {\n      type: \"full\"\n    }\n  },\n  type: \"standard\"\n}\n`{\n  controller: {\n    type: \"application\",\n    iscontroller: true,\n    losses: {\n      payments: \"stripe\"\n    },\n    requirementcollection: \"stripe\",\n    fees: {\n      payer: \"account\",\n    },\n    stripedashboard: {\n      type: \"full\"\n    }\n  },\n  type: \"standard\"\n}`### Express\nThese values map to an Express account’s behavior:\n• losses.payments: application\n• fees.payer: application (see note)\n• requirementcollection: stripe\n• stripedashboard.type: express\n`losses.payments``application``fees.payer``application``requirementcollection``stripe``stripedashboard.type``express`#### Note\nCreating an Express account using type, sets the controller.fees.payer property to applicationexpress instead of application. This difference denotes a variation in Stripe fee billing behavior when your platform is using Direct charges.\n`type``controller.fees.payer``applicationexpress``application`Request:\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=express \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=express \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application`Response:\n{\n  controller: {\n    type: \"application\",\n    iscontroller: true,\n    losses: {\n      payments: \"application\"\n    },\n    requirementcollection: \"stripe\",\n    fees: {\n      payer: \"application\",\n    },\n    stripedashboard: {\n      type: \"express\"\n    }\n  },\n  type: \"none\"\n}\n`{\n  controller: {\n    type: \"application\",\n    iscontroller: true,\n    losses: {\n      payments: \"application\"\n    },\n    requirementcollection: \"stripe\",\n    fees: {\n      payer: \"application\",\n    },\n    stripedashboard: {\n      type: \"express\"\n    }\n  },\n  type: \"none\"\n}`### Custom\nThese values map to a Custom account’s behavior:\n• losses.payments: application\n• fees.payer: application (see note)\n• requirementcollection: application\n• stripedashboard.type: none\n`losses.payments``application``fees.payer``application``requirementcollection``application``stripedashboard.type``none`You must also specify the account country when creating a Custom account, and request the cardpayments and transfers capabilities.\n`cardpayments``transfers`#### Note\nCreating a Custom account using type, sets the controller.fees.payer property to applicationcustom instead of application. This difference denotes a variation in Stripe fee billing behavior when your platform is using Direct charges.\n`type``controller.fees.payer``applicationcustom``application`Request:\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d country=US\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d country=US`Response:\n{\n  controller: {\n    type: \"application\",\n    iscontroller: true,\n    losses: {\n      payments: \"application\"\n    },\n    requirementcollection: \"application\",\n    fees: {\n      payer: \"application\",\n    },\n    stripedashboard: {\n      type: \"none\"\n    }\n  },\n  type: \"none\"\n}\n`{\n  controller: {\n    type: \"application\",\n    iscontroller: true,\n    losses: {\n      payments: \"application\"\n    },\n    requirementcollection: \"application\",\n    fees: {\n      payer: \"application\",\n    },\n    stripedashboard: {\n      type: \"none\"\n    }\n  },\n  type: \"none\"\n}`## Migrate code to use controller properties\nIn addition to updating your account creation process to use controller properties, update your integration by reviewing your code and looking for references to account types.\nFor each reference to an account type, determine which controller property or properties are relevant and update the code accordingly.\nFor example, say that your code includes a conditional statement that applies to Express and Custom accounts because it relates to your platform being responsible for negative balances. Update that logic from if type == express or if type == custom to if controller.losses.payments == application.\n`if type == express``if type == custom``if controller.losses.payments == application`If you create connected accounts that don’t match an account type, consider their controller properties as well when updating your code. The logic for handling those accounts can differ from your existing logic that’s based on account types.\nYou can use this table to identify the controller properties associated with each account type:\n Account Type | losses.payments | fees.payer | requirementcollection | stripedashboard.type \n --- | --- | --- | --- | --- \n Custom | application | applicationcustom | application | none \n Express | application | applicationexpress | stripe | express \n Standard | stripe | account | stripe | full \n`application``applicationcustom``application``none``application``applicationexpress``stripe``express``stripe``account``stripe``full`#### Note\nRemember that Express and Custom accounts have a different value for fees.payer than equivalent accounts created using controller properties. When updating code related to collecting fees, you must take into account the difference in behavior.\n`fees.payer`## Unsupported configurations\nWhen creating accounts with controller properties, the following combinations aren’t supported:\ncontroller.requirementcollection = application isn’t compatible with any of the following values:\n`controller.requirementcollection``application`- controller.losses.payments = stripe\n• controller.fees.payer = account\n• controller.stripedashboard.type = express\n• controller.stripedashboard.type = full\n`controller.losses.payments``stripe``controller.fees.payer``account``controller.stripedashboard.type``express``controller.stripedashboard.type``full`controller.stripedashboard.type = express isn’t compatible with any of the following values:\n`controller.stripedashboard.type``express`- controller.losses.payments = stripe\n• controller.fees.payer = account\n• controller.requirementcollection = application\n`controller.losses.payments``stripe``controller.fees.payer``account``controller.requirementcollection``application`controller.stripedashboard.type = full isn’t compatible with any of the following values:\n`controller.stripedashboard.type``full`- controller.losses.payments = application\n• controller.fees.payer = application\n• controller.requirementcollection = application\n`controller.losses.payments``application``controller.fees.payer``application``controller.requirementcollection``application`controller.stripedashboard.type = none isn’t supported when both of the following values are set (it’s supported when only one of them is set):\n`controller.stripedashboard.type``none`- controller.requirementcollection = stripe\n• controller.losses.payments = application\n`controller.requirement_collection``stripe``controller.losses.payments``application`"}, {"path": "connect\\migrate-to-stripe.md", "url": "https://docs.stripe.com/connect/migrate-to-stripe", "content": "#Migrating accounts to Stripe | Stripe Documentation\nURL: https://docs.stripe.com/connect/migrate-to-stripe\n\n#Migrating accounts to Stripe\n#Start processing accounts on Stripe without disrupting payments.\nStripe enables you to migrate your existing connected accounts along with your payment and customer data. Doing so allows you to continue to collect payments and pay out or enable other businesses to accept payments directly. To successfully bring your existing platform business to Stripe, you need to:\n# Create a migration plan and timeline\n# Update your integration for connected accounts\n# Create and onboard accounts\n# Handle outstanding and ongoing requirements\n# Migrate payment and customer data to Stripe\n#Create a migration plan\nA successful migration to Stripe includes a migration plan, a timeline, and KYC information for connected accounts, as well as payment and customer data.\nConnected accounts must onboard to Stripe, which requires sending Stripe Know Your Customer (KYC) data for each account. Stripe’s requirements can require collecting additional information from your accounts. Perform an analysis to understand what data has been collected with your previous provider and what data Stripe requires. Stripe verifies KYC data before activating connected accounts. Monitor account verification status using the account.updated event or the Retrieve Account API. Accounts that fail to verify require action before they’re activated.\nInclude a hard cutover date for payment data after onboarding accounts to Stripe. Payment and customer data requires a PAN import as part of the cutover. We recommend that you import accounts in batches.\n#Update your integration\nYour application can require changes as part of the integration updates to migrate to Stripe. For example, consider any changes to your connected accounts’ usage of your platform, such as pricing updates. Stripe recommends communicating any changes to your accounts ahead of time.\n#Stripe terms of service agreement\nYour connected accounts must accept the Stripe terms of service before they’re activated.\nFor accounts where Stripe is responsible for collecting updated information when requirements are due or change (including Standard and Express accounts), the account accepts Stripe’s terms of service as part of the onboarding flow.\nIf your platform is responsible for collecting updated information from a connected account (including Custom accounts) when requirements change, you can wrap Stripe’s terms of service in your own terms of service. We recommend placing terms of service acceptance at the end of the onboarding flow, but you can also have it at the start if that makes more sense for your business. When creating or updating connected accounts, record acceptance of the updated Terms of Service information to send to Stripe, and communicate that to the accounts.\n#Onboard connected accounts to Stripe\nStripe offers different levels of onboarding support for your connected accounts. Build an onboarding flow for your connected accounts using any of the following methods:\n Method | Pros | Cons \n --- | --- | --- \n Stripe-hosted onboarding | Lowest effort integration | Stripe-branded with limited platform brandingLimited control over the flow logicConnected accounts redirect to Stripe instead of completing the process without leaving your site \n Embedded onboarding | Highly themeableLimited or no Stripe brandingConnected accounts remain in the flow of your siteLow effort integration | Limited control over the flow logic \n API-based onboarding | Exercise full control over your own UI | Expensive and time-consuming to buildContinuing high maintenance, especially to keep in compliance with changing global requirementsCan’t resolve Stripe risk reviews \n• Lowest effort integration\n• Stripe-branded with limited platform branding\n• Limited control over the flow logic\n• Connected accounts redirect to Stripe instead of completing the process without leaving your site\n• Highly themeable\n• Limited or no Stripe branding\n• Connected accounts remain in the flow of your site\n• Low effort integration\n• Limited control over the flow logic\n• Exercise full control over your own UI\n• Expensive and time-consuming to build\n• Continuing high maintenance, especially to keep in compliance with changing global requirements\n• Can’t resolve Stripe risk reviews\n#Create and onboard accounts\nThe following is an overview of the process:\n#Establish account requirements\nThe following factors affect the onboarding requirements for your connected accounts:\n• The origin country of the connected accounts\n• The service agreement type applicable to the connected accounts\n• The capabilities requested for the connected accounts\n• The business type (for example, individual or company) and company.structure (for example, public corporation or private partnership)\nUse the interactive form to see how changing these factors affects the requirements.\n#Requirements form\n#Create the connected account\nFor each account to be migrated to Stripe, create an associated Account.\nUse the Create Account API to create a connected account with controller set to the desired account preferences. You can prefill any information, but at a minimum, you must specify the controller. The country of the account defaults to the same country as your platform, and the account confirms the selection during onboarding.\n`controller``controller`#### Note\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as address and websiteurl, see the Create Account API reference.\n`address``websiteurl`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[fees][payer]\"=account \\\n  -d \"controller[losses][payments]\"=stripe \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=stripe \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[fees][payer]\"=account \\\n  -d \"controller[losses][payments]\"=stripe \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=stripe \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true`If you’ve already collected information for your connected accounts, you can prefill that information on the Account object. You can prefill any account information, including personal and business information, external account information, and so on.\n`Account`Connect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the Connect service agreement.\nWhen testing your integration, prefill account information using test data.\nSuccessful creation returns the account object. Inspect the object for the connected account id and store the value in your database.\n`id`{\n  ...\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  ...\n}\n`{\n  ...\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  ...\n}`After updating Stripe with all existing data, look for any outstanding requirements. Any outstanding requirements are listed in the currentlydue array. All currentlydue requirements need to be collected from the account for Stripe to verify the account and activate the account’s capabilities.\n`currentlydue``currentlydue`{\n  ...\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"individual.firstname\",\n      \"individual.lastname\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"disabledreason\": \"requirements.pastdue\",\n    \"errors\": [],\n`{\n  ...\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"individual.firstname\",\n      \"individual.lastname\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"disabledreason\": \"requirements.pastdue\",\n    \"errors\": [],`After providing all existing data on an account, direct the account to a Stripe UI to set up Stripe credentials, confirm the information, and accept the Stripe terms of service.\n#Take new accounts through an onboarding flow\nIn addition to migrating existing accounts, build a flow for new accounts to onboard to Stripe. You can also use this onboarding flow to collect missing data for accounts being migrated.\nReview onboarding options to create your onboarding flow.\n#Handle outstanding and ongoing requirements\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have a pending status.\n#Review status\nYou can retrieve the status of your connected account’s capabilities by:\n• Inspecting the Account object’s capabilities hash for the relevant capability.\n• Requesting capabilities directly from the Capabilities API and inspecting the status of the relevant capability.\n• Listening for account.updated events in your webhook endpoint and inspecting the capabilities hash for the relevant capability.\n`account.updated``capabilities`After verifications are complete, the capability becomes active and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of active. Listen for account.updated events to detect changes to capability states.\n`active``active``account.updated`Confirm that your Connect integration is compliant and operational by checking that the account’s chargesenabled and payoutsenabled are both true. You can use the API or listen for account.updated events. For details on other relevant fields, check the account’s requirements hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n`chargesenabled``payoutsenabled``account.updated`- chargesenabled confirms that your full charge path including the charge and transfer works correctly and evaluates if either cardpayments or transfers capabilities are active.\n• payoutsenabled evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You must eventually enable payouts to pay your connected accounts.\n`cardpayments``transfers`You can use the following logic as a starting point for defining a summary status to display to your connected account.\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\ndef accountstate(account)\n  reqs = account.requirements\n  if reqs.disabledreason && reqs.disabledreason.include?(\"rejected\")\n    \"rejected\"\n  elsif account.payoutsenabled && account.chargesenabled\n    if reqs.pendingverification\n      \"pending enablement\"\n    elsif !reqs.disabledreason && !reqs.currentlydue\n      if !reqs.eventuallydue\n        \"complete\"\n      else\n        \"enabled\"\n      end\n    else\n      \"restricted\"\n    end\n  elsif !account.payoutsenabled && account.chargesenabled\n    \"restricted (payouts disabled)\"\n  elsif !account.chargesenabled && account.payoutsenabled\n    \"restricted (charges disabled)\"\n  elsif reqs.pastdue\n    \"restricted (past due)\"\n  elsif reqs.pendingverification\n    \"pending (disabled)\"\n  else\n    \"restricted\"\n  end\nend\naccounts = Stripe::Account.list(limit: 10)\naccounts.each do |account|\n    puts \"#{account.id} has state: #{accountstate(account)}\"\nend\n`# Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\ndef accountstate(account)\n  reqs = account.requirements\n  if reqs.disabledreason && reqs.disabledreason.include?(\"rejected\")\n    \"rejected\"\n  elsif account.payoutsenabled && account.chargesenabled\n    if reqs.pendingverification\n      \"pending enablement\"\n    elsif !reqs.disabledreason && !reqs.currentlydue\n      if !reqs.eventuallydue\n        \"complete\"\n      else\n        \"enabled\"\n      end\n    else\n      \"restricted\"\n    end\n  elsif !account.payoutsenabled && account.chargesenabled\n    \"restricted (payouts disabled)\"\n  elsif !account.chargesenabled && account.payoutsenabled\n    \"restricted (charges disabled)\"\n  elsif reqs.pastdue\n    \"restricted (past due)\"\n  elsif reqs.pendingverification\n    \"pending (disabled)\"\n  else\n    \"restricted\"\n  end\nend\naccounts = Stripe::Account.list(limit: 10)\naccounts.each do |account|\n    puts \"#{account.id} has state: #{accountstate(account)}\"\nend`### Handle verification errors\nHandle verification failures differently depending on your onboarding flow.\n#Note\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\nListen to the account.updated event. If the account contains any currentlydue fields when the currentdeadline arrives, the corresponding functionality is disabled and those fields are added to pastdue.\n`currentlydue``currentdeadline``pastdue`Create a form with clear instructions that the account can use to correct the information. Notify the account, then submit the corrected information using the Accounts API.\nIf you plan to create custom flows to handle all your verification errors:\n• Review the details regarding all possible verification errors and how to handle them.\n• Test verification states.\n#Migrate payment and customer data to Stripe\nAfter your connected accounts are created on Stripe, request a PAN data import, which migrates your payment and customer data for use on Stripe.\n#See also\n• Choose your onboarding configuration\n• Handling identity verification with the API\n• Testing account identity verification"}, {"path": "connect\\modify-tax-forms.md", "url": "https://docs.stripe.com/connect/modify-tax-forms", "content": "#Update and create 1099 tax forms | Stripe Documentation\nURL: https://docs.stripe.com/connect/modify-tax-forms\n\n#Update and create 1099 tax forms\n#Update and create 1099 tax forms for connected accounts.\n#Getting your 1099 Forms\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see 1099 tax forms on the Stripe Support site.\nStripe automatically generates tax forms for all connected accounts that have transactions in a given tax year. Tax forms are available on the Tax reporting page in the Dashboard. If you need to update or correct a 1099 form, you can do so in one of the following ways:\n• Use the Tax form editor-Use the editor in the Dashboard to change the values used in a new 1099 form.\n• Export the form as a comma separated value (CSV) file-Export a tax form to a CSV file, modify the values in the CSV file, then import the updated CSV file to generate a new 1099 form with the updated values.\nYou can also create new tax forms by importing CSV files. If your connected account doesn’t already have a tax form, performing Update or Delta imports automatically creates the form.\nClick Create to create a standalone tax form that isn’t associated with a connected account. You must include all columns except for formid and stripeaccountid. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery). If you’re creating a standalone form of a non-default form type, you must include the CSV headers of that form type. If you need assistance getting the correct CSV headers, reach out to support@stripe.com.\n`formid``stripeaccountid`You can update the values for payee details and payment amounts in a 1099 tax form using the Tax form editor in the Dashboard. After you update the values, you can generate a new or corrected form with updated values.\n#Understanding the tax form editor UI\nWhen you open a record from the Tax reporting page, it includes the following sections:\n• Payee details-Includes details about the owner of the connected account that you pay out to.\n• Totals-Includes the payment detail totals form.\n• Forms details-Includes details about delivery and filing status.\n• Form timeline-Includes a log of corrections to the tax form. It doesn’t log changes made to the form by exporting the form to a CSV file and then importing an updated CSV file with new values.\nYou can modify values in the Payee details, Totals, and Forms details sections.\n#Note\nWhen you update the values of a 1099 tax form it updates only the data on the form, not the data in the connected account.\n#Warning\nEditing the Payee details or Totals data on a form during the form’s tax year will disable automatic updates to those fields by Stripe. You can always undo your edits to resume automatic updates later.\nTo update a 1099 tax form before filing\n# On the Tax reporting page, click the tax form to update.\n# Click Edit.\n# To update the user details on the 1099 form, such as Name, TIN, or Address, expand Payee details and then update the value for each field as appropriate.\n# To update details related to payments and withholdings on the 1099 form, expand Totals, and then update the values as appropriate.\n# Click Save to save your changes.\nYou can then download the updated form as a PDF document.\nWhen you save the form, Stripe validates the format of the values you entered. For example, If you provide a TIN that doesn’t include the correct number of digits, Stripe displays an error message. Stripe doesn’t verify that the TIN is the correct TIN for the connected account, only that it includes the correct number of digits.\n#Correcting a tax form after filing\nIn some cases, you need to correct the values in a 1099 tax form after you file it. If you try to update a tax form that you already filed, you see a Correct button instead of an Edit button in the form.\n#Note\nYou can’t create a corrected 1099 form for a connected account if you already filed it and the status for the filed form is Processing or Rejected. If you need to update a form that is Processing or Rejected, contact Stripe support for assistance.\n`Processing``Rejected``Processing``Rejected`To correct a 1099 tax form after filing\n#Warning\nThe IRS allows you to submit a correction to either the Payee details or Totals data, but not both at the same time. Correct only one set of data for a correction.\n# On the Tax reporting page, click the tax form to correct.\n# Click Correct.\n# To correct the user details on the 1099 form, such as Name, TIN, or Address, expand Payee details and then correct the value for each field as appropriate.\n# To correct details related to payments and withholdings on the 1099 form, expand Totals and then correct the values as appropriate.\n# Click Save to save your changes.\nYou can then file the corrected form and download a PDF copy for your records.\n#Quick Correct: Payee Details\nWhen the payee details for a connected account don’t match the values on a tax form for the connected account, a pencil icon appears next to Payee details. Hovering over the pencil shows a tool tip listing the information that doesn’t match. Click the pencil icon, then click Correct to automatically generate a corrected form in which the payee details match those of the connected account.\nWhen you click Correct, Stripe generates a new form with the updated payee information from the connected account Payee details. If there is an existing corrected form that wasn’t yet filed, the corrected form is updated with the information from the connected account. A corrected form includes all payee details that don’t match, such as payee name, address, and TIN. If more than one value is updated, the corrected form updates all mismatched fields.\nWhen you click Correct to update the values in the tax form, it updates all values that are different in the connected account than the tax form. You can’t choose which fields to update values for. You should verify all changes before filing the updated forms. If a connected account user made a typo to their address, the incorrect address is updated in the corrected form. You can choose to change a single value in an updated tax form by using CSV export to export the file to correct. To learn more, see Correct tax forms.\nYou can use Quick Correct to update details only in tax forms that you have already filed and contain a mismatch between the tax form data and the data in the connected account. When no mismatched data is detected, the pencil icon does not display. If there is a pencil icon displayed to indicate a mismatch in the data because the connected account data is missing, the pencil icon is displayed but the Correct button is deactivated.\nIn the Quick Correct panel you can view all of the payee details except for the TIN, which is partially redacted.\nYou can add a Payee details filter with a value of Payee has updated identity info to see only the list of forms with identity values that differ between the connected account and the form, which are the only forms eligible for Quick Correct.\n`Payee has updated identity info`## Revert: Payee Details & Totals\nWhen the data for Payee details or Totals doesn’t match the values on a tax form for the connected account, an Edited badge appears next to the section. Hovering over the badge shows a tool tip listing the values that don’t match. Click the Undo edits button to automatically revert the tax form to match the data in the connected account.\nThe difference between Revert and Quick Correct is that you can Revert details on a form when it hasn’t been filed yet, and you can Quick Correct a form after it has been filed. When you click Revert, all mismatched data is updated. You can’t choose which fields to update and exclude others. If there is data missing from the connected account, the Revert button is deactivated.\n#Updating or correcting a 1099 tax form after filing using connected account data\nIf data for a connected account changes after Stripe generates 1099 forms, you can use the editor in the Dashboard to quickly replace data in the 1099 with data from the connected account. Stripe displays a bell icon in the Payee details section when the data in the form is different from the data in the connected account.\nTo update or correct a tax form after filing using connected account data\n# On the Tax reporting page, click the tax form to correct.\n# Click the bell icon to display the data from the connected account.\n# Click Correct to update the data in a 1099 form with the data from the connected account.\n#User self-serve updates for connected accounts\nIf you signed up for stripe hosted e-delivery, you can have your users update their tax information themselves before their tax form is filed. If users update their information after filing, the tax form page shows an option to correct the filed 1099 form with the updated information. For more information, see Quick correct: Payee details.\nUsers can edit their Legal name, Taxpayer Identification Number (TIN), and address. Note that some information can’t be edited after a user’s legal entity is verified, including date of birth, and business type. To edit the information user must contact Stripe Support."}, {"path": "connect\\multicurrency-settlement.md", "url": "https://docs.stripe.com/connect/multicurrency-settlement", "content": "#Multi-currency settlement for Connect platforms and marketplaces | Stripe Documentation\nURL: https://docs.stripe.com/connect/multicurrency-settlement\n\n#Multi-currency settlement for Connect platforms and marketplaces\n#Offer your connected accounts the ability to accept, settle and pay out funds in multiple currencies.\nMulti-currency settlement allows your connected accounts to maintain balances and make payouts in currencies other than their primary currency. Connected accounts can hold and payout funds in up to 18 supported currencies needed to pay suppliers, process refunds, and so on, without having to convert funds.\n#Enable multi-currency settlement\nEnable multi-currency settlement for your conneted accounts in the Connect payouts settings page of the Dashboard. Your account must be in a supported region to access these settings.\nAfter you enable multi-currency settlement, your users can access all currencies that are supported in their region.\n#Note\nConnected accounts must be in the same region as your platform to use multi-currency settlement. For example, both you and your connected account could be in Australia, or, if you’re in Europe, your connected account could be in any European country.\nIf you no longer want your connected accounts to use multi-currency settlement:\n# Disable it with the same settings in the Dashboard to prevent connected accounts from beginning to use it. This doesn’t disable it for connected accounts that are already using multi-currency settlement.\n# Remove any multi-currency external accounts using the Delete external bank accounts API to disable multi-currency settlement for connected accounts already using it.\n#Add external accounts\nAfter you enable multi-currency settlement, your connected accounts can start using it by adding a new settlement currency external account.\nYour connected account can add an external account anywhere they can update their payout methods, including Dashboard and Onboarding interfaces. See Connect account types to learn which interfaces are available for your connected account. For instance, if your connected account has access to the Express Dashboard, you can send them a Login Link to update their payout methods.\nAfter your connected account has an external account in a non-primary currency, charges presented in that currency accrue towards that currency’s balance. Your connected accounts can pay out their multi-currency balances in the same way as a primary currency balance. However, some supported currencies are subject to a payout minimum and fee, as described in the following section.\nTo learn more about processing charges in multiple currencies with Connect, see Working with multiple currencies.\n#Pricing\nWhen funds settle to your connected account in a currency other than the primary currency of your Stripe account country, Stripe applies processing fees in that currency.\nStripe charges platforms a 1% payout fee for multi-currency settlement depending on the combination of currency and bank account country, with a minimum fee.  In your Dashboard and reporting, this fee might appear as an alternative currency payout fee. See our full list of fees.\nStripe deducts your connected accounts’ multi-currency settlement fees from your platform balance in the non-primary currency. For example, if your connected account pays out funds in USD, we charge the fee to your platform balance in USD when possible. If your platform account doesn’t support the currency, Stripe converts the fee to your default currency and deducts it from your primary currency’s balance. See conversion on Stripe fees for more details.\n#Request early access\nUse the following form to request updates on preview features as we expand multi-currency settlement features and regional support."}, {"path": "connect\\multiple-payment-method-configurations.md", "url": "https://docs.stripe.com/connect/multiple-payment-method-configurations", "content": "#Multiple configurations for your Connect accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/multiple-payment-method-configurations\n\n#Multiple configurations for your Connect accounts\n#Learn how to allow your connected accounts to display different sets of payment methods to their buyers in different scenarios.\nUse this feature if your platform is using dynamic payment methods and supports setting different types of payment methods for different types of transactions (for example, subscriptions versus one-time checkout) or for different invoice amounts (for example, invoices more than a certain dollar amount can be paid using BNPL).\n#Create a new payment method configurationDashboard\nNavigate to the Payment methods settings for your connected accounts in the Stripe Dashboard. This is where you control your platform level “parent” configurations. Your connected accounts receive a “child” configuration for each parent that they can customize within the constraints you set below.\nYou start with one parent configuration by default. To create an additional configuration, click Add new configuration, and give it a name.\n#Set the default state for each payment methodDashboard\nYou can apply the default setting for each payment method to your new parent configuration, and control what customizations your connected accounts can make. Use the dropdown to select the desired setting:\n• On by default the payment method is on by default. Connected accounts can turn it on and off.\n• Off by default the payment method is off by default. Connected accounts can turn it on and off.\n• Blocked turns the payment method off for all connected accounts. Connected accounts can’t turn it on.\n#Allow your connected accounts to customize their payment methods\nConnected accounts with access to the full Stripe Dashboard can turn payment methods on or off if the payment method has been set to either On by default or Off by default. Your connected accounts see the newly created child configuration in their Payment methods settings. Your connected accounts can use the dropdown menu at the top of the page to choose a configuration to edit.\n`On by default``Off by default`If you want your connected accounts to customize their Payment methods settings from your platform dashboard instead of the Stripe Dashboard, or if you have connected accounts who don’t have  Stripe Dashboard access, you can integrate with the Payment Method Configurations API.\nUse the Payment Method Configurations API with the connected account ID and child configuration ID to read the current state of a payment method for a specific connected account on that configuration.\ncurl https://api.stripe.com/v1/paymentmethodconfigurations/{{PAYMENTMETHODCONFIGURATIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"\n`curl https://api.stripe.com/v1/paymentmethodconfigurations/{{PAYMENTMETHODCONFIGURATIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n      \"object\": \"paymentmethodconfiguration\",\n      \"name\": \"My Custom Configuration\",\n      \"active\": true,\n      \"isdefault\": true,\n      \"livemode\": false,\n      \"parent\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n      \"acssdebit\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"affirm\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"afterpayclearpay\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      ... additional payment methods\n    }\n  ],\n  \"hasmore\": false,\n  \"url\": \"/v1/paymentmethodconfigurations\"\n}\n`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n      \"object\": \"paymentmethodconfiguration\",\n      \"name\": \"My Custom Configuration\",\n      \"active\": true,\n      \"isdefault\": true,\n      \"livemode\": false,\n      \"parent\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n      \"acssdebit\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"affirm\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"afterpayclearpay\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      ... additional payment methods\n    }\n  ],\n  \"hasmore\": false,\n  \"url\": \"/v1/paymentmethodconfigurations\"\n}`If successful, the return list displays each payment method and includes two parameters outlining availability and display preference.\n• available is the combination of capability value (active, inactive, pending, or unrequested) and displaypreference value.You can use the available field to know whether or not a buyer sees this payment method at checkout time. If available is true, that payment method’s capability is active and displaypreference is on. If available is false, the payment method either doesn’t have an active capability or the displaypreference value is off, and buyers won’t see it at checkout time. To simplify your integration and take advantage of other features, use payment methods that you manage from the Dashboard at checkout, which automatically reads this parameter and shows the right payment methods to buyers.\n• displaypreference has three components: overridable, preference, and value.overridable is read-only, and indicates whether the connected account’s preference can override the default set above.preference is writable, and stores the connected account’s preference.value is read-only, and reflects the effective displaypreference value.\navailable is the combination of capability value (active, inactive, pending, or unrequested) and displaypreference value.\n`available``active``inactive``pending``unrequested``displaypreference`You can use the available field to know whether or not a buyer sees this payment method at checkout time. If available is true, that payment method’s capability is active and displaypreference is on. If available is false, the payment method either doesn’t have an active capability or the displaypreference value is off, and buyers won’t see it at checkout time. To simplify your integration and take advantage of other features, use payment methods that you manage from the Dashboard at checkout, which automatically reads this parameter and shows the right payment methods to buyers.\n`available``available``true``displaypreference``available``false``displaypreference`displaypreference has three components: overridable, preference, and value.\n`displaypreference``overridable``preference``value`- overridable is read-only, and indicates whether the connected account’s preference can override the default set above.\n• preference is writable, and stores the connected account’s preference.\n• value is read-only, and reflects the effective displaypreference value.\n`overridable``preference``value``displaypreference`#### Note\nOnly payment methods that are relevant in the connected account’s country are shown in the API response and are configurable. Check country support.\nWhen a connected account owner takes action to turn on or off a payment method, you can update the displaypreference preference attribute. This stores the connected account owner’s preference for that payment method and is used to determine whether buyers see the payment method.\n`displaypreference``preference`curl https://api.stripe.com/v1/paymentmethodconfigurations/{{PAYMENTMETHODCONFIGURATIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"affirm[displaypreference][preference]\"=on\n`curl https://api.stripe.com/v1/paymentmethodconfigurations/{{PAYMENTMETHODCONFIGURATIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"affirm[displaypreference][preference]\"=on`{\n  \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n  \"object\": \"paymentmethodconfiguration\",\n  \"name\": \"My Custom Configuration\",\n  \"active\": true,\n  \"isdefault\": true,\n  \"livemode\": false,\n  \"acssdebit\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  \"affirm\": {\n    \"available\": true,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"on\",\n      \"value\": \"on\"\n    }\n  },\n  \"afterpayclearpay\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  ... additional payment methods\n}\n`{\n  \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n  \"object\": \"paymentmethodconfiguration\",\n  \"name\": \"My Custom Configuration\",\n  \"active\": true,\n  \"isdefault\": true,\n  \"livemode\": false,\n  \"acssdebit\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  \"affirm\": {\n    \"available\": true,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"on\",\n      \"value\": \"on\"\n    }\n  },\n  \"afterpayclearpay\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  ... additional payment methods\n}`When your connected accounts turn on payment methods with the API, Stripe intelligently ranks the payment methods based on the buyer’s location, order size, and other factors to always show the highest converting payment methods first.\n#Use the configuration in your checkout flow\nPass the parent configuration ID when rendering your checkout flow to use your new configuration. Stripe automatically looks up the child configuration for the associated connected account and uses their customized settings.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\" \\\n  -d currency=usd \\\n  -d paymentmethodconfiguration={{PAYMENTMETHODCONFIGURATIONID}}\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d mode=payment \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  --data-urlencode successurl=\"https://example.com/success\" \\\n  --data-urlencode cancelurl=\"https://example.com/cancel\" \\\n  -d currency=usd \\\n  -d paymentmethodconfiguration={{PAYMENTMETHODCONFIGURATION_ID}}`## OptionalApple Pay and Google Pay"}, {"path": "connect\\oauth-changes-for-standard-platforms.md", "url": "https://docs.stripe.com/connect/oauth-changes-for-standard-platforms", "content": "#OAuth changes for platform-controlled Standard accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/oauth-changes-for-standard-platforms\n\n#OAuth changes for platform-controlled Standard accounts\n#Learn about the changes Stripe has made to OAuth for Connect.\nWe’ve updated OAuth to isolate platforms’ processing activity on platform-controlled Standard accounts. Platforms using OAuth with readwrite scope can’t connect to Standard accounts that are controlled by another platform. Prior to June 2021, multiple platforms could connect to the same Standard account.\n`readwrite`This change ensures that in the rare case that a Connect user with access to the Stripe Dashboard interacts with two platforms, each platform’s activity is kept distinct in separate Standard accounts.\nWhen a user of a Standard account controlled by another platform connects to your platform, the Connect onboarding flow directs them to create a separate Standard account to use with your platform. The new account automatically connects to your platform.\nIf you registered your Connect application as an Extension integration, it can still connect to accounts that are connected to another platform. Extensions need to connect to existing Standard accounts that might also be connected to another Platform or Extension. Only Extensions can use readonly, which ensures that platforms can’t read other applications’ data.\n`readonly`However, if you previously selected Platform for your Connect application and you now need Extension functionality, you must contact us to modify your integration selection. You can find your selection in the Connect Settings under Availability.\n`Platform`"}, {"path": "connect\\oauth-express-accounts.md", "url": "https://docs.stripe.com/connect/oauth-express-accounts", "content": "#Using OAuth with Express accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/oauth-express-accounts\n\n#Using OAuth with Express accountsDeprecated\n#Use the OAuth connection flow to allow an Express user to connect to your platform.\n#Caution\nOAuth isn’t available for new Connect platforms. For new accounts, use Accounts API with Express instead. Extensions shouldn’t use Express OAuth, as extensions can’t connect to existing Express accounts. If you need access to OAuth for Express accounts, please contact support.\n#The OAuth connection flow\nA user connects to your platform using the following OAuth connection flow:\n# On a page on your site, you provide a link that redirects your user to Stripe, passing along your platform’s clientid.\n# On Stripe’s website, the user provides the necessary information for connecting to your platform.\n# Stripe redirects the user to your site, along with an authorization code.\n# Your site then makes a request to Stripe’s OAuth token endpoint to complete the connection and fetch the user’s account ID.\n`clientid`After these steps are complete, you can make API requests for the user with their account ID.\n#Step 1: You provide the OAuth link\nTo start your integration, go to your platform settings and:\n• Enable onboarding Express accounts with OAuth in the OAuth settings.\n• Copy your clientid, a unique identifier for your platform that’s generated by Stripe.\n• Set your redirecturi, the URL that your user is redirected to after connecting their account. You must specify all redirect URLs in your platform settings. If you don’t include the redirecturi parameter in your request, Stripe defaults to using the first address you’ve configured in your platform settings.\n`clientid``redirecturi``redirecturi`Stripe also provides a development clientid to help with testing.\n`clientid`With these two pieces of information in hand, you’re ready to create the OAuth link. We recommend showing a Connect button that sends users to our Express OAuth endpoint:\nhttps://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&state={STATEVALUE}\n`https://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&state={STATEVALUE}`To prevent CSRF attacks, add the state parameter with the value set to a unique token. Stripe includes this state value in the redirect URL that sends the user back to your site. Then, confirm that this state parameter has the same value you originally provided.\n`state``state``state`Here’s how you can present the example URL, along with our Connect with Stripe button:\n#Customize Express with OAuth parameters\nYou can change the behavior of the Express onboarding flow by including additional URL parameters in your OAuth link. A complete list of available parameters is available in the OAuth reference.\n#Individual or company accounts\nYou can specify whether Stripe presents an Express onboarding form for individuals or companies by setting the stripeuser[businesstype] parameter to either individual or company.\n`stripeuser[businesstype]``individual``company`Stripe collects the right information for each type of account. For example, to onboard a company:\nhttps://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&state={STATEVALUE}&stripeuser[businesstype]=company\n`https://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&state={STATEVALUE}&stripeuser[businesstype]=company`#### Prefill form fields\nYou can prefill some form fields on the user’s Stripe application by including the relevant URL parameters in your OAuth link.\nThis example prefills the user’s email address with stripeuser[email]:\n`stripeuser[email]`https://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=https://connect.stripe.com/connect/default/oauth/test&state={STATEVALUE}&stripeuser[email]=user@example.com\n`https://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=https://connect.stripe.com/connect/default/oauth/test&state={STATEVALUE}&stripeuser[email]=user@example.com`#### Specify capabilities for an account\nYou can change the capabilities for new connected accounts in the Dashboard settings for Express. However, if you want to request different capabilities for each of your connected accounts, you can include the suggestedcapabilities[] parameter in your OAuth link and override the Dashboard settings on the Express Configuration page.\n`suggestedcapabilities[]`An example with the transfers capability:\n`transfers`https://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&state={STATEVALUE}&suggestedcapabilities[]=transfers\n`https://connect.stripe.com/express/oauth/authorize?redirecturi=https://connect.stripe.com/connect/default/oauth/test&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&state={STATEVALUE}&suggestedcapabilities[]=transfers`Stripe adds the suggested capability to this Express account, unless one of the following conditions is met:\n• If the user is in a country that doesn’t support transfers, Stripe attempts to designate the account as cardpayments.\n• If the user’s account doesn’t support transfers or cardpayments, Stripe marks the account as having no capabilities.\n`transfers``cardpayments``transfers``cardpayments`You can verify that Stripe added the suggested capability by using the assertcapabilities[] parameter. This step is optional.\n`assertcapabilities[]`## Step 2: The user creates their account\nWhen the user clicks the link on your site, it takes them to Stripe’s website, which prompts them to provide contact and payout information.\nTo test the onboarding process, you can provide (000) 000-0000 as a phone number. Instead of sending you an SMS message or email, Stripe lets you complete verification with the code 000-000.\nExpress displays your branding in the onboarding flow and the Express Dashboard. You can provide your platform name, logo, and optional brand color in the Connect settings section of the Stripe Dashboard.\n#Step 3: Stripe redirects the user to your site\nAfter the user completes the onboarding process, Stripe redirects them back to your site using the URL defined as your platform’s redirecturi.\n`redirecturi`For successful connections, the redirect URL includes the following values:\n• The state value, if provided.\n• An authorization code. The authorization code is short-lived, and can be used only once, in the POST request described in the next step.\n`state`https://connect.stripe.com/connect/default/oauth/test?code={AUTHORIZATIONCODE}\n`https://connect.stripe.com/connect/default/oauth/test?code={AUTHORIZATIONCODE}`## Step 4: You complete the Express account connection\nInclude the provided authorization code in a POST request to Stripe’s token endpoint to complete the connection and fetch the user’s account ID:\n`code`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\"\n`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\"`Stripe returns a response that includes the account ID (stripeuserid) for the user:\n`stripeuserid`{\n  \"livemode\": false,\n  \"tokentype\": \"bearer\",\n  \"stripeuserid\": \"{{CONNECTEDACCOUNTID}}\",\n  \"scope\": \"express\",\n  ...\n}\n`{\n  \"livemode\": false,\n  \"tokentype\": \"bearer\",\n  \"stripeuserid\": \"{{CONNECTEDACCOUNTID}}\",\n  \"scope\": \"express\",\n  ...\n}`Or, if there’s a problem, Stripe returns a detailed error message:\n{\n  \"error\": \"invalidgrant\",\n  \"errordescription\": \"Authorization code does not exist: {AUTHORIZATIONCODE}\"\n}\n`{\n  \"error\": \"invalidgrant\",\n  \"errordescription\": \"Authorization code does not exist: {AUTHORIZATIONCODE}\"\n}`The user is now connected to your platform. The stripeuserid is the Stripe account ID for the new account. Store this value in your database and use it to authenticate as the connected account by passing it into requests in the Stripe-Account header.\n`stripeuserid``Stripe-Account`#### Note\nStore stripeuserid, which is the account’s ID. Platforms need this value (beginning with acct) to transfer funds, create charges, and perform requests on the user’s behalf.\n`stripeuserid``acct`### Verify the account’s capability\nIf you provide the suggestedcapabilities[] parameter, you can add the assertcapabilities[] parameter to verify that the connected account now has the suggested capabilities. For instance, you can check this if you’re concerned about URL security. This step is optional, however. Stripe handles any failure to apply a capability silently.\n`suggestedcapabilities[]``assertcapabilities[]`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\" \\\n  -d \"assertcapabilities[]\"=\"transfers\"\n`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\" \\\n  -d \"assertcapabilities[]\"=\"transfers\"`A success response then looks like this:\n{\n  \"livemode\": false,\n  \"tokentype\": \"bearer\",\n  \"stripeuserid\": \"{{CONNECTEDACCOUNTID}}\",\n  \"scope\": \"express\",\n  \"capabilities\": \"transfers\",\n  ...\n}\n`{\n  \"livemode\": false,\n  \"tokentype\": \"bearer\",\n  \"stripeuserid\": \"{{CONNECTEDACCOUNTID}}\",\n  \"scope\": \"express\",\n  \"capabilities\": \"transfers\",\n  ...\n}`If the specified capabilities[] value doesn’t match, the error response looks like this:\n`capabilities[]`{\n  \"error\": \"invalidrequest\",\n  \"errordescription\": \"assertcapabilities expects capability: cardpayments\"\n}\n`{\n  \"error\": \"invalidrequest\",\n  \"errordescription\": \"assertcapabilities expects capability: cardpayments\"\n}`The most common reason for this request failure is that the specified capability isn’t available in your user’s country. A less likely reason is a bad actor changing the URL.\n#Webhooks\nAfter you create an account, you can get all account change notifications delivered to your webhooks as account.updated events. You set your Connect webhook URL in your account settings. These events let you track the onboarding and verification status of connected accounts, which you can use to provide user support and display notices in your platform’s user interface. Alternatively, you can let Stripe take your users through the steps of the onboarding and verification process and handle any issues that arise.\n`account.updated`If you created an account in a sandbox using either a test API key or clientid, Stripe doesn’t send any emails while you build your Stripe integration (but we do when you’re live.)\n`clientid`"}, {"path": "connect\\oauth-reference.md", "url": "https://docs.stripe.com/connect/oauth-reference", "content": "#Connect OAuth reference | Stripe Documentation\nURL: https://docs.stripe.com/connect/oauth-reference\n\n#Connect OAuth reference\n#This reference lists available public methods for our OAuth endpoints for Connect.\nThe OAuth Connect flow allows you to customize the user’s experience by passing additional parameters to Stripe. Some common examples are explained below, and the rest of the reference lists every possible option.\n#Note\nAs a platform, remember that data you create for a Standard account (that is, charges, customers, invoices, and so on) will be visible on their Stripe account. This also means if they connect other platforms, those platforms will have access to that data too.\nStarting in June 2021, Platforms using OAuth with readwrite scope won’t be able to connect to accounts that are controlled by another platform.\n`readwrite`Extensions won’t experience any changes to how OAuth behaves. Learn more about OAuth changes for Standard Platforms.\n#Common examples\n#Prefill fields\nProvide the best possible user experience for users who need to create a new Stripe account by prefilling the account form fields with information you already have, like the user’s email and name. Prefilling has no effect if your user already has a Stripe account. You can’t prefill certain fields, including terms of service acceptance and RISA acceptance in Japan.\n#Dynamically set the redirect URI\nFor security purposes, Stripe redirects a user only to a predefined URI. However, Connect allows you to define more than one redirect URI, which you can use to further customize the user’s experience. For example, you could redirect some of your users back to https://sub1.example.com and others to https://sub2.example.com.\nTo dynamically set the redirect URI:\n# In your platform settings, add each redirect URI.\n# Add a redirecturi parameter to your authorization request and set the value to one of your redirect URIs.\n`redirecturi`https://connect.stripe.com/oauth/authorize?responsetype=code&clientid={{CLIENTID}}&scope=readwrite&redirecturi=https://sub2.example.com\n`https://connect.stripe.com/oauth/authorize?responsetype=code&clientid={{CLIENTID}}&scope=readwrite&redirecturi=https://sub2.example.com`If no redirecturi is specified in the URL, then Stripe uses the first URI configured in your platform settings.\n`redirecturi`## Authorize the account\nFor Standard accounts: GET https://connect.stripe.com/oauth/authorize\nSends the user to Stripe to connect to your platform.\n#Request\n Parameter | Description \n --- | --- \n clientid | The unique identifier provided to your application, found in your application settings. \n responsetype | The only option at the moment is code. \n redirecturiOptional | The URL for the authorize response redirect. If provided, this must exactly match one of the comma-separated redirecturi values in your application settings. To protect yourself from certain forms of man-in-the-middle attacks, the live mode redirecturi must use a secure HTTPS connection. Defaults to the redirecturi in your application settings if not provided. \n scopeOptionalStandard Only | readwrite or readonly, depending on the level of access you need. Defaults to readonly for Standard accounts. Note readonly can only be specified for extensions. \n stateOptional | An arbitrary string value we’ll pass back to you, useful for CSRF protection. \n`clientid``responsetype``redirecturi``redirecturi``redirecturi``redirecturi``scope``state`The following query string parameters are all optional—we use them to prefill details in the account form for new users. Some prefilled fields (for example, URL or product category) might be automatically hidden. Any parameters with invalid values are silently ignored.\nNote that some of these parameters apply only to Standard accounts (indicated).\n Parameter | Description \n --- | --- \n stripeuser[email]Recommended | The user’s email address. Must be a valid email format. \n stripeuser[url]Recommended | The URL for the user’s business. This can be the user’s website, a profile page within your application, or another publicly available profile for the business, such as a LinkedIn or Facebook profile. It must be URL-encoded and include a scheme (http or https). If you prefill this field, include a description of the user’s products or services and their contact information in the linked page. If we don’t have enough information, we’ll have to reach out to the user directly before initiating payouts. \n stripeuser[country] | Two-letter country code (for example, US or CA). Must be a country that Stripe currently supports. \n stripeuser[phonenumber] | The business phone number. Must be 10 digits only. Must also prefill stripeuser[country] with the corresponding country. \n stripeuser[businessname] | The legal name of the business. \n stripeuser[businesstype] | The type of the business. For Standard accounts, the value must be soleprop, corporation, nonprofit, partnership, or llc. \n stripeuser[firstname] | First name of the person filling out a Stripe application. \n stripeuser[lastname] | Last name of the person filling out a Stripe application. \n stripeuser[dobday] stripeuser[dobmonth] stripeuser[dobyear] | Day (0-31), month (1-12), and year (YYYY, greater than 1900) for the birth date of the person filling out a Stripe application. If you choose to pass these parameters, you must pass all three. \n stripeuser[streetaddress]Standard only | Street address of the business. \n stripeuser[city]Standard only | Address city of the business. To prevent ambiguity, also prefill stripeuser[country] with the corresponding country. \n stripeuser[state]Standard only | Address state of the business. Must be the two-letter state or province code (for example, NY for a US business or AB for a Canadian one). Must also prefill stripeuser[country] with the corresponding country. \n stripeuser[zip]Standard only | Address postal code of the business. Must be a string. To prevent ambiguity, also prefill stripeuser[country] with the corresponding country. \n stripeuser[physicalproduct]Standard only | A string: true if the user sells a physical product, false otherwise. \n stripeuser[productdescription] | A description of what the business is accepting payments for. \n stripeuser[currency]Standard only | Three-letter ISO code representing currency, in lowercase (for example, usd or cad). Must be a valid country and currency combination that Stripe supports. Must prefill stripeuser[country] with the corresponding country. \n stripeuser[firstnamekana] | The Kana variation of the first name of the person filling out a Stripe application. Must prefill stripeuser[country] with JP, as this parameter is only relevant for Japan. \n stripeuser[firstnamekanji] | The Kanji variation of the first name of the person filling out a Stripe application. Must prefill stripeuser[country] with JP, as this parameter is only relevant for Japan. \n stripeuser[lastnamekana] | The Kana variation of the last name of the person filling out a Stripe application. Must prefill stripeuser[country] with JP, as this parameter is only relevant for Japan. \n stripeuser[lastnamekanji] | The Kanji variation of the last name of the person filling out a Stripe application. Must prefill stripeuser[country] with JP, as this parameter is only relevant for Japan. \n stripeuser[gender] | The gender of the person filling out a Stripe application. (International regulations require either male or female.) Must prefill stripeuser[country] with JP, as this parameter is only relevant for Japan. \n stripeuser[blockkana]Standard only | The Kana variation of the address block. This parameter is only relevant for Japan. You must prefill stripeuser[country] with JP and stripeuser[zip] with a valid Japanese postal code to use this parameter. \n stripeuser[blockkanji]Standard only | The Kanji variation of the address block. This parameter is only relevant for Japan. You must prefill stripeuser[country] with JP and stripeuser[zip] with a valid Japanese postal code to use this parameter. \n stripeuser[buildingkana]Standard only | The Kana variation of the address building. This parameter is only relevant for Japan. You must prefill stripeuser[country] with JP and stripeuser[zip] with a valid Japanese postal code to use this parameter. \n stripeuser[buildingkanji]Standard only | The Kanji variation of the address building. This parameter is only relevant for Japan. You must prefill stripeuser[country] with JP and stripeuser[zip] with a valid Japanese postal code to use this parameter. \n`stripeuser[email]``stripeuser[url]``stripeuser[country]``stripeuser[phonenumber]``stripeuser[country]``stripeuser[businessname]``stripeuser[businesstype]``stripeuser[firstname]``stripeuser[lastname]``stripeuser[dobday]``stripeuser[dobmonth]``stripeuser[dobyear]``stripeuser[streetaddress]``stripeuser[city]``stripeuser[country]``stripeuser[state]``stripeuser[country]``stripeuser[zip]``stripeuser[country]``stripeuser[physicalproduct]``stripeuser[productdescription]``stripeuser[currency]``stripeuser[country]``stripeuser[firstnamekana]``stripeuser[country]``stripeuser[firstnamekanji]``stripeuser[country]``stripeuser[lastnamekana]``stripeuser[country]``stripeuser[lastnamekanji]``stripeuser[country]``stripeuser[gender]``stripeuser[country]``stripeuser[blockkana]``stripeuser[country]``stripeuser[zip]``stripeuser[blockkanji]``stripeuser[country]``stripeuser[zip]``stripeuser[buildingkana]``stripeuser[country]``stripeuser[zip]``stripeuser[buildingkanji]``stripeuser[country]``stripeuser[zip]`### Response\nThe user’s browser is redirected back to your configured redirect URI or the value you passed in the redirecturi parameter. When successful, you receive the following query parameters:\n`redirecturi`| Parameter | Description |\n --- | --- \n code | An authorization code you can use in the next call to get an access token for your user. This can only be used once and expires in 5 minutes. \n scope | readwrite or readonly, depending what you passed on the initial GET request. \n state | The value of the state parameter you provided on the initial GET request. \n`code``scope``state``state`### Error Response\nIn case of an error, the user’s browser won’t be redirected except in the case of accessdenied. Instead, errors will be returned in a JSON dictionary with the following fields:\n`accessdenied`| Parameter | Description |\n --- | --- \n error | A unique error code per error type. \n errordescription | A human readable description of the error. \n state | The value of the state parameter you provided on the initial GET request. \n`error``errordescription``state``state`### Error Codes\n Parameter | Description \n --- | --- \n accessdenied | User denied authorization. \n invalidscope | Invalid scope parameter provided. \n invalidredirecturi | Provided redirecturi parameter is an invalid URL or isn’t allowed by your application settings. \n invalidrequest | Missing responsetype parameter. \n unsupportedresponsetype | Unsupported responsetype parameter. Currently the only supported responsetype is code. \n`accessdenied``invalidscope``scope``invalidredirecturi``redirecturi``invalidrequest``responsetype``unsupportedresponsetype``responsetype``responsetype`## Complete the connection and get the account ID\nPOST https://connect.stripe.com/oauth/token\nUsed both for turning an authorizationcode into an account connection, and for getting a new access token using a refreshtoken.\n`authorizationcode``refreshtoken`### Request\nMake this call using your secret API key as a clientsecret POST parameter:\n`clientsecret`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\"\n`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\"`When converting an authorization code to an access token, you must use an API key that matches the mode—live or test—of the authorization code (which depends on whether the clientid used was production or development).\n`clientid`When using a refresh token to request an access token, you can use either a test or live API key to obtain a test or live access token respectively. Any existing access token with the same scope and mode—live or test—is revoked.\n#Note\nPer OAuth v2, this endpoint isn’t idempotent. Consuming an authorization code more than once revokes the account connection.\n Parameter | Description \n --- | --- \n granttype | authorizationcode when turning an authorization code into an access token, or refreshtoken when using a refresh token to get a new access token. \n code or refreshtoken | The value of the code or refreshtoken, depending on the granttype. \n scopeOptional | When requesting a new access token from a refresh token, any scope that has an equal or lesser scope as the refresh token. Has no effect when requesting an access token from an authorization code. Defaults to the scope of the refresh token. \n`granttype``code``refreshtoken``code``refreshtoken``granttype``scope`### Response\n Parameter | Description \n --- | --- \n scope | The scope granted to the access token, depending on the scope of the authorization code and scope parameter. \n stripeuserid | The unique ID of the account you have been granted access to, as a string. \n livemode | Indicates whether the platform’s access to perform updates on behalf of the connected account includes livemode access, or is limited to testmode actions. This matches the livemode of the application used to authorize the OAuth request. \n tokentype | Always has a value of bearer. \n accesstoken | Deprecated Use the Stripe-Account header with your platform’s secret key (that can make requests on behalf of this Stripe account). \n stripepublishablekey | Deprecated Use the Stripe-Account header with your platform’s publishable key (that can make requests on behalf of this Stripe account). \n refreshtoken | Deprecated Can be used to get a new access token of an equal or lesser scope, or of a different live mode (where applicable). \n`scope``scope``stripeuserid``livemode``tokentype``accesstoken``Stripe-Account``stripepublishablekey``Stripe-Account``refreshtoken`### Error Response\n Parameter | Description \n --- | --- \n error | A unique error code per error type. \n errordescription | A human readable description of the error. \n`error``errordescription`### Error Codes\n Parameter | Description \n --- | --- \n invalidrequest | No code, refreshtoken, or granttype parameter provided (where required). \n invalidgrant | A variety of things can prompt this error:code doesn’t exist, is expired, has been used, or doesn’t belong to yourefreshtoken doesn’t exist or doesn’t belong to youAPI key mode (live or test mode) doesn’t match the code or refreshtoken mode \n unsupportedgranttype | Unsupported granttype parameter specified. The only currently supported types are authorizationcode and refreshtoken. \n invalidscope | Invalid scope parameter provided. \n unsupportedresponsetype | Unsupported responsetype parameter. Currently the only supported responsetype is code. \n`invalidrequest``code``refreshtoken``granttype``invalidgrant`- code doesn’t exist, is expired, has been used, or doesn’t belong to you\n• refreshtoken doesn’t exist or doesn’t belong to you\n• API key mode (live or test mode) doesn’t match the code or refreshtoken mode\n`code``refreshtoken``code``refreshtoken``unsupportedgranttype``granttype``invalidscope``scope``unsupportedresponsetype``responsetype``responsetype`## Revoke the account’s access\nPOST https://connect.stripe.com/oauth/deauthorize\nUsed for revoking access to an account.\n#Note\nYou can only revoke a Standard account’s access to your platform.\n#Request\nMake this call using your secret API key as an Authorization header.\ncurl https://connect.stripe.com/oauth/deauthorize \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d clientid=\"caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb\" \\\n  -d stripeuserid=acctON3nXtRQkhmUIQ\n`curl https://connect.stripe.com/oauth/deauthorize \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d clientid=\"caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb\" \\\n  -d stripeuserid=acctON3nXtRQkhmUIQ`When revoking access to an account, you must use an API key that matches the mode — live or test — used to connect to the account. Use a live mode API key if a production clientid created the connection, or a test mode API key for a development clientid.\n`clientid``clientid`| Parameter | Description |\n --- | --- \n clientid | The clientid of the application that you’d like to disconnect the account from. The account must be connected to this application. \n stripeuserid | The account you’d like to disconnect from. \n`clientid``clientid``stripeuserid`### Response\n Parameter | Description \n --- | --- \n stripeuserid | The unique ID of the account you have revoked access to, as a string. This is the same as the stripeuserid you passed in. If this is returned, the revocation is successful. \n`stripeuserid``stripeuserid`### Error Response\n Parameter | Description \n --- | --- \n error | A unique error code per error type. \n errordescription | A human readable description of the error. \n`error``errordescription`### Error Codes\n Parameter | Description \n --- | --- \n invalidrequest | No clientid or stripeuserid parameter provided (where required). \n invalidclient | A variety of things can prompt this error:clientid doesn’t belong to youstripeuserid doesn’t exist or isn’t connected to your applicationAPI key mode (live or test mode) doesn’t match the clientid modenodeauthoncontrolledaccount the account can’t be disconnected and instead use the rejection API. \n`invalidrequest``clientid``stripeuserid``invalidclient`- clientid doesn’t belong to you\n• stripeuserid doesn’t exist or isn’t connected to your application\n• API key mode (live or test mode) doesn’t match the clientid mode\n• nodeauthoncontrolledaccount the account can’t be disconnected and instead use the rejection API.\n`clientid``stripeuserid``clientid``nodeauthoncontrolledaccount`"}, {"path": "connect\\oauth-standard-accounts.md", "url": "https://docs.stripe.com/connect/oauth-standard-accounts", "content": "#Using OAuth with Standard accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/oauth-standard-accounts\n\n#Using OAuth with Standard accounts\n#Use the OAuth connection flow to allow a Stripe user to connect to your platform.\nOAuth is not recommended for new Connect platforms. We recommend using Connect Onboarding for Standard accounts instead.\nStarting in June 2021, Platforms using OAuth with readwrite scope won’t be able to connect to Standard accounts that are controlled by another platform.\n`readwrite`Extensions will not experience any changes to how OAuth behaves. Learn more about OAuth changes for platform-controlled Standard accounts.\n#The OAuth connection flow\nA user connects to your platform using the following OAuth connection flow:\n# From a page on your site, the user clicks a link that redirects them to Stripe, passing along your platform’s clientid.\n# On Stripe’s website, the user provides the necessary information for connecting to your platform.\n# The user is redirected to your site, along with an authorization code.\n# Your site then makes a request to Stripe’s OAuth token endpoint to complete the connection and fetch the user’s account ID.\n`clientid`#### Note\nAs a platform, remember that data you create for an account (for example, charges, customers, invoices, and so on) will be visible on their Stripe account. It also means that if they connect other platforms, those platforms can access this data too.\n#Create the OAuth link\nTo start your integration, go to your Connect OAuth onboarding options and:\n• Enable onboarding accounts with OAuth in the OAuth settings.\n• Copy your clientid, a unique identifier for your platform that’s generated by Stripe.\n• Set your redirecturi, the URL which your user will be redirected to after connecting their account. You must specify all redirect URLs in your platform settings. If you do not include the redirecturi parameter in your request, Stripe defaults to using the first address you have configured in your platform settings.\n`clientid``redirecturi``redirecturi`Stripe also provides a clientid to help with testing. Each clientid is either a live or test ID. Use a Sandbox clientid to connect to a Sandbox account.\n`clientid``clientid`With these pieces of information in hand, you’re ready to create the OAuth link. We recommend showing a Connect with Stripe button that sends users to the authorizeurl endpoint:\n`authorizeurl`https://connect.stripe.com/oauth/authorize?responsetype=code&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&scope=readwrite\n`https://connect.stripe.com/oauth/authorize?responsetype=code&clientid=caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&scope=readwrite`The Stripe endpoint should receive at least these three parameters:\n# responsetype, with a value of code\n# Your clientid\n# scope, with a value of readwrite\n`responsetype``clientid``scope`The scope parameter dictates what your platform can do on behalf of the connected account, with readonly being the default.\n`scope`To prevent CSRF attacks, add the state parameter, passing along a unique token as the value. We’ll include the state you gave us when we redirect the user back to your site. Your site should confirm the state parameter hasn’t been modified.\n`state``state``state`Here’s how the above URL can be presented to your user to begin the connection, along with our Connect with Stripe button:\n#Customize onboarding with OAuth parameters\nYou can change the behavior of the onboarding flow by including additional URL parameters in your OAuth link. A complete list of available parameters is available in the OAuth reference.\n#User creates or connects their account\nAfter the user clicks the link on your site, they’ll be taken to Stripe’s website where they’ll be prompted to allow or deny the connection to your platform.\nThe process of creating a Stripe account is incorporated into our authorization flow. You don’t need to worry about whether or not your users already have accounts.\nThe user is logged in and can choose an account to connect to your platform directly.\nThe user needs to create an account.\n#User is redirected back to your site\nAfter the user connects their existing or newly created account to your platform, they’re redirected back to your site, to the URL established as your platform’s redirecturi.\n`redirecturi`For successful connections, we’ll pass along in the URL:\n• The scope granted\n• The state value, if provided\n• An authorization code. The authorization code is short-lived, and can be used only once, in the POST request described in the next step.\n`scope``state`https://connect.stripe.com/connect/default/oauth/test?scope=readwrite&code={AUTHORIZATIONCODE}\n`https://connect.stripe.com/connect/default/oauth/test?scope=readwrite&code={AUTHORIZATIONCODE}`If the authorization was denied by the user, they’ll still be redirected back to your site, but the URL includes an error instead of the authorization code:\nhttps://connect.stripe.com/connect/default/oauth/test?error=accessdenied&errordescription=The%20user%20denied%20your%20request\n`https://connect.stripe.com/connect/default/oauth/test?error=accessdenied&errordescription=The%20user%20denied%20your%20request`## Platform completes the account connection\nInclude the provided authorization code in a POST request to Stripe’s token endpoint to complete the connection and fetch the user’s account ID:\n`code`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\"\n`curl https://connect.stripe.com/oauth/token \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d \"code\"=\"ac123456789\" \\\n  -d \"granttype\"=\"authorizationcode\"`Note that you’ll make the request with your live or test secret API key, depending on whether you want to get a live or test access token back.\nStripe returns a response that includes the account ID (stripeuserid) for the user:\n`stripeuserid`{\n  \"tokentype\": \"bearer\",\n  \"scope\": \"readwrite\",\n  \"livemode\": false,\n  \"stripeuserid\": \"{{CONNECTEDACCOUNTID}}\",\n}\n`{\n  \"tokentype\": \"bearer\",\n  \"scope\": \"readwrite\",\n  \"livemode\": false,\n  \"stripeuserid\": \"{{CONNECTEDACCOUNTID}}\",\n}`If there was a problem, we instead return an error:\n{\n  \"error\": \"invalidgrant\",\n  \"errordescription\": \"Authorization code does not exist: {AUTHORIZATIONCODE}\"\n}\n`{\n  \"error\": \"invalidgrant\",\n  \"errordescription\": \"Authorization code does not exist: {AUTHORIZATIONCODE}\"\n}`You’re done! The user is now connected to your platform. Store the stripeuserid in your database; this is the Stripe account ID for the new account. You’ll use this value to authenticate as the connected account by passing it into requests in the Stripe-Account header.\n`stripeuserid``Stripe-Account`In your application, you might want to consider using a dedicated OAuth client library to simplify these steps. To find an OAuth library for your language or framework, you can refer to the list of client libraries on the OAuth website.\nThe refreshtoken can be used to generate test access tokens for a production clientid or to roll your access token. You should hold on to this value, too, as you’re only able to get it after this initial POST request.\n`refreshtoken``clientid`#### Note\nStore the received account ID! Platforms need this information to perform requests on the user’s behalf.\n#Revoked and revoking access\nAn account.application.deauthorized event occurs when a user disconnects your platform from their account. By watching for this event via webhooks, you can perform any necessary cleanup on your servers.\n`account.application.deauthorized`To disconnect an account with access to the Stripe Dashboard from your platform, POST your clientid and the connected account’s ID to connect.stripe.com/oauth/deauthorize:\n`clientid``connect.stripe.com/oauth/deauthorize`curl https://connect.stripe.com/oauth/deauthorize \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d clientid=\"caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb\" \\\n  -d stripeuserid=acctON3nXtRQkhmUIQ\n`curl https://connect.stripe.com/oauth/deauthorize \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -d clientid=\"caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb\" \\\n  -d stripeuserid=acct_ON3nXtRQkhmUIQ`You can use the API on your user’s behalf to accept payments, set up recurring billing, fetch account data, and so on.\n#See also\n• Authentication\n• OAuth reference\n• Full API reference"}, {"path": "connect\\onboarding.md", "url": "https://docs.stripe.com/connect/onboarding", "content": "#Choose your onboarding configuration | Stripe Documentation\nURL: https://docs.stripe.com/connect/onboarding\n\n#Choose your onboarding configuration\n#Learn about the different options for onboarding your connected accounts.\nStripe offers several different onboarding options:\n• Stripe-hosted onboarding: Your connected accounts go through the onboarding flow in a Stripe-hosted web form.\n• Embedded onboarding: You embed the Account onboarding component directly in your application and your connected accounts go through the onboarding flow without leaving your application.\n• API onboarding: You use Stripe’s APIs to build your own customized onboarding UI.\nChoose the onboarding option that best fits your business. Stripe recommends using Stripe-hosted onboarding or Embedded onboarding. These options automatically update to handle changing requirements when they apply to a connected account.\n  | STRIPE-HOSTED ONBOARDING | EMBEDDED ONBOARDING | API ONBOARDING \n --- | --- | --- | --- \n INTEGRATION EFFORT | Minimal, go live quickly | More effort, go live quickly | Most effort, can delay going live \n CUSTOMIZATION | Stripe-branded with limited platform branding | Highly themeable with limited Stripe branding | Full control over your own UI \n AUTOMATIC UPDATES FOR NEW COMPLIANCE REQUIREMENTS | Immediate | Immediate | Requires integration changes \n SUPPORT NEW COUNTRIES WITHOUT INTEGRATION CHANGES |  |  |  \n SUPPORT LEGAL ENTITY SHARING |  |  |  \n FLOW LOGIC | Limited control | Limited control | Full control \n IDEAL FOR | Platforms that want Stripe to handle onboarding | Platforms that want a branded onboarding flow within their application | Platforms that require full control of the onboarding flow and have the resources to build and maintain it \n#Stripe-hosted onboarding\nStripe-hosted onboarding is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the Accounts API to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\nStripe-hosted onboarding supports Legal Entity Sharing, which allows owners of multiple Stripe accounts to share certain business information between them. When they onboard an account, they can reuse that information from an existing account instead of resubmitting it.\nUse Stripe-hosted onboarding if you want Stripe to handle onboarding with little effort from your platform.\nLearn more about Stripe-hosted onboarding\n#Embedded onboarding\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Your platform embeds the Account onboarding component in your application, and your connected accounts interact with the embedded component without ever leaving your application. Embedded onboarding uses the Accounts API to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\nEmbedded onboarding supports Legal Entity Sharing, which allows owners of multiple Stripe accounts to share certain business information between them. When they onboard an account, they can reuse that information from an existing account instead of resubmitting it.\nWith embedded onboarding, you get a customized onboarding flow without the complexity and maintenance associated with updating your onboarding integration as compliance requirements change.\nLearn more about Embedded onboarding\n#API onboarding\nYou use the Accounts API to build an onboarding flow and handle identity verification, localization, and error handling for each country your connected accounts onboard in. Stripe can be completely invisible to the account holder. Your platform is responsible for all interactions with your connected accounts and for collecting all the information needed to verify each account. Verification requirements are updated as laws and regulations change around the world. You must plan on reviewing and updating onboarding requirements at least every six months.\nStripe doesn’t recommend this option unless you’re fully committed to the operational complexity required to build and maintain an API onboarding flow. For a customized onboarding flow, Stripe strongly recommends embedded onboarding.\nLearn more about API onboarding"}, {"path": "connect\\pausing-payments-or-payouts-on-connected-accounts.md", "url": "https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts", "content": "#Pause payments and payouts on connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts\n\n#Pause payments and payouts on connected accounts\n#Support risk management by controlling the flow of funds into and out of your connected accounts.\nPlatforms can pause payments or payouts on accounts where they’re liable for negative balances, including Express and Custom accounts, through the Connected Account details Dashboard page. Unlike rejecting an account, you can pause payments or payouts regardless of the connected account’s balance. You can unpause payments or payouts at any time through the same page.\n#Effects of pausing payments or payouts\n#Pausing payments\nPausing payments blocks creation of any charges. It also makes the transfer, cardpayments and other payment methods capabilities inactive.\n`inactive`### Pausing payouts\nPausing payouts blocks creation of both automatic and manual payouts. The pause also stops processing of any in-flight payouts, which remain in pending status for up to 10 days:\n`pending`- If you unpause payouts within 10 days of a payout’s creation, the payout resumes.\n• If you don’t unpause payouts within 10 days of a payout’s creation, the payout is canceled and the funds are returned to the connected account’s balance.\n#Note\nYou can pause payments in both live mode and in a sandbox. However, we don’t enforce it in a sandbox. Pausing payments in a sandbox deactivates the corresponding capabilities on the account, but that doesn’t block the creation of charges.\nAfter performing an action on a connected account, you can view the change in the account’s status, which is reflected in the Accounts API. In the API response for the connected account, the chargesenabled or payoutsenabled fields return false depending on the action taken, and the requirements hash has a disabledreason of platformpaused.\n`chargesenabled``payoutsenabled``false``requirements``disabledreason``platformpaused`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  ...\n  \"chargesenabled\": false,\n  \"payoutsenabled\": false,\n  \"requirements\": {\n    \"disabledreason\": \"platformpaused\"\n  }\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  ...\n  \"chargesenabled\": false,\n  \"payoutsenabled\": false,\n  \"requirements\": {\n    \"disabledreason\": \"platform_paused\"\n  }\n}`### Filter connected accounts by risk action\nBy visiting the Connected Account list page, you can filter for the accounts that you have restricted either payments or payouts for.\n#Connected account notifications\nActioned accounts with access to the Express Dashboard see a notice there, explaining that their platform paused payments or payouts on their account, and telling them to direct any questions to their platform.\nActioned accounts without access to a Stripe-hosted Dashboard, including Custom accounts, don’t see any communication from Stripe. You’re responsible for notifying them when you pause their payments or payouts."}, {"path": "connect\\payment-links.md", "url": "https://docs.stripe.com/connect/payment-links", "content": "#Create payment links with Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/payment-links\n\n#Create payment links with Connect\n#With Connect, you can create payment links for connected accounts, optionally taking fees in the process.\nYou can create payment links for connected accounts, which support several approaches for collecting payments. You can use direct charges to create them directly on the connected account. Alternatively, you can create payment links on the platform with transfers to the connected account by using destination charges. You can also take an application fee on these payment links.\n#Create a payment link using direct charges\nTo create an payment link that directly charges on a connected account, create a payment link while authenticated as the connected account. For this to work, you must also create the product and the price on the connected account.\ncurl https://api.stripe.com/v1/paymentlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1\n`curl https://api.stripe.com/v1/paymentlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1`When you use direct charges, the connected account is responsible for the cost of the Stripe fees, refunds, and chargebacks.\n#Create a payment link using destination charges\nTo create a payment link that charges on the platform and creates automatic transfers to a connected account, create a payment link while providing the connected account ID as the transferdata[destination] value.\n`transferdata[destination]`curl https://api.stripe.com/v1/paymentlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/paymentlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}`For this to work, you must also create the product and the price on the platform account. When using automatic transfers, the platform is the business of record.\nWhen performing destination charges, Payment Links uses the brand settings of your platform account for the payment page. See the Customize branding section for more information.\n#Create a payment link using destination charges and onbehalfof\nYou can also create a destination charge with the onbehalfof parameter set to the connected account ID (by default, it is the platform). The onbehalfof parameter determines the settlement merchant, which affects:\n`onbehalfof``onbehalfof`- Whose statement descriptor the end user sees\n• Whose address and phone number the end user sees\n• The settlement currency of the charge\n• The payment page branding the customer sees\ncurl https://api.stripe.com/v1/paymentlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d onbehalfof={{CONNECTEDACCOUNTID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/paymentlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][price]\"={{PRICEID}} \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d onbehalfof={{CONNECTEDACCOUNTID}} \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}`## Fulfill orders placed through payment links\nAfter an end user pays through a payment link you need to enable your connected accounts to handle any fulfillment necessary.\nConfigure a webhook endpoint in the Dashboard.\nThen create an HTTP endpoint on your server to monitor for completed payments. Make sure to replace the endpoint secret key (whsec...) in the example with your key.\n`whsec...`#Using Sinatra.\nrequire 'sinatra'\nrequire 'stripe'\nset :port, 4242\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\n#If you are testing your webhook locally with the Stripe CLI you\n#can find the endpoint's secret by running `stripe listen`\n#Otherwise, find your endpoint's secret in your webhook settings in\n#the Developer Dashboard\nendpointsecret = 'whsec...'\npost '/webhook' do\n  payload = request.body.read\n  sigheader = request.env['HTTPSTRIPESIGNATURE']\n  event = nil\n  # Verify webhook signature and extract the event.\n  # See https://stripe.com/docs/webhooks#verify-events for more information.\n  begin\n    event = Stripe::Webhook.constructevent(\n      payload, sigheader, endpointsecret\n    )\n  rescue JSON::ParserError => e\n    # Invalid payload.\n    status 400\n    return\n  rescue Stripe::SignatureVerificationError => e\n    # Invalid Signature.\n    status 400\n    return\n  end\n  if event['type'] == 'checkout.session.completed'\n    session = event['data']['object']\n    connectedaccountid = event['account']\n    handlecompletedcheckoutsession(connectedaccountid, session)\n  end\n  status 200\nend\ndef handlecompletedcheckoutsession(connectedaccountid, session)\n  # Fulfill the purchase\n  puts 'Connected account ID: ' + connectedaccountid\n  puts session.tos\nend\n`# Using Sinatra.\nrequire 'sinatra'\nrequire 'stripe'\nset :port, 4242\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\n#If you are testing your webhook locally with the Stripe CLI you\n#can find the endpoint's secret by running `stripe listen`\n#Otherwise, find your endpoint's secret in your webhook settings in\n#the Developer Dashboard\nendpointsecret = 'whsec...'\npost '/webhook' do\n  payload = request.body.read\n  sigheader = request.env['HTTPSTRIPESIGNATURE']\n  event = nil\n  # Verify webhook signature and extract the event.\n  # See https://stripe.com/docs/webhooks#verify-events for more information.\n  begin\n    event = Stripe::Webhook.constructevent(\n      payload, sigheader, endpointsecret\n    )\n  rescue JSON::ParserError => e\n    # Invalid payload.\n    status 400\n    return\n  rescue Stripe::SignatureVerificationError => e\n    # Invalid Signature.\n    status 400\n    return\n  end\n  if event['type'] == 'checkout.session.completed'\n    session = event['data']['object']\n    connectedaccountid = event['account']\n    handlecompletedcheckoutsession(connectedaccountid, session)\n  end\n  status 200\nend\ndef handlecompletedcheckoutsession(connectedaccountid, session)\n  # Fulfill the purchase\n  puts 'Connected account ID: ' + connectedaccountid\n  puts session.tos\nend`Learn more in our fulfillment guide.\n#OptionalCollect application fees\n#OptionalCustomize branding\n#OptionalIntegrate tax calculation and collection"}, {"path": "connect\\payment-method-configurations.md", "url": "https://docs.stripe.com/connect/payment-method-configurations", "content": "#Payment Method Configurations API | Stripe Documentation\nURL: https://docs.stripe.com/connect/payment-method-configurations\n\n#Payment Method Configurations API\n#Learn how to use the Configurations API to give connected account owners more control over the payment methods they offer.\nUse the Payment Method Configurations API to allow your connected account owners to opt in or opt out of a payment method through your own settings page. You can view which payment methods are enabled for connected accounts, market payment methods, and set display preferences for relevant payment types.\nYou can either build your own payment method settings UI with the API or use the embedded payment method settings component.\n#Private preview\nThe embedded payment method settings component allows connected accounts to configure the payment methods they offer at checkout without the need to access the Stripe Dashboard. Request access and learn how to integrate with Payment Method Configurations.\n#Set the platform level default state\nIn the Stripe Dashboard, set the platform-level default for individual payment methods in the Manage payment methods for your connected accounts page to edit the default-enabled payment methods.\nIn the Dashboard, click the gear icon in the top-right corner to open the Product settings page. Click the Payment methods link in the Payments section.\nAs a platform, you can set payment method preferences for your platform and for your connected accounts. The settings for Your account apply to your direct payment traffic. For example, if you charge your users a monthly fee to use your platform through your own checkout page, use the Your Account settings to manage those payments.\nThe settings for Your connected accounts enable you to manage the payment methods that the connected accounts on your platform can accept.\nTo set the default state for all connected accounts on your platform, click the Edit settings link under Your connected accounts.\nFor each payment method, use the dropdown to select the desired setting:\n• Off by default connected accounts can turn the payment method on or off. The default is off.\n• Blocked turns the payment method off for all connected accounts. Connected account owners can’t opt in.\n• On by default connected accounts can turn the payment method on or off. The default is on.\n#Note\nBy default, Stripe enables a few commonly used payment methods such as Cards, Apple Pay, and Google Pay.\n#Determine availability and display preference for connected accounts\nUse the Payment Method Configurations API with the connected account ID to read the current state of a payment method for a specific connected account. If the connected account has more than one configuration you can filter the results by your application’s clientid, located in your Connect settings.\n`clientid`#### Working with multiple payment method configurations\nIf you’ve created additional payment method configurations for a connected account, you can identify the original configuration by the isdefault property. Stripe uses the default configuration for payments if you don’t pass a configuration ID into your checkout flow. For more information about isdefault and other properties of payment method configurations, see the API reference.\n`isdefault``isdefault`curl -G https://api.stripe.com/v1/paymentmethodconfigurations \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d application={{CLIENTAPPLICATIONID}}\n`curl -G https://api.stripe.com/v1/paymentmethodconfigurations \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d application={{CLIENTAPPLICATIONID}}`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n      \"object\": \"paymentmethodconfiguration\",\n      \"name\": \"Default\",\n      \"active\": true,\n      \"isdefault\": true,\n      \"livemode\": false,\n      \"application\": \"{{CLIENTAPPLICATIONID}}\",\n      \"acssdebit\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"affirm\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"afterpayclearpay\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      ... additional payment methods\n    }\n  ],\n  \"hasmore\": false,\n  \"url\": \"/v1/paymentmethodconfigurations\"\n}\n`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n      \"object\": \"paymentmethodconfiguration\",\n      \"name\": \"Default\",\n      \"active\": true,\n      \"isdefault\": true,\n      \"livemode\": false,\n      \"application\": \"{{CLIENTAPPLICATIONID}}\",\n      \"acssdebit\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"affirm\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      \"afterpayclearpay\": {\n        \"available\": false,\n        \"displaypreference\": {\n          \"overridable\": true,\n          \"preference\": \"off\",\n          \"value\": \"off\"\n        }\n      },\n      ... additional payment methods\n    }\n  ],\n  \"hasmore\": false,\n  \"url\": \"/v1/paymentmethodconfigurations\"\n}`If successful, the return list displays each payment method and includes two parameters outlining availability and display preference.\n• available is the combination of capability value (active, inactive, pending, or unrequested) and displaypreference value.You can use the available field to know whether or not a buyer sees this payment method at checkout time. If available is true, that payment method’s capability is active and displaypreference is on. If available is false, that payment method either doesn’t have an active capability or the displaypreference value is off and buyers won’t see this payment method at checkout time. To simplify your integration and take advantage of other features, use dynamic payment methods at checkout time which automatically reads this parameter and shows the right payment methods to buyers.\n• displaypreference has three components: overridable, preference, and value.overridable is read-only, and indicates whether the connected account’s preference can override the default set above.preference is writable, and stores the connected account’s preference.value is read-only, and reflects the effective displaypreference value.\navailable is the combination of capability value (active, inactive, pending, or unrequested) and displaypreference value.\n`available``active``inactive``pending``unrequested``displaypreference`You can use the available field to know whether or not a buyer sees this payment method at checkout time. If available is true, that payment method’s capability is active and displaypreference is on. If available is false, that payment method either doesn’t have an active capability or the displaypreference value is off and buyers won’t see this payment method at checkout time. To simplify your integration and take advantage of other features, use dynamic payment methods at checkout time which automatically reads this parameter and shows the right payment methods to buyers.\n`true``displaypreference``false``displaypreference`displaypreference has three components: overridable, preference, and value.\n`displaypreference``overridable``preference``value`- overridable is read-only, and indicates whether the connected account’s preference can override the default set above.\n• preference is writable, and stores the connected account’s preference.\n• value is read-only, and reflects the effective displaypreference value.\n`overridable``preference``value``displaypreference`#### Note\nOnly payment methods that are relevant in the connected account’s country are shown in the API response and are configurable. Check country support.\n#Update displaypreference when a connected account edits their settings\nWhen a connected account owner takes action to turn on or off a payment method, you can update the displaypreference preference attribute. This stores the connected account owner’s preference for that payment method and is used to determine whether the payment method is shown to buyers.\n`displaypreference``preference`curl https://api.stripe.com/v1/paymentmethodconfigurations/{{PAYMENTMETHODCONFIGURATIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"affirm[displaypreference][preference]\"=on\n`curl https://api.stripe.com/v1/paymentmethodconfigurations/{{PAYMENTMETHODCONFIGURATIONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"affirm[displaypreference][preference]\"=on`{\n  \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n  \"object\": \"paymentmethodconfiguration\",\n  \"name\": \"Default\",\n  \"active\": true,\n  \"isdefault\": true,\n  \"livemode\": false,\n  \"application\": \"{{CLIENTAPPLICATIONID}}\",\n  \"acssdebit\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  \"affirm\": {\n    \"available\": true,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"on\",\n      \"value\": \"on\"\n    }\n  },\n  \"afterpayclearpay\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  ... additional payment methods\n}\n`{\n  \"id\": \"{{PAYMENTMETHODCONFIGURATIONID}}\",\n  \"object\": \"paymentmethodconfiguration\",\n  \"name\": \"Default\",\n  \"active\": true,\n  \"isdefault\": true,\n  \"livemode\": false,\n  \"application\": \"{{CLIENTAPPLICATIONID}}\",\n  \"acssdebit\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  \"affirm\": {\n    \"available\": true,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"on\",\n      \"value\": \"on\"\n    }\n  },\n  \"afterpayclearpay\": {\n    \"available\": false,\n    \"displaypreference\": {\n      \"overridable\": true,\n      \"preference\": \"off\",\n      \"value\": \"off\"\n    }\n  },\n  ... additional payment methods\n}`## Display available payment methods on checkout\nYou can manage payment methods from the Dashboard. Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. This shows buyers in your checkout flow only the payment methods where available is true.\n`available``true`If you want to pre-fetch the available payment methods for a connected account before you render your checkout page, call the Payment Method Configurations API to get the list of payment methods. Use those with available set to true.\n`available``true`## Support Card type payment methods\nSome payment methods, such as Apple Pay and Link, aren’t included as separate payment method types on a PaymentIntent and are confirmed only when supplying card. With the Payment Method Configurations API, you can let connected account owners opt in or opt out of these specific payment methods and prevent them from showing up in the UI.\n`card`## Market payment methods to your connected account owners\nUse targeted marketing messaging to encourage connected account owners to opt in to specific payment methods they’re eligible for but haven’t yet opted in to.\nCall the GET method to retrieve the status of the payment method configuration to determine when to promote a payment method. You can determine if a connected account owner has interacted with your configuration before by reading the displaypreference value. If the displaypreference preference is none, the connected account owner hasn’t changed the default configuration. If the preference value is on or off, the connected account owner has interacted with the configuration and you can choose whether to suppress the marketing message.\n`displaypreference``displaypreference``preference``none``preference``on``off`## See also\n• Connect integration guide\n• Multiple payment method configurations\n• Adding payment method capabilities"}, {"path": "connect\\payment-methods.md", "url": "https://docs.stripe.com/connect/payment-methods", "content": "#Adding payment method capabilities | Stripe Documentation\nURL: https://docs.stripe.com/connect/payment-methods\n\n#Adding payment method capabilities\n#Onboard your connected accounts to accept different payment methods.\nThis guide provides an overview for existing platforms on how to check the eligibility of connected accounts to accept different payment methods and apply capabilities to those accounts using the Dashboard.\n#Navigate to the Connected Account Payment Method Settings Page\nTo navigate to the settings page of the Payment methods for your connected accounts, do the following:\n# From the Dashboard, in the upper right corner, select Settings > Connect > Payment Methods.\n# Under Your connected accounts, select Edit Settings.\nFrom the Dashboard, in the upper right corner, select Settings > Connect > Payment Methods.\nUnder Your connected accounts, select Edit Settings.\nResult: You can now manage the types of payment methods that users of your connected account can accept.\n#View eligibility\nFrom the connected accounts Payment methods settings, navigate to the payment method you’re interested in.\nUse the arrow on the left side of the payment method to expand the details of the payment method. Within this view, you can see the eligibility of each of your connected accounts to use the payment method.\n#Note\nThis view includes connected accounts that:\n• Have processed a payment in the last 90 days and are older than 30 days.\n• Are less than 30 days old, regardless of their payment activity.\nEach connected account appears in one of four different categories:\n Category | Description \n --- | --- \n Enabled | These businesses already have the capability for this payment method set to active. \n Eligible | These businesses have met all compliance requirements and passed any relevant MCC checks to have the payment method capability set to active when requested. \n Missing Info | These businesses are missing some compliance plan information needed to add the payment method. \n Ineligible | These businesses aren’t eligible for the payment method, either due to country location or MCC. \n`active``active`Countries you have connected accounts in that aren’t supported by the payment method appear grayed out.\n#Enable payment method\nTo enable the payment method for your connected accounts:\n# Apply the capability to your connected accounts by selecting On by default from the top-level dropdown located to the right of the payment method.\n# (Optional) Edit the setting to Off for any countries where you want to disable the payment method.\n# Select Review Changes to confirm your selections.\n`Off`After you review and confirm your update, Stripe converts all Eligible connected accounts to Enabled, with a capability status of active. Stripe also automatically applies the capability to new accounts as they become eligible. This could happen because a new account signs up for your platform and finishes inputting their information or because an account updates their information to become eligible for the payment method, such as updating their MCC from one that’s ineligible to one that’s eligible.\n`Eligible``Enabled``active`Review changes\n#Private preview\nThe embedded payment method settings component allows connected accounts to configure the payment methods they offer at checkout without the need to access the Stripe Dashboard. Request access and learn how to integrate with Payment Method Configurations.\n#Gather required information\nStripe doesn’t apply an enabled payment method to any accounts in the Missing Info category. After you  update the account to provide the specific missing information for those accounts, Stripe applies the capability.\n`Missing Info`## OptionalExport list\n#See also\n• Account capabilities\n• Upgrading to dynamic payment methods"}, {"path": "connect\\payout-reversals.md", "url": "https://docs.stripe.com/connect/payout-reversals", "content": "#Payout reversals | Stripe Documentation\nURL: https://docs.stripe.com/connect/payout-reversals\n\n#Payout reversals\n#Learn how to reverse a payout sent to a connected account.\nWhen the platform is responsible for risk and negative balances, you can make a payout reversal from an external bank account back to the connected account’s balance.\nYou can make payout reversals from the Dashboard payout details page or by calling reverse payout.\ncurl -X POST https://api.stripe.com/v1/payouts/{{PAYOUTID}}/reverse \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"\n`curl -X POST https://api.stripe.com/v1/payouts/{{PAYOUTID}}/reverse \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\"`## Requirements\nTo be reversed, a payout:\n• Must be to a bank account in the US.\n• Must be expected to arrive less than 90 days ago.\n• Can’t be a debit or an Instant Payout.\n#Webhooks\nPayout reversals are considered debits and have the same webhooks as other payouts. For example, when a payout reversal is first requested, a payout.updated event is sent for the original payout. Then, events for the payout reversal are sent, including payout.created, payout.updated, payout.paid, and possibly a payout.failed event.\n`payout.updated``payout.created``payout.updated``payout.paid``payout.failed`## Failures\nIf the original payout fails while the payout reversal is in a pending state, Stripe cancels the reversing payout. A payout reversal in the paid state can later be refused by the associated bank and transition to the failed state. This results in a payout.failed event. Failed payout reversals aren’t retried.\n`pending``paid``failed``payout.failed`"}, {"path": "connect\\payout-statement-descriptors.md", "url": "https://docs.stripe.com/connect/payout-statement-descriptors", "content": "#Payout statement descriptors | Stripe Documentation\nURL: https://docs.stripe.com/connect/payout-statement-descriptors\n\n#Payout statement descriptors\n#Understand and manage how Stripe payouts look on a connected account's bank statements.\nThe statement descriptor used for Connect payouts varies according to the properties of the connected account and the conditions of the payout. There is a precedence order used for manual and automatic payouts.\nConnected accounts can have a customized statement descriptor stored on the Account object at settings.payout.statementdescriptor.\n#Default statement descriptor\nConnect platforms can configure a platform-wide default statement descriptor in their Connect settings, which is also used under certain criteria. Even when the precedence order falls to it, the default statement descriptor configured in your platform’s Connect settings only applies to a connected account’s payout under certain criteria.\n• The connected account belongs to a platform that pays Stripe fees (including Custom and Express accounts), or you have platform controls for it.\n• The connected account doesn’t have access to the Stripe API. Connected accounts only have access to the Stripe API if they can access the Stripe Dashboard.\n• The connected account isn’t restricted from using the readwrite OAuth scope. Connected accounts can use the readwrite OAuth scope if they have access to the Stripe Dashboard and aren’t explicitly restricted from using it with platform controls.\n`readwrite``readwrite`Unless all of these criteria apply, the statement descriptor defaults to STRIPE. However, this default might be subject to other external factors, such as which bank processed the payout.\n#Precedence order\nThe precedence order for the statement descriptor is different for manual and automatic payouts.\n#Manual payouts\n# The statementdescriptor set on the Payout object.\n# The settings.payout.statementdescriptor from the connected account, if your platform and the connected account were created on or after October 9th, 2023.\n# Your platform’s default statement descriptor, if it’s applicable to the connected account.\n# If no other conditions are met, the statement descriptor might default to STRIPE.\n#Automatic payouts\n# The settings.payout.statementdescriptor from the connected account, if your platform and the connected account were created on or after October 9th, 2023.\n# Your platform’s default statement descriptor, if it’s applicable to the connected account.\n# If no other conditions are met, the statement descriptor might default to STRIPE."}, {"path": "connect\\payouts-bank-accounts.md", "url": "https://docs.stripe.com/connect/payouts-bank-accounts", "content": "#Manage payout accounts for connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/payouts-bank-accounts\n\n#Manage payout accounts for connected accounts\n#Learn how to manage external bank accounts and debit cards for connected accounts\nPayout accounts can be bank accounts or debit cards. Stripe recommends collecting external account details with the Connect Onboarding web form, which helps you:\n• Save design and development time.\n• Eliminate the need to store sensitive data such as account and routing numbers on your server.\n• Eliminate the need to build form validations when users enter account details.\nIn the US, we also recommend using Stripe Financial Connections, which lets your users securely link their financial accounts to your business. It helps you:\n• Increase onboarding conversion by preventing your accounts from having to interrupt the process to locate their account and routing numbers.\n• Reduce first payout failure rates by eliminating errors that result from manual entry of account and routing numbers.\n• Eliminate the need to store sensitive data such as account and routing numbers on your server.\n• Eliminate the need to build form validations when accounts enter account details in custom onboarding forms.\n• Enable your accounts to authenticate in fewer steps by reusing bank account details they’ve saved to Link. Accounts that save their account information at any of the Stripe businesses using Link can share their account details with your platform the next time they use Financial Connections.\n• Access additional information on an account’s external bank account, such as balances, ownership details, and transactions. You can mitigate fraud during onboarding by verifying that information, such as the name and address of the external bank account holder.\nFinancial Connections is free when you include Link. Otherwise, using it incurs fees.\nAlternatively, if you use API onboarding for your connected accounts, you can collect payout account details with a custom form in your account onboarding flow.\n#Opting out of external account collection\nFor accounts where the platform is responsible for collecting requirements, such as Custom accounts, you may opt not to collect external account information in onboarding. You may do this if, for instance, you build your own onboarding flow where you want to collect external account information.\nIn embedded onboarding, you can disable external account collection by setting the externalaccountcollection feature on the Account Session to false. Alternatively, in hosted onboarding you can navigate to your Connect external accounts settings and then under Accounts where the platform is responsible for collecting requirements enable or disable collecting external account information. Note that this is off by default.\n`externalaccountcollection`## Collecting external accounts\nStripe-hosted onboarding for connected accounts uses a web form hosted by Stripe to collect the information required to onboard connected accounts. Stripe-hosted onboarding can collect both bank accounts and debit cards. You can use Financial Connections with Stripe-hosted onboarding to collect bank account details. However, you can’t use Financial Connections to collect debit card details.\nIf you’re responsible for connected accounts that can’t cover negative balances, including Custom and Express accounts, you can customize the collection flow of external accounts in your External account settings. These settings aren’t applicable if you’re using direct API calls from your own form.\nIn your External account settings, you can:\n• Enable or disable the collection of debit cards, by making a selection under Allow debit cards?.\n• Require that connected accounts must add at least one bank account before being able to add any other type of external account, such as a debit card. You can access this setting under Require at least one bank account?. This is useful for ensuring auto debit support.\n• Control whether or not connected accounts to add more than one external account in a given currency. There is a limit of five external accounts per currency. You can access this setting under Collect multiple external accounts per currency.\n#Available in\nStripe platforms in the US can enable Stripe Financial Connections within the Stripe-hosted onboarding form by following these steps:\n# Navigate to your External Account settings, where you manage optional Connect onboarding features.\n# For connected accounts where your platform collects account information when requirements change, including for Custom accounts, you must allow Stripe-hosted onboarding to collect external account details. Under Stripe-hosted onboarding for Custom accounts, allow Stripe to collect external account information by turning on the toggle.\n# Under How will bank account details be collected?, select Financial Connections.\n# (Optional) Request permission to access additional data on the accounts instantly verified with Financial Connections, such as balances, ownership details, and transactions. If you opt to request this additional information, you’ll be prompted to sign up for Stripe Financial Connections.\nWhen external account detail collection is enabled, all connected accounts are prompted to authenticate their bank account using the Stripe-hosted modal UI embedded within the onboarding form.\nA Connect onboarding flow using Stripe Financial Connections to collect a payout account.\nIf a connected account can’t instantly verify their bank account using Financial Connections, the verification process automatically falls back to manual entry:\nA Connect onboarding flow using the Stripe Financial Connections modal to collect a payout account using manual entry.\nAfter onboarding, the specified bank account automatically attaches to the connected account.\n#Retrieve data on a Financial Connections account Server-side\nYou can determine if your user linked a Financial Connections Account by retrieving any linked Financial Connections Accounts using their connected account ID. Be sure to specify their account ID in the Stripe-Account header.\n`Stripe-Account`curl -G https://api.stripe.com/v1/financialconnections/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"accountholder[account]\"={{CONNECTEDACCOUNTID}}\n`curl -G https://api.stripe.com/v1/financialconnections/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"accountholder[account]\"={{CONNECTEDACCOUNTID}}`This returns an API response similar to the following:\n{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"fcazbyrdjTrwcYZJZc6WBs6GPid\",\n      \"object\": \"financialconnections.account\",\n      \"accountholder\": {\n        \"account\": '{{CONNECTEDACCOUNTID}}',\n        \"type\": \"account\"\n      },\n      ...\n      \"supportedpaymentmethodtypes\": [\n        \"usbankaccount\"\n      ]\n    }\n    ...\n  ]\n}\n`{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"fcazbyrdjTrwcYZJZc6WBs6GPid\",\n      \"object\": \"financialconnections.account\",\n      \"accountholder\": {\n        \"account\": '{{CONNECTEDACCOUNTID}}',\n        \"type\": \"account\"\n      },\n      ...\n      \"supportedpaymentmethodtypes\": [\n        \"usbankaccount\"\n      ]\n    }\n    ...\n  ]\n}`If any Financial Connections accounts are listed, it indicates that the connected account linked them during the onboarding process. You can use the id value to access or refresh the data you specified in your External Account settings. To protect the privacy of your connected account’s data, you can only access the data you specified.\n`id`To start retrieving account data, follow the guides for balances, ownership, and transactions. On all subsequent account retrieval and refresh requests, be sure to include the Stripe-Account header with the connected account ID:\n`Stripe-Account`curl https://api.stripe.com/v1/financialconnections/accounts/fcazbyrdjTrwcYZJZc6WBs6GPid/refresh \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"features[]\"=balance\n`curl https://api.stripe.com/v1/financialconnections/accounts/fcazbyrdjTrwcYZJZc6WBs6GPid/refresh \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d \"features[]\"=balance`"}, {"path": "connect\\payouts-connected-accounts.md", "url": "https://docs.stripe.com/connect/payouts-connected-accounts", "content": "#Payouts to connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/payouts-connected-accounts\n\n#Payouts to connected accounts\n#Manage payouts and external accounts for your platform's connected accounts.\nBy default, any charge you make on behalf of a connected account accumulates in the connected account’s balance and is paid out on a daily rolling basis. Depending on the configuration of your connected accounts, your platform can manage their payouts as follows:\n• Schedule the frequency of automatic payouts\n• Perform manual payouts\n• Settle funds instantly\n• When using destination charges or separate charges and transfers, retain funds in your platform balance\n#Note\nIn versions of Connect earlier than 2018, payouts were known as bank transfers and used the deprecated transfers API. For information about bank transfers, see the legacy Transfers documentation.\n`transfers`## Payout management configurations\nFor connected accounts with access to the full Stripe Dashboard or Express Dashboard, the account holder manages their external payout accounts (bank accounts and debit cards), but the platform can schedule payouts. To schedule payouts for an account that has access to the full Stripe Dashboard, the platform must configure Platform controls for the account.\nFor connected accounts without access to a Stripe-hosted Dashboard, the platform manages their external payout accounts and can schedule their payouts.\n#Supported settlement currencies\nTo see which currencies you can use to settle funds in a particular country, select that country from the following dropdown.\n#Note\nFor a list of supported presentment currencies, see the currencies documentation.\nPlatforms can also enable their connected accounts to settle funds and pay out to banks in certain non-primary currencies, or pay out to non-domestic bank accounts in the local currency. In some cases, Stripe charges a fee. For more information, see multi-currency settlement for Connect marketplaces and platforms.\n#Use webhooks with payouts\nYou can track all payout activity on connected accounts with webhooks by creating an event destination and listening for these events:\n• payout.created\n• payout.updated\n• payout.paid\n• payout.failed\n`payout.created``payout.updated``payout.paid``payout.failed`For most payouts, event notifications occur over a series of days. Instant payouts typically send payout.paid within 30 minutes.\n`payout.paid`When a payout can’t be completed, a payout.failed event occurs. The event’s failurecode property indicates the reason. A failed payout also disables the external account involved in that payout, triggering an account.externalaccount.updated event. No payouts can be made to that external account until the platform updates the connected account’s external accounts.\n`payout.failed``failurecode``account.externalaccount.updated`"}, {"path": "connect\\platform-controls-for-stripe-dashboard-accounts.md", "url": "https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts", "content": "#Platform controls in the Stripe Dashboard | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts\n\n#Platform controls in the Stripe Dashboard\n#Manage more features on behalf of your connected accounts that use the Stripe Dashboard with platform controls.\nThousands of platforms and marketplaces use Stripe Connect to facilitate payments and pay out recipients. Connected accounts with Stripe Dashboard access is the fastest way to enable your customers to accept payments directly, while relying on Stripe to manage onboarding, reporting, and loss liability. With platform controls, you can manage more features on behalf of your connected accounts.\n#Note\nAs of June 2021, platforms using OAuth with readwrite scope won’t be able to connect to accounts that are controlled by another platform.\n#Configure third party extensions\nThird party extensions allow your connected accounts to operate the Stripe API on their behalf in a particular workflow. Navigate to the third-party extensions page to select the options for your connected accounts. These options apply to all of your new connected accounts moving forward. Visit the connected accounts page to change settings for individual connected accounts.\nThere are three extension access options:\n• Full access, allowing read and write operations. Learn about revoking before enabling.\n• Read-only\n• None, blocking all extension installations\nWhen your platform owns loss liability, you can’t enable full access extensions, which could let connected accounts initiate transactions that you don’t control.\n#Caution\nWhen your platform collects fees and enables full access extensions, your platform might pay more in fees for off-platform usage. Contact Support to learn more.\n#Revoke full access extensions\nYou can revoke access to install new full access extensions. This doesn’t prevent a connected account from using a previously installed extension. Stripe doesn’t support revoking extensions from your connected accounts.\n#Control payout timing\nAs the platform, you can now update your connected accounts’ payouts programmatically using the Stripe API or in the Dashboard. You can also initiate payouts on behalf of your connected accounts programmatically using the Stripe API or in the Dashboard.\nNavigate to the payout schedules page to determine whether connected accounts can manage their own payout schedules. Connected accounts can still make manual payouts after you, as the platform, choose to restrict connected accounts from updating their own payout schedule.\n#Note\nIf you need full control over your connected accounts’ payouts and want to restrict your connected accounts from being able to make their own payouts, contact us with a detailed description of your use case.\n#Access consolidated reporting\nYou can access reporting across all connected accounts that you control using the built in-Dashboard reporting as well as within Stripe Sigma, a custom reporting solution that makes all of your data available as an interactive SQL environment in the Dashboard. To learn more, see Financial reports and Sigma for Connect platforms.\n#Co-brand your connected accounts\nAs the platform, you can manage your brand settings within the Connect Settings > Stripe Dashboard section. All new accounts onboarding to your platform will see your icon and branding color in their dashboard. To understand changes for connected accounts, see this Support article.\n#Note\nThese features apply only to new accounts onboarding to your platform, denoted by true in the iscontroller property for the Account object. Existing accounts aren’t eligible for these features.\n`true``is_controller`## Remove accounts\nFrom the connected account details page in your Dashboard, click the overflow menu () and choose Remove account. This action disconnects the account and revokes access in the same way as the OAuth de-authorize endpoint. Removing an account from your platform resets any platform controls (such as payout timing) you’ve configured for the connected account. If the account reconnects later, prior platform controls aren’t reinstated."}, {"path": "connect\\platform-embedded-taxes-walkthrough.md", "url": "https://docs.stripe.com/connect/platform-embedded-taxes-walkthrough", "content": "#1099 Tax Reporting embedded components walkthrough | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-embedded-taxes-walkthrough\n\n#1099 Tax Reporting embedded components walkthrough\n#Manage 1099 Tax forms for connected accounts using embedded components.\nThis page outlines an example of the typical product flow that your connected accounts can encounter when you, as the platform, have implemented Connect embedded components. This is useful for you and your support teams to understand the overall user journey of your connected accounts. If you have any questions, contact Stripe Support.\n#Note\nTax reporting features are not currently visible in the embedded components. You can access them later during Tax Season 2024, ahead of relevant milestones as noted below. This page gives a preview of the user experience.\n#Connect embedded components\nYou can give your connected accounts access to components for managing tax information and receiving 1099s electronically, all embedded within your platform. To do this, integrate and configure Connect embedded components and enable e-delivery.\nStripe can send pre-filing confirmation emails to collect tax information and paperless delivery consent directly from your connected accounts. We’ll email your eligible connected accounts starting the week of November 4. You can select this option when you configure your tax form settings.\n#1099 tax reporting lifecycle\nThe following sections describe what the process looks like after Connect embedded components are set up and e-delivery is enabled.\n#Your connected account receives a pre-filing confirmation email from Stripe\nYour connected account receives an email from Stripe asking them to confirm their tax information and update their delivery preferences. The subject line reads ‘Get your [PlatformName] 2024 tax forms faster by enabling e-delivery.’\nPre-filing confirmation email from Stripe\n#Your connected account is directed to your platform\nDuring pre-filing confirmation, your connected account is directed to the Account Management embedded component, where they can confirm their account information and agree to paperless delivery of their 1099 tax form. They can also edit information other than tax information in the Account Management component.\nThe Account Management embedded component\nYour accounts could get blocked if you’ve applied 1099 capabilities and the connected account updates their value to a name and TIN combination that doesn’t match against IRS records. Similarly, if Stripe is unable to complete KYC requirements on them based on the information they provided, their account payouts are blocked until they correct their information.\n#Connected account owners agree to paperless delivery\nWhen your connected account edits their tax form delivery method, they can agree to paperless delivery.\nThe dialog to consent to paperless delivery of tax forms.\nCurrently, connected accounts can’t request a paper copy in addition to the e-delivery of the tax form.\n#Your connected account receives the e-delivery email from Stripe\nAfter you file 1099 tax forms in your platform’s Stripe Dashboard, your connected account receives an email from Stripe to view their tax form electronically. The subject line reads “Your [PlatformName] 1099 tax form is ready.”\n#Connected accounts download their tax forms\n#Note\nPast forms will be visible ahead of 1099 tax form filing in January 2025, and new forms will appear after they’re filed.\nYour connected account can download their form after your platform makes it available through the Documents Embedded Component. Tax invoices and other documents are also available through this component.\nThe Documents embedded component where payees can download their 1099 tax forms.\nMost connected accounts are prompted to enter the last four digits of the TIN on their 1099 tax form before being able to download a copy of the form."}, {"path": "connect\\platform-express-dashboard-taxes-communication.md", "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication", "content": "#1099 Tax Support proposed communication guidelines | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication\n\n#1099 Tax Support proposed communication guidelines\n#Review a proposed communication timeline for communicating with your connected accounts about 1099 Tax forms.\n#For platforms using e-delivery with Stripe Express or Connect embedded components to issue 1099 tax forms\nWe recommend sending a reminder (example below) to connected accounts once they’ve received their pre-filing confirmation from Stripe. Notifying your connected accounts about outreach from Stripe helps to make a smoother user experience during tax season. We’ll send you a heads up email once we start sending pre-filing confirmation emails to your connected accounts.\n Who sends? | Email to connected accounts | Date \n --- | --- | --- \n Stripe | Get your [PlatformName] 2024 tax forms faster by enabling e-delivery | Starting the week of November 4, 2024 \n Platform | Email template: Post-Stripe email | Any time after Stripe has sent the initial pre-filing confirmation email and before filing your 1099s. \n Stripe | Your [PlatformName] 1099 tax form is ready | When your platform files in the Stripe dashboard (must be before January 22, 2025) \n Platform | Email template: E-delivery follow up email | Anytime after you file your 1099s in the Stripe dashboard. \n#Stripe email to connected accounts: Get your [PlatformName] 2024 tax forms faster by enabling e-delivery\nStripe will send a version of these communications starting the week of November 4, 2024.\nAn example email from Stripe to a connected account to review draft 1099 tax forms.\n#Email template: Post-Stripe email\nWe recommend letting your connected accounts know that they should’ve received information about their 1099 tax forms from Stripe. This is a proposed email template you can customize for your platform, based on the interface you’ve selected for e-delivery: Stripe Express or Connect embedded components.\nReply-to: [Platform’s preferred email]\nSubject: Confirm your tax information in your account\nPre-header: Please verify your tax information is up to date\nEmail Copy:\n[PlatformName] partners with Stripe to file 1099 tax forms that report your earnings or sales activity. You should have received an email from Stripe ([check domain in your communication settings]) with instructions about how to confirm your tax information and delivery preference to ensure your 1099 tax form is sent to the right place.\nPlease confirm your information using the link provided in the email from Stripe. You’ll need to confirm your information is up-to-date to receive your 1099 form for the 2024 tax year. You may be asked a series of security questions to verify your identity.\nIf you have any questions, visit [https://support.stripe.com/express or https://support.stripe.com/embedded-connect/topics/1099].\nWhat is a 1099 form? A 1099-NEC/1099-MISC form summarizes your earnings as an independent contractor or service provider. It’s provided to you and the IRS, as well as some US states, if you earned $600 or more in 2024.\nThe 1099-K form summarizes the sales activity of your account. It will be provided to you and the IRS, as well as some US states, if you processed more than $5,000 and had more than 0 transactions in 2024.\nWhy do I need to verify my information? We want to ensure that information like your name, address, and Taxpayer Identification Number are up to date so that your 1099 tax form is accurate and sent to the right place.\nI didn’t receive an email from Stripe—what should I do? Please double check your spam or junk mail folder for an email with the subject line “Get your [PlatformName] 2024 tax forms faster by enabling e-delivery.” If you haven’t received this email from Stripe, please reach out to [Platform email].\nWhen and where can I expect my 1099 tax form? 1099 tax forms are typically finalized in January. If you meet the income thresholds above, Stripe will send you an email to access your 1099 tax form (or mail a paper form if you prefer).\n#Stripe email to connected accounts: Your [PlatformName] 1099 tax form is ready\nStripe sends a version of this email to your connected accounts after you file your tax forms in the Connect Dashboard.\nAn example email from Stripe to a connected account to view their 1099 tax form. The copy changes slightly if the platform issues a 1099-MISC or 1099-NEC.\n#Email template: E-delivery follow up email\nWe recommend letting your connected accounts know that they should file and deliver their 1099 after you’ve filed all your 1099 tax forms. This is a proposed email template you can customize for your platform, based on the interface you’ve selected for e-delivery: Stripe Express or Connect embedded components.\nEmail Copy:\nHi there,\n[PlatformName] partners with Stripe to file 1099 tax forms that report your earnings or sales activity. You should have received an email from Stripe ([check domain in your communication settings]) to notify you that your 1099 tax form has been filed with the IRS and/or state tax authorities. Look for an email with the subject line, “Your [PlatformName] 1099 tax form is ready.”\nPlease follow the instructions in the email to view and download your 1099 tax form. It’s not too late to agree to paperless delivery — just follow the prompts in your account to opt into paperless delivery. This will allow you to be able to view and download your 1099 tax form directly from your account.\nIf you have any questions, visit [https://support.stripe.com/express or https://support.stripe.com/embedded-connect/topics/1099].\nFAQ\nWhat is a 1099 form? A 1099-NEC/1099-MISC form summarizes your earnings as an independent contractor or service provider. It’s provided to you and the IRS, as well as some US states, if you earned $600 or more in 2024.\nThe 1099-K form summarizes the sales activity of your account. It will be provided to you and the IRS, as well as some US states, if you processed more than $5,000 and had more than 0 transactions in 2024.\nI didn’t receive an email from Stripe—what should I do? Please double check your spam or junk mail folder for an email with the subject line “Your [Platform_Name] 1099 tax form is ready” If you haven’t received this email from Stripe, please reach out to [Platform’s preferred email]."}, {"path": "connect\\platform-express-dashboard-taxes-faqs.md", "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs", "content": "#Support recommendations and FAQ templates | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs\n\n#Support recommendations and FAQ templates\n#FAQ templates for platforms using Stripe Express for pre-filing confirmation and e-delivery of 1099 tax forms.\nWe know that supporting your connected accounts during tax season can be tricky. We’ve created this guide to address the top reasons platforms contact Stripe support for help with connected accounts. We’ve assembled a set of questions and responses based on the questions connected accounts most frequently ask platforms during 1099 tax season. You can use these questions and responses as part of your own tax support strategy.\n#Platform support recommendations\nThe following sections represent the questions platforms often contact Stripe support about during 1099 tax season, along with our recommendations for how you can proactively support your connected accounts.\n#A connected account wants to know if they’ve already been sent a pre-filing confirmation email from Stripe\nIf your platform opts for e-delivery through Stripe Express and enables the collection of tax information in advance using 1099 tax form settings, Stripe sends emails to the connected accounts on behalf of platforms. We do this to confirm their tax information and provide e-delivery consent through Stripe Express. To check whether we sent a pre-filing confirmation email to your connected account:\n# Head to the 1099 tab of the Tax Forms dashboard.\n# Use the filter Stripe merchant ID to locate the connected account’s 1099 tax form.\n# Check the Pre-filing confirmation email status and share with the payee.\nThe Pre-filing confirmation property has the following statuses:\n• Queued: This connected account is in the queue and we’ll send their pre-filing confirmation email soon.\n• Sent: We sent this connected account their pre-filing confirmation email.\n• Not eligible: This connected account isn’t eligible for inclusion in pre-filing confirmation. Possible reasons for ineligibility include:The account is missing an email address.The account is under the 1099 reporting thresholdThe account’s configuration excludes it from eligibility. See Edge Cases for more information.\n• Not Sent: This connected account is eligible but wasn’t sent an invite prior to the cutoff date for pre-filing confirmation. See Tax season 2024 checklist for more details.\n• The account is missing an email address.\n• The account is under the 1099 reporting threshold\n• The account’s configuration excludes it from eligibility. See Edge Cases for more information.\n#A connected account hasn’t received or can’t find their pre-filing confirmation email from Stripe\nTo assist a connected account with getting their pre-filing confirmation email: Before taking any steps in the 1099 tab of the Tax Forms dashboard, advise your connected account to:\n# Check their inbox and spam folders for email with this subject line, Get your [PlatformName] 2024 tax forms faster by enabling e-delivery.\n# Use the self-serve tool to resend an invite email to themselves.\n#Note\nThe email address must match the one associated with their Stripe account.\nIf those options don’t work, head to the 1099 tab of the Tax Forms dashboard to troubleshoot:\nCheck if the payee is 1099 eligible:\n# Use the filters in the 1099 tab of the Tax Forms dashboard to locate the connected account’s 1099 tax form.\n# Review the Pre-filing confirmation status in the Tax Form details. If the status is Not eligible use the information in the tooltip to understand why.\nCheck if the payee has the correct email address or is missing an email address:\n• Select the Edit option next to the email address field and add the correct email address. This updates the email address associated with the connected account itself, to avoid issues in future tax seasons.\n• Learn more about other ways to update emails for your accounts.\n#Send your connected account a pre-filing confirmation email invite from Stripe\nGo to the overflow menu () and select the option to Request pre-filing confirmation to send an invite email to the payee’s email address.\n#A connected account is blocked from accessing the Stripe Express dashboard\nIf a connected account owner fails to verify their identity, we tell them to contact their platform.\nIdentity verification failure\nWhen a connected account reaches out to you for failed verification, confirm that the connected account owner is entering the information and that name, date of birth and ID number are all saved on the Stripe account. Then, reset the account claim attempts for the connected account.\nTo reset the account claim attempts for a connected account:\n# Head to the 1099 tab of the Tax Forms dashboard.\n# Locate the connect account’s Account claim status.If the status is Not claimed, no attempts left, go to the overflow menu () and select the option to Reset account claim attempts.If the status is Not claimed and the payee is still doesn’t have access, verify that you have the most up-to-date information on file for the account, and send a new pre-filing confirmation invite to the connected account.\n• If the status is Not claimed, no attempts left, go to the overflow menu () and select the option to Reset account claim attempts.\n• If the status is Not claimed and the payee is still doesn’t have access, verify that you have the most up-to-date information on file for the account, and send a new pre-filing confirmation invite to the connected account.\nAccount claim status has the following values:\n• Claimed: the connected account has completed account claim and has access to the Stripe Express dashboard.\n• Not claimed, no attempts left: the connected account has exhausted their attempts to complete account claim and the platform must reset them.\n• Not claimed: the connected account has either not attempted yet or still has account claim attempts remaining.\n#A connected account wants to use their business tax details instead of their personal details (or vice versa) on their 1099 tax form\nThe tax details that appear on the 1099 tax form are determined by a connected account’s business type. The IRS expects to see an SSN provided on 1099 forms for Single Person Entities (SPEs). To change the tax details that appear on the form, you can update the connected account’s business type by:\n# Collect the following details from the connected account:Desired legal entity typeDesired legal entity name and TIN\n# Locate the connected account, navigate to Business details, and select Edit.\n# Select Change business type and choose the desired Type of business and Business structure.\n# Follow the prompts to enter the new legal entity details for the connected account’s business.\n# Return to the 1099 tab of the Tax Forms dashboard and verify that the name and TIN on the 1099 tax form match what was shared with you from the connected account.\n# If necessary, edit the 1099 tax form with the newly supplied information.\n• Desired legal entity type\n• Desired legal entity name and TIN\n#Note\nOnly certain user roles can update this information in the Dashboard, such as the Connect Onboarding Analyst or an Admin. Tax Analysts can’t edit connected account information. See Team roles documentation for more information. You can also update this information using the accountsupdate API.\n#A connected account no longer has access to the phone number they used for their Stripe Express account\nTo help your connected account update their phone number:\n# Direct your connected account to the options at the bottom of the Stripe Express login page.\n# Once there, they should select I no longer have access to this phone and follow the prompts to update their phone number.\n#Note\nThe payee must have access to the email address that is listed for the connected account to complete the required verification steps.\n#A connected account agreed to paperless delivery but also wants a postal mailed copy sent to them\nAfter setting up their account during pre-filing confirmation, your connected account can change their delivery preferences in the Tax Forms page of Stripe Express. To request a mailed copy of their 1099, they can:\n# Navigate to the Tax Forms page of Stripe Express.\n# Select the overflow menu () next to their most recent 1099 tax form.\n# Select Edit information.\n# Switch the toggle for Postal mail delivery from Off to On.\n#Note\nPaperless delivery is only available if you, as the platform, have opted into Optional Post Delivery in your Delivery Settings before you file your 1099 tax forms. Selecting Optional Post Delivery only allows connected accounts to change their delivery preferences; it does not provide one-off postal mailings of 1099 tax forms.\n#A connect account has requested a transaction log of all the transactions included in their 1099 tax form\nSee Export transaction logs for instructions on exporting the logs for each 1099 form.\n#1099 Tax Support FAQ template for connected accounts\nWe recommend creating public-facing support articles about the Stripe Express tax experience for your connected accounts. View a great example from DoorDash.\n#What are 1099s?\n1099 forms are federal income tax information forms used to report earnings and proceeds other than wages, salaries, and tips (which are reported on the federal W-2 form). The forms are filed with the US Internal Revenue Service (IRS) and, if required, state tax departments. Forms must be delivered to recipients by January 31 and can be postal mailed or sent via paperless delivery.\n#What is Stripe Express, and how do I access it?\nStripe Express allows you to update your tax information, opt into paperless delivery, manage tax forms, and track your earnings. If you’re working with [PlatformName] and earned $600 or more (within the calendar year in the US), Stripe will send an email inviting you to create an account and log in to Stripe Express.\n#How do I download the app?\nIf you’d like to download the Stripe Express app, you can do so here from:\n• iOS: https://apps.apple.com/us/app/stripe-express/id1560214813\n• Android: Not available\n#Do I have to download an app?\nYou don’t need to download an app. You can use either the web-based portal or the Stripe Express app to access your account and tax information.\n#Which email address does Stripe use to send Stripe Express invitations?\nStripe uses the email information associated with your [insert platform name] account to send you an invitation to sign up for Stripe Express.\nIf you’re unable to find that email, head to this Support site page where you can request a new link to be sent to your email. If you still are not able to locate your invite email, please reach out to [PlatformName] support for help updating your email address and getting a new invite email.\n#I no longer have access to the phone number I signed up with. How do I log in to my Stripe Express account?\nIf you’ve lost or updated your phone number, you can select the “I no longer have access to this phone number” option during login or account creation to authenticate via email and change your phone number.\n#I earned enough to need a 1099 form in 2024. Why haven’t I received an email from Stripe?\nIf you earned enough to need a 1099 form in 2024, you should have received an email from Stripe by mid-January 2025. Emails for pre-filing confirmation will be sent out starting November 4, 2024. This is separate from the email you’ll receive when your form is filed in January.\nIf you can’t find an email from Stripe, it’s possible that:\n• The may be in your spam/junk mail folder. Please search your inbox for an email titled: “Get your [PlatformName] 2024 tax forms faster by enabling e-delivery”.\n• [PlatformName] does not have your most current email address on file. Please check any other email addresses you may have used to sign up for [PlatformName], or reach out to [PlatformName] to update your email and have an invite email sent to you.\n• The email address associated with your [PlatformName] account is incorrect, missing, or unable to receive mail.\n• [PlatformName] has chosen to postal deliver forms to you. If you haven’t received an email from Stripe or a 1099 in the mail, please reach out to [PlatformName] to get a copy of your tax forms.\nYou may not have received an invitation for other reasons, such as:\n• You earned less than the threshold for your form type.\n• Your email address on file is incorrect, missing, or unable to receive email.\n• Your specific account is unsupported on Stripe Express (in uncommon situations where multiple users are sharing the same account, or the same email address is being used on more than 20 accounts)\n#Will I receive a 1099 form?\nIf you earned less than $600 over the course of the year, you may not receive a 1099 form and one won’t be generated for you unless you meet a threshold in your state. If your state has a filing threshold lower than $600, you might receive a 1099 form.\nYou can check your state’s requirements here: View 1099 state requirements.\n#When will I receive my 1099?\nYour 1099 tax form will be sent to you by January 31, 2025 (note: paper forms delivered by postal delivery might take up to 10 additional business days).\n• Starting November 4, 2024: Stripe will email you instructions on how to set up e-delivery and access a Stripe Express account. If you haven’t already, you’ll need to complete these steps to access your 1099 tax form electronically.\n• Before mid January: Confirm your tax information (e.g., name, address, and SSN or EIN) is correct  and opt into paperless delivery via Stripe Express.\n• By January 31, 2025:Your 1099 tax form will be available to download through Stripe Express.Your 1099 tax form will be mailed to you if you don’t receive an email from Stripe or don’t consent to e-delivery. Please allow up to 10 business days for postal delivery.[PlatformName] will file your 1099 tax form with the IRS and relevant state tax authorities.\n• April 15, 2025: IRS deadline to file taxes. You’ll need your 1099 tax form to file your taxes.\n• Your 1099 tax form will be available to download through Stripe Express.\n• Your 1099 tax form will be mailed to you if you don’t receive an email from Stripe or don’t consent to e-delivery. Please allow up to 10 business days for postal delivery.\n• [PlatformName] will file your 1099 tax form with the IRS and relevant state tax authorities.\nIn January, we strongly suggest that you make sure all of your tax filing details and delivery preferences are up to date in Stripe Express. Your name, address, and Taxpayer Identification Number (Social Security Number /Employer Identification Number) are of primary importance.\n#How do I update my tax information?\nOpen the email from Stripe and click on the “Get started” button, which will prompt you to create a Stripe Express account. After you create an account, you’ll be able to review your tax information (e.g., name, address, and SSN or EIN) and make any necessary changes via Stripe Express. Please update your information no later than mid January 2025.\nPlease note: If you don’t agree to paperless delivery by mid January 2025, we’ll automatically mail your 1099 tax form to the address on file, so it’s critical that your information is current, correct, and complete.\nYou may find that your 1099 tax form reports your SSN and you want to use your EIN (or vice-versa). If that’s the case, you’ll want to reach out to your platform to update your legal entity information.\nPlease note: If you’re operating as an individual, Sole Proprietorship, or Single Member LLC, the IRS will expect to see the individual owner’s Name and  SSN (as opposed to Business Name and EIN) reported on your 1099 tax form.\n#When answering the account claim security questions, it states that my answers are incorrect, what should I do?\nPlease reach out to [PlatformName] support to confirm the information that they have on file against the information you are providing.\n#Why is Stripe requesting personal information like my Social Security Number?\nYour SSN, EIN, or ITIN is required to file your 1099 tax form with the IRS and relevant state tax authorities.\n#Is my tax information secure?\nStripe’s security tools and best practices ensure that your sensitive information is safely stored and encrypted. Learn more about the safeguards we’ve put in place to protect your information. Please make sure to keep your login credentials for Stripe Express secure.\n#How can I download my 1099 tax form?\nIf you create a Stripe Express account and agree to paperless delivery, Stripe will email you to let you know when your 1099 tax form is available for download via Stripe Express. If you don’t agree to paperless delivery, Stripe will mail you a paper copy of your 1099 tax form instead.\n#My information has changed since I signed up for [PlatformName]. How can I edit information?\nUpdate your account information in the Account tab:\n• Under Stripe Express Account, you can update the email address and phone number used to log in to Stripe Express. You can only update one contact method at a time.\n• Under Language preference, you can choose your preferred language for Stripe Express.\n• Under Payout and Professional Details, you can update personal and legal entity information and view your bank account or debit card information for payouts. To update your payout details, please reach out to your platform.\n#How do I get a corrected 1099 tax form?\nIf you feel you need corrections made to a 1099 tax form that has already been ‘Filed’, use the edit option in the Tax Forms page of Stripe Express. Information you edit will not appear in the 1099 tax form in the Stripe Express dashboard but it is shared with [PlatformName]. You should reach out to [PlatformName] after you’ve made the edits you want and they can assist you with a correction. Once [PlatformName] ‘files’ your correction, you will be notified via email and you will see a new 1099 tax form appear in the Stripe Express dashboard.\nIt can take up to 72 hours after the platform files the correction for you to be notified.\n#How do I get in touch with Stripe for more help?\nIf you have a question that isn’t answered here, we recommend looking through the 1099 tax forms or Stripe Express resource pages. If you still need help, please contact Stripe support.\n#How do I get into my account?\nYou can log in to your account by visiting connect.stripe.com/expresslogin, where you’ll be prompted for your email address and 6-digit phone verification code to log in. If you don’t remember the email address that you signed up with, check your inbox for past emails that we sent about confirming your tax information for paperless delivery. Otherwise, I’ll need to confirm the email address that is associated with your Stripe account. If you have historically accessed your Stripe Express account via your [insert platform portal name], you can continue to log in this way - however, you will now have to enter a 6-digit verification code that will be sent via SMS to the phone number associated with your account to log in. If you’ve lost or updated your phone number, you can select the “I no longer have access to this phone number” option to authenticate via email and change your phone number.\n#How do I update my phone number? My phone number changed and I’m locked out.\nIf you’ve lost your phone or changed your number, you can update the number used for SMS authentication when you log in to Stripe Express.\n• Go to express.stripe.com and enter the email address for your account\n• On the next screen where a 6-digit verification code is requested, select the “I no longer have access to this phone number” option\n• Follow the subsequent steps to authenticate your request and add a new phone number to the account.\n#Can you resend the email?\nYou can use the tool on the Stripe Express support page to request a new invite email. However, before doing so, it’s possible that:\n• It may be in your spam/junk mail folder. Please search your inbox for an email from Stripe.\n• Your platform does not have your most current email address on file. Please check any other email addresses you may have used with your platform, or reach out to your platform to update your email.\n• The email address associated with your account is incorrect, missing, or unable to receive mail.\n#I have multiple accounts with different emails. Do I have to sign up multiple times?\nIf all your accounts pass the 1099 reporting thresholds and your platform is using Stripe Express for e-delivery you’ll be sent invite emails for each account and you’ll need to create an account for each one. Follow the steps in the invite emails.\n#Why do I need to provide my SSN/EIN?\nThe IRS requires this information to be reported correctly on your 1099 tax form. The IRS requires your Taxpayer Identification Number (TIN) on your 1099 tax form. If you are an individual, your Social Security Number (SSN) or Individual Taxpayer Identification Number (ITIN) is used as your TIN. If you are a business, your Employer Identification Number (EIN) is used as your TIN. If you have earned enough to qualify for a 1099 tax form, the IRS requires your full details to be reported on your 1099 tax form filings. The tax authorities which receive copies of your 1099 tax form will expect to see the income on your individual or business tax return. The EIN/SSN/ITIN is crucial in connecting this information, which is why the IRS requires it.\n#I have claimed my account and I think the information is wrong. How do I change it?\nTo update your personal information on your web browser, first head to the Accounts tab at the top of the page:\n• Under Stripe Express Account, you can update the email address and phone number used to log in to Stripe Express. You can only update one contact method at a time.\n• Under Language preference, you can choose your preferred language for the dashboard.\n• Under Payout details, you’ll see the platforms tied to your account. After you select a platform, you can update your bank details associated with that platform. This is only available for some accounts using Stripe Express.\n• Under Platform settings, you’ll see the platforms tied to your account. After you select a platform, you can update your Professional and Personal details associated with that platform. You can also invite people to your account and remove them. Check the article linked here to learn more.\n#How do I access tax forms from previous years?\nIf you were eligible for a 1099 tax form in previous years and your platform used Stripe Express to deliver tax forms in those years, you can use the dropdown menu in Stripe Express to change the year and view prior years’ tax forms. If you don’t see the form there, please reach out to [PlatformName] for assistance.\n#Edge cases for pre-filing confirmation and e-delivery via Stripe Express\nConnected accounts with the below setups may be blocked from pre-filing confirmation and e-delivery or may have trouble accessing their invite email:\n• Standalone and Split forms: If a form has been split or is a standalone form (that is, not tied to the active user of a connected account), it’s not eligible for electronic delivery.\n• Multiple accounts sharing the same email: When multiple accounts for the same platform have the same email, they receive one email per account for pre-filing confirmation, up to five emails. They receive one email per account for e-delivery.\n• Rejected and deleted accounts: Accounts that you’ve rejected or deleted no longer have a Stripe relationship and are ineligible to login to Stripe Express.\n• Disconnected accounts: Accounts where you have revoked access aren’t eligible for pre-filing confirmation or electronic delivery.\n• Pre-filing confirmation outreach from Stripe: accounts that have missing email addresses or are below the filing threshold will be excluded from Stripe outreach."}, {"path": "connect\\platform-express-dashboard-taxes-implementation.md", "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-implementation", "content": "#1099 Tax Support implementation and timeline | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-express-dashboard-taxes-implementation\n\n#1099 Tax Support implementation and timeline\n#Learn about implementation steps and timelines for doing e-delivery of your 1099 tax forms through an interface built by Stripe.\nStarting the week of November 4, Stripe will begin outreach to your connected accounts. You can use the implementation checklist on this page to make sure that you’re ready to use e-delivery for the tax season.\n Action | Comments \n --- | --- \n Configure your platform tax settings for the tax year, including delivery settings to enable e-delivery and early collection of identity information for connected accounts. Learn more about e-delivery on Stripe Express and e-delivery with Connect embedded components. | Enabling e-delivery and collection of tax information triggers emails from Stripe to connected accounts starting in November. \n Identify connected accounts that are missing email addresses and add them. | Stripe requires an email address for each of your connected accounts to confirm tax information and e-deliver tax forms. Use the Missing email address filter in the 1099 dashboard to see which accounts require you to add an email address. \n Identify connected accounts that need updated tax information, and reach out to those accounts. | This is important to make sure you have good tax data at filing time. For more information, see Identifying 1099 forms that need attention. \n Prep your support teams for tax season. | Grant the Tax Analyst role for anyone on your team that needs permissions to work with tax forms. For more information, see Teams and user roles. Also, create or update FAQs for internal support teams. \n Review edge cases that aren’t eligible for e-delivery (Stripe can only paper deliver to these accounts). | Work with your team to review these edge cases. \n Make sure your Connect branding settings are up to date. We use those icons, colors, and the business name for Stripe emails to connected accounts. | Go to the Connect settings page. In the Branding section, customize the name, color, and icon of your brand. Please use a 128x128 pixel icon. \n Preview and test the outreach email from Stripe. | Go to the Emails page and preview the outreach email. You can send a test email. \n Make sure that your support email address is up to date. We use it in the e-delivery consent dialog. | Go to your Account details page in the Dashboard and confirm the Support email for your platform in the Public business information section. \n Prepare to notify your connected accounts to expect an email from Stripe before e-delivery begin. | In the 1099 Dashboard page, filter for accounts with a Pre-filing confirmation status of Sent to check who’s already been emailed. Send reminder emails to accounts who’ve already been sent pre-filing confirmation emails. Suggested timing: Once outreach to your connected accounts begins, we recommend a weekly cadence for sending reminder emails. You may choose to send another reminder email prior to filing and e-delivering of 1099 tax forms in late January. For more information, see Stripe communication timeline proposal. \n Create a support article for your connected accounts to explain the tax timeline and your partnership with Stripe for taxes. | Example of a support article by DoorDash. To view some example FAQs, see Connected account FAQ template. \n`Missing email address`"}, {"path": "connect\\platform-express-dashboard-taxes-walkthrough.md", "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough", "content": "#1099 Tax Reporting Express Dashboard walkthrough | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough\n\n#1099 Tax Reporting Express Dashboard walkthrough\n#Learn how to manage 1099 tax forms for connected accounts that use the Express Dashboard.\nThe images in this section describe an example of the product flow that connected accounts can encounter when using the Express Dashboard. We provide these images to help give you and your support teams an idea of the overall user experience. If you have any questions, contact Stripe Support.\n#The Stripe Express Dashboard\nFor your connected accounts not using Connect embedded components, enabling e-delivery for tax year 2024 gives them access to the Stripe Express Tax Forms page. That page is a prebuilt web and mobile dashboard for managing their tax information and receiving their 1099s electronically.\nAs you configure your tax form settings, you can also choose to have Stripe send pre-filing confirmation emails to collect tax information and paperless delivery consent directly from your connected accounts. We’ll email your eligible connected accounts starting the week of November 4.\nThe Stripe Express Dashboard where payees can grant e-delivery consent, download their 1099 tax forms, and update their tax information.\nConnected accounts can also use the Express Dashboard to view their available balance, see upcoming payouts, and track their earnings in real time.\n#Note\nTo prevent accounts that don’t normally access the Express Dashboard from using it, or if you don’t want Stripe to email your connected accounts, select postal delivery and disable electronic delivery in your tax form settings.\n#Your connected account receives an email from Stripe\nYour connected account receives an email from Stripe asking them to confirm their tax information and update their delivery preferences. The subject line reads ‘Get your [PlatformName] 2024 tax forms faster by enabling e-delivery.’ The following image displays the content of the email.\nPre-filing confirmation email from Stripe\n#Connected Accounts are prompted to claim their account on Stripe Express\nFor connected accounts without existing access to the Express Dashboard, clicking the Get Started button in Stripe’s email takes them to this screen.\nFor connected accounts that can access the Express Dashboard but aren’t logged in, the button opens a login screen. Authenticated accounts with Express Dashboard access proceed directly to the next step.\nThe Stripe Express page to create an account\n#Connected account owners with existing accounts are presented with phone number verification\nThis screen requests a code sent to the phone number associated with the connected account.\nThe Stripe Express account phone number verification dialog.\n#After passing phone number verification, accounts new to Express are asked to verify their identity\nThis step applies only to connected accounts that claimed Express Dashboard access in the earlier step and haven’t onboarded to Stripe Express. Other accounts proceed to the next step.\nStripe provides the connected account with prompts to verify their identity by providing details matching their account information. If, after a few attempts, they’re unable to enter matching details, we prompt them to confirm their details with you, the platform. The error message reads “One of the fields didn’t match the information we received from [PlatformName]. You can try again, or check that your information with [PlatformName] is up to date.”\nThe Stripe Express account Verify your identity dialog.\n#After verifying their identity, connected accounts are taken to the Tax forms page of Stripe Express\nAfter the connected account’s details are verified, they’re taken to the Tax forms page in Stripe Express where they can confirm their tax information they have on file for their account and agree to paperless delivery of their 1099 tax form.\nThe Tax forms page of the Express Dashboard.\nThey’re prompted to confirm tax information but can choose to skip temporarily if they want to leave their information as is. Your accounts could get blocked if you’ve applied 1099 capabilities and the connected account updates their value to a name and TIN combination that doesn’t match against IRS records. If the connected account is verified and then changes their name or TIN, they’re asked to re-sign a new Stripe Terms Of Service Agreement. Similarly, if Stripe is unable to complete KYC requirements on them based on the information they provided, their account payouts are blocked until they log back in to Stripe Express and correct their information.\nThe dialog displayed to users to confirm their information.\n#Connected account owners agree to paperless delivery\nAfter the tax information is confirmed, Stripe prompts the connected account to agree to paperless delivery.\nThe dialog to consent to paperless delivery of tax forms.\nIf you’ve enabled optional postal delivery, after agreeing to paperless delivery consent, your connected accounts can choose to request a paper copy in addition to the e-delivery of the tax form.\n#Your connected account receives an email from Stripe\nAfter filing 1099 tax forms in your Stripe dashboard, your connected account receives an email from Stripe to view their tax form electronically. The subject line reads ‘Your [PlatformName] 1099 tax form is ready.’ The following image displays the content of the email.\n#Connected account owners can download their tax forms\nAfter a connected account agrees to the e-delivery terms, they can download their form when your platform makes it available.\nThe dashboard where payees can download their 1099 tax forms.\nMost connected account owners are prompted to enter the last four digits of the TIN on their 1099 tax form before being able to download a copy of the form. Downloads aren’t available for 24 hours after an update has been made to any personal identity information including name, address, business type, or TIN.\n#Caution\nConnected accounts that do not agree to paperless delivery are unable to download their 1099 tax forms and resolve the call to action in their dashboard. Turn on paper delivery in your Stripe Tax form settings to make sure that recipients who don’t consent to e-delivery still receive paper forms."}, {"path": "connect\\platform-express-dashboard-taxes.md", "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes", "content": "#1099 tax support and communication guide | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-express-dashboard-taxes\n\n#1099 tax support and communication guide\n#Learn how to use an interface built by Stripe to manage 1099 Tax forms for connected accounts.\n#How to use this guide\nAs tax season approaches, Stripe created this guide to help you understand how you can work with your connected accounts to collect verified tax information for the upcoming tax season using an interface built by Stripe: the Stripe Express Dashboard or Connect embedded components. The guide answers many commonly asked questions, and includes example communications and FAQs that you can customize for your platform. We designed our communication proposals and FAQs as recommendations, and we encourage you to adjust for the needs of your platform. This guide covers the following topics:\n# Implementation and timeline - provides general implementation guidelines and expectations for using Stripe Express tax forms.\n# Product walkthrough - highlights key aspects of the product so that you and your support team have a better understanding of the user experience.Express product walkthroughEmbedded product walkthrough\n# Communications recommendations - provides general templates that you can use to help prepare your connected accounts for communications from Stripe during tax season.\n# Support resources - includes a detailed guide on how to resolve the top questions from connected accounts during 1099 tax season and example FAQs to use for your own support resources.\nImplementation and timeline - provides general implementation guidelines and expectations for using Stripe Express tax forms.\nProduct walkthrough - highlights key aspects of the product so that you and your support team have a better understanding of the user experience.\n• Express product walkthrough\n• Embedded product walkthrough\nCommunications recommendations - provides general templates that you can use to help prepare your connected accounts for communications from Stripe during tax season.\nSupport resources - includes a detailed guide on how to resolve the top questions from connected accounts during 1099 tax season and example FAQs to use for your own support resources."}, {"path": "connect\\platform-pricing-tools.md", "url": "https://docs.stripe.com/connect/platform-pricing-tools", "content": "#Platform pricing tools | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-pricing-tools\n\n#Platform pricing tools\n#Use your Dashboard editor to manage your application fee pricing logic.\nIf your platform is responsible for paying Stripe fees, platform pricing tools allow you to define how you recoup your payment processing costs from your connected accounts through application fees.\n• Create pricing schemes that apply different application fees based on the properties of a transaction.\n• Define pricing groups to use different pricing schemes for different connected accounts.\n#Eligibility for payments\nThe values available for defining your pricing scheme depend on which Stripe products you use and how you’ve integrated them. The following sections describe the which platform configurations can use and access the platform pricing tools.\n#Requirements\nStripe applies pricing schemes to a payment when the payment meets all of the following requirements:\n• The pricing scheme is enabled.\n• Stripe charges fees on the payment to your platform rather than the connected account.\n• Your platform is permitted to charge app fees in the connected account’s country.\n• The payment doesn’t explicitly apply applicationfee or transferdata[amount] parameters that override  managed application fees.\n• The payment doesn’t use multi-capture.\n`applicationfee or transferdata[amount]`In addition to the requirements, pricing schemes observe the following limitations:\n• If you use Standard Connect with destination charges, you can’t override pricing or implement different pricing schemes for individual connected accounts.\n• If a payment’s captured amount is less than the charge, the calculated fee is against the captured amount of the payment. For example, if only 5 USD is captured on a 10 USD charge, the fee is based on 5 USD.\n#Fee payer reference\nSupport for platform pricing tools also depends on your funds flow configuration for your connected accounts.\n• Controller property configuration:You can use platform pricing tools to calculate application fees for all charges where the controller.fees.payer on the account is the Connect platform (application).If a connected account uses destination charges, the platform is the fee payer even if you set controller.fees.payer=account.\n• Standard, Custom, or Express type configuration:Configured pricing applies to destination charges.Configured pricing doesn’t apply to direct charges unless the platform is on IC+ pricing.\n• You can use platform pricing tools to calculate application fees for all charges where the controller.fees.payer on the account is the Connect platform (application).\n• If a connected account uses destination charges, the platform is the fee payer even if you set controller.fees.payer=account.\n`controller.fees.payer``application``controller.fees.payer=account`- Configured pricing applies to destination charges.\n• Configured pricing doesn’t apply to direct charges unless the platform is on IC+ pricing.\n#Eligibility for Instant Payouts\nStripe applies pricing schemes to an Instant Payout when:\n• Your platform controls pricing.\n• Your pricing scheme is enabled.\n• Your connected accounts are eligible for Instant Payouts.When Stripe is liable for connected account losses, Stripe determines connected account eligibility and volume limits. You must set up separate pricing rules for each Instant Payout currency for these connected accounts.When your platform is liable for connected account losses, your platform manages eligibility for connected accounts. These connected accounts must be in the same country as the platform, so different currencies don’t apply.A connected account must have an external account that supports Instant Payouts.\n• When Stripe is liable for connected account losses, Stripe determines connected account eligibility and volume limits. You must set up separate pricing rules for each Instant Payout currency for these connected accounts.\n• When your platform is liable for connected account losses, your platform manages eligibility for connected accounts. These connected accounts must be in the same country as the platform, so different currencies don’t apply.\n• A connected account must have an external account that supports Instant Payouts.\nConnected accounts can’t pay out more than their available balance. Instant Payout fees reflect in the Payout object to help with reporting and reconciliation. See Transactions in the Dashboard to view your collected fees. If an Instant Payout fails, we automatically refund the application fee.\n#Instant payout application fees API integration impact\nEnabling pricing tools for Instant Payouts without using the Balance API net-of-fees attribute can break your API integration.\n#Subscriptions and invoices\nStripe also applies your pricing scheme-defined application fees to invoice and subscription payments. As with standard purchase payments, when you apply an explicit application fee to an invoice or subscription, that fee overrides any matching scheme-defined fee.\n#Access platform pricing tools\nDifferent roles have different levels of access to pricing schemes.\nRoles that don’t have access to the platform’s default pricing can review the version copied to the connected accounts. Connected accounts can’t view or edit any pricing schemes.\nThe following roles can access pricing schemes that apply to all connected accounts.\n Role | Permissions \n --- | --- \n Administrator | Read and write \n Developer | None \n IAM Admin | None \n Connect Onboarding Analyst | None \n Transfer Analyst | None \n Analyst | None \n Dispute Analyst | None \n Refund Analyst | None \n Support Specialist | None \n Support Communications | None \n Tax Analyst | None \n View Only | None \n Top-ups Specialist | None"}, {"path": "connect\\platform-tax-reporting.md", "url": "https://docs.stripe.com/connect/platform-tax-reporting", "content": "#Platform tax reporting for Connect platforms | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-tax-reporting\n\n#Platform tax reporting for Connect platformsPrivate preview\n#Prepare reports for DAC7 and other OECD regulations for sellers in the EU, Canada, United Kingdom, Australia, and New Zealand.\nUnder the MRDP, certain Connect platforms are required to report income information regarding their connected accounts to tax authorities. These requirements are for economic activities facilitated by digital platforms. Several countries have now rolled out binding regulations based on MRDP–including DAC-7, SERR, ITA Part XX.\nBroadly, these regulations require that platforms collect and submit information to both regulators and each of their users (except in Australia, where end users don’t need to receive a copy). Stripe offers tools to help platforms through this process.\nPlatform tax reporting provides the following:\n• A way to collect verified tax information from Connected Accounts. Your connected accounts can submit their tax information on the same interface that they onboard to Stripe with. They won’t be asked to provide any information they’ve already provided, but they can make necessary updates.\n• A dashboard to import and edit information and generate reports for the appropriate authorities and generate seller statements for your users.\n#Limitation of liability\nPlatform tax reporting services isn’t a comprehensive tax solution or tax advising service. Stripe accepts no liability for the use of information collected or reports generated and strongly recommends consulting with a professional tax advisor for any tax-related concerns. Users remain fully responsible for the accuracy of the information and obligation to pay any fine, penalty, or other sanction imposed by a governmental authority.\n#Product features\n• Support for CA, UK, certain EU countries (FR, DE, IT, SE, ES, NL), NZ, and AU\n• Collect, validate, and verify (where applicable) information from sellers through Connect interfacesConnect interfaces include the Stripe Dashboard, Express Dashboard, and hosted onboarding\n• A Dashboard to view and manage tax information\n• Form editing with CSVs\n• Report generation to AU, CA, NL (for EU), and UK XML schemas\n• Role-based access control and two-step authentication (2FA)\n• E-delivery of tax information statements using the API\n• Connect interfaces include the Stripe Dashboard, Express Dashboard, and hosted onboarding\n#Collect identity information\nApply the taxreporting additional verification to your connected accounts to collect, validate, and verify the necessary information from your sellers. You can use the same integration type for every region where your platform has tax reporting obligations (outside of the US), and your platform doesn’t need to change their existing Connect integration.\n`taxreporting`- Platforms can enable or disable for whatever subset of connected accounts they choose.\n• Stripe handles the tax information collection, which varies by country. Stripe automatically determines which requirements to apply based on the account’s country and business type.\n• Any added countries follow the same integration type.\nAs with other requirements, those added by the taxreporting additional verification are presented to connected accounts in any Connect onboarding interface. The verification requirements disable an account’s capabilities if not completed before reaching the threshold you set. You can set the following enforcement limits to impose the disabling of payouts or payments:\n`taxreporting`- Up front: Block payouts or payments if a verified TIN isn’t on file immediately.\n• Volume: Block payouts or payments if a verified TIN isn’t on file after processing x USD.\n• Time: Block payouts or payments if a verified TIN isn’t on file after x days.\n• Combination: Block payouts or payments if a verified TIN isn’t on file after x days or after processing x USD.\nYou can also disable these additional requirements at your own discretion.\n#Preparing and generating your reports\nStripe auto-populates the Dashboard view and CSVs with identity data that’s already been collected from connected accounts.\nReview your connected accounts’ information in the Dashboard. Import transaction totals, identity overrides, and standalone sellers (sellers not attached to a Connected Account) by uploading CSV files.\nSeller list view in the Dashboard\nSeller information details\nWhen you’re ready, generate XML reports for your sellers.\n#Deliver tax statements to your users\nYou might be required to provide a copy of the information submitted to tax authorities to your sellers. Stripe generates a PDF translated into the user’s preferred language to display this information. You can download it separately for each individual seller in the Dashboard, or you can access it with the API. We support this for sellers, regardless of whether they have a connected account.\n#Request early access"}, {"path": "connect\\radar.md", "url": "https://docs.stripe.com/connect/radar", "content": "#Use Radar with Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/radar\n\n#Use Radar with Connect\n#Learn how to use Stripe Radar to identify fraud in Connect account charges.\nStripe Radar uses machine learning to identify fraudulent payments in real time. When you use Radar with connected accounts, it checks only external charges. It doesn’t check fund transfers between Stripe accounts.\nCharges in a Connect integration fall into two categories:\n• Direct charges: Paid directly to a connected account; Stripe applies only the collecting account’s Radar configuration and rules\n• Transferred charges (for example, destination charges or separate charges and transfers): Paid to the platform account and transferred to a connected account; Stripe applies only the platform account’s Radar configuration and rules\n#Radar fees\nStripe charges Radar fees based on the rate for the account that collected the payment. For payments collected by the platform account and transferred to a connected account, you can pass Radar fees to the connected account by reducing the transferred amount.\n#Radar configuration for a connected account\nThe Dashboard you use to configure Radar for a connected account depends on the connected account type. The following table shows which Dashboard to use for each account type.\n Dashboard access of the connected account | Connected account Dashboard | Platform account Dashboard Connect page \n --- | --- | --- \n Connected accounts with access to the Stripe Dashboard |  |  \n Connected accounts with access to the Express Dashboard |  |  \n Connected accounts with no dashboard access |  |  \n#Radar behavior\nRadar behavior for connected account payments depends on the charge category and connected account type. The following table describes each scenario.\n Charge type | Radar config rules used | Charges visible in connected account Dashboard | Charges visible in platform account Dashboard Connect page \n --- | --- | --- | --- \n Direct for connected accounts with access to the Stripe Dashboard | Connected account |  |  \n Direct for connected accounts with access to the Express Dashboard | Connected account |  |  \n Direct for connected accounts with no dashboard access | Connected account |  |  \n Transferred from platform account | Platform account |  |  \n#Radar for Fraud Teams\nIf you have Radar for Fraud Teams, you can customize your rules to include destination charge attributes. You can either use the destination attribute in the supported rule attributes, or use custom metadata on the destination account.\n`destination`## See also\n• Choose your connected account type\n• Radar documentation"}, {"path": "connect\\required-verification-information-taxes.md", "url": "https://docs.stripe.com/connect/required-verification-information-taxes", "content": "#Required Verification Information for Taxes | Stripe Documentation\nURL: https://docs.stripe.com/connect/required-verification-information-taxes\n\n#Required Verification Information for Taxes\n#Learn what account information you need to provide for your Connect accounts if you want Stripe to help you with US federal 1099 tax reporting.\n#Note\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n#Required information (1099-K, 1099-MISC, 1099-NEC)\nThe following table lists the requirements for connected accounts with any of the 1099 capabilities. Stripe requires the business tax details except when the account is set up as a Single Person Entity (SPE) with a US-based representative, in which case we’ll use the representative’s personal tax details.\nStripe defines a Single Person Entity as follows:\n• Individual: business type is individual\n• Sole Proprietorship: business type is company and business structure is soleproprietorship\n• Single Member LLC: business type is company and business structure is singlememberllc\n`individual``company``soleproprietorship``company``singlememberllc`Even if you don’t add the 1099 capabilities and want to update the information directly in Stripe to file your 1099 forms, these are the fields to populate.\n Type | SPE with US-based representative | SPE with non-US-based representative | Company \n --- | --- | --- | --- \n Name | individual.firstnameindividual.lastname | company.name | company.name \n TIN | individual.idnumber | company.taxid | company.taxid \n Address | individual.addressRequired address fields are:individual.address.line1individual.address.postalcodeindividual.address.cityindividual.address.state | company.addressRequired address fields are:company.address.line1company.address.postalcodecompany.address.citycompany.address.state | company.addressRequired address fields are:company.address.line1company.address.postalcodecompany.address.citycompany.address.state \n• individual.firstname\n• individual.lastname\n`individual.firstname``individual.lastname``company.name``company.name``individual.idnumber``company.taxid``company.taxid`Address\nindividual.address\n`individual.address`Required address fields are:\n• individual.address.line1\n• individual.address.postalcode\n• individual.address.city\n• individual.address.state\ncompany.address\n`company.address`Required address fields are:\n• company.address.line1\n• company.address.postalcode\n• company.address.city\n• company.address.state\ncompany.address\n`company.address`Required address fields are:\n• company.address.line1\n• company.address.postalcode\n• company.address.city\n• company.address.state\nIf you have any of the 1099 capabilities turned on, Payouts become disabled if the required information isn’t collected and verified by 600 USD in charges."}, {"path": "connect\\required-verification-information.md", "url": "https://docs.stripe.com/connect/required-verification-information", "content": "#Required verification information | Stripe Documentation\nURL: https://docs.stripe.com/connect/required-verification-information\n\n#Required verification information\n#Learn what required verification information you need to collect for each country when using Connect.\nOnboarding connected accounts to a Connect platform requires collecting certain information for each account (which Stripe verifies). For Custom accounts, you can build an onboarding UI yourself using our API. Embedded onboarding and Stripe hosted onboarding are prebuilt UIs that you use to collect the required information from connected accounts.\n#Note\nIf you’re onboarding Express or Standard accounts, you don’t need to collect information because Stripe does it for you through the Stripe-provided UIs. However, you can review the type of information that’s collected from your users on this page.\nVerification requirements differ based on:\n• The origin country of the connected accounts\n• The service agreement type applicable to the connected accounts\n• The capabilities requested for the connected accounts\n• The business type (for example, individual or company) and company.structure (for example, public corporation or private partnership)\nAs an added convenience, most arguments in the tables below are followed by a localized version, suitable as a label in your user interface.\n#Processing live charges and receiving payouts\nIn the UAE, company documents such as the Trade License and Proof of Bank Account as well as relevant identity documents must be verified before a connected account can start processing live charges and receiving payouts. For all businesses except sole establishments and free zone establishments, the Memorandum of Association must be verified as well.\n#Uploading identity documents\nFor the company representative, beneficial owners and executives, we require the following identity documents for verification:\n• Passport: all individuals\n• Emirates ID: UAE nationals & UAE residents\n• Residence visa: foreign nationals who are resident in the UAE\nThe Emirates ID can be provided in the parameter called verification.document. Passports and residence visas should be provided under a separate parameter called documents.\n#Keeping up to date with expired verification documents\nIn the UAE, Stripe is required to keep up to date with a company’s Trade License in addition to the primary identity document of the company’s representative, beneficial owners and executives. The primary identity document is either the Emirates ID for UAE nationals and residents, otherwise it is an individual’s Passport. Companies will have up to 28 days after the expiry date of these documents to provide an updated version. Expired documents will appear under company requirements or individual requirements and marked as currently due for two weeks before capabilities become disabled.\n#Ultimate Beneficial Owners\nStripe is required to verify all the beneficial owners of a business. These are the individuals who own 25% or more of the primary business. If a holding company has 25% or more ownership of the business, then the Memorandum of Association of this holding company as well that of the primary business must be uploaded. These documents must show the persons where relationship.owner is set to true.\n#Additional information on the company representative\nThis connected account needs to be activated by a person, known as the company representative, with significant responsibility to control, manage, or direct the organization and is authorized by the organization to agree to Stripe’s terms. The representative must either be an owner or an executive, which you specify by setting relationship.owner to true or relationship.executive to true. For a sole establishment or free zone establishment, the account must be activated by the owner of the business.\n`true``true`#### VAT Information\nStripe does not charge UAE VAT on Stripe fees to customers located in the UAE, where a valid UAE VAT ID has been provided. Local UAE VAT self-assessment obligations may be triggered upon receipt of a monthly invoice from Stripe. Stripe does charge UAE VAT at 5% on Stripe fees to customers located in the UAE, where a valid UAE VAT ID hasn’t been provided.\n#Power of Attorney\nIf the company representative does not appear on the company’s Trade License or the Memorandum of Association, then you must upload a Power of Attorney that shows that the company representative has the authority to act on behalf of the company or a notarized letter of authorization.\n#Supported business structures\nIn the UAE, the only possible business type is company and the following business structures are accepted:\n`company`- soleestablishment\n• freezoneestablishment\n• llc\n• freezonellc\n`soleestablishment``freezoneestablishment``llc``freezonellc`#### Additional information on the account\nIf Stripe is unable to verify the company, or if there are possible concerns about sanctions, you must collect a proof-of-entity document to enable payouts. Collect it using the company.verification.document.front and company.verification.document.back arguments.\n#Additional information on the individual\nDepending on the situation, you might need to collect a scan of an ID document to enable payouts. That can happen if Stripe is unable to verify the individual or if there are possible concerns about sanctions.\nCollect ID information using the individual.verification.document.front and individual.verification.document.back arguments.\n#Additional information on the representative\nA person known as a representative must activate this connected account. This person must be a beneficial owner who is authorized to sign for the company. Indicate this relationship to Stripe by setting relationship.executive to true, or, if the representative owns 25% or more of the company, by setting relationship.owner to true.\n`true``true`Depending on the situation, you might need to collect a scan of an ID document to enable payouts. That can happen if Stripe is unable to verify the representative or if there are possible concerns about sanctions. Collect ID information using the verification.document.front and verification.document.back arguments.\nOptionally, you can collect the representative’s ownership information using relationship.representative and relationship.percentownership.\n#Additional information on directors\nFor companies (excluding partnerships), you must collect information on all directors. Directors are members of the governing board of the company. When you have finished collecting the required information from all directors, or if your company does not have any directors, you must inform Stripe by setting company.directorsprovided to true.\n`true`If there are possible concerns about sanctions, you must collect a scan of an ID document to enable payouts. Collect ID information using the verification.document.front and verification.document.back arguments.\n#Additional information on beneficial owners (for both executives and owners)\nYou must collect information on all beneficial owners. Beneficial owners are persons who exercise significant management control over the company (executives) or who own 25% or more of the company (owners). When you have finished collecting the required information from all beneficial owners, you must inform Stripe by setting both company.ownersprovided and company.executivesprovided to true.\n`true`Depending on the situation, you might need to collect a scan of an ID document to enable payouts. That can happen if Stripe is unable to verify a beneficial owner or if there are possible concerns about sanctions. Collect ID information using the verification.document.front and verification.document.back arguments.\nOptionally, you can collect ownership information on each person who owns 25% or more of the company using relationship.owner and relationship.percentownership.\n#Additional information on the account\nIf Stripe can’t verify the company, or if there are possible concerns about sanctions, you must collect a proof-of-entity document to enable payouts. Collect it using the company.verification.document.front and company.verification.document.back arguments.\n#Additional information on the representative\nIf Stripe can’t verify the representative, they need to provide proof of liveness, which entails taking a selfie and uploading an ID document using Stripe Identity. Your platform needs to integrate with Connect Onboarding to satisfy this requirement.\nAlternatively, you can provide a scan of an ID document and a scan of an address document. To collect an ID document, use the verification.document.front and verification.document.back fields. To collect an address document, use the verification.additionaldocument.front and verification.additionaldocument.back fields. You can’t provide the same document for both identity and address verification.\n#Additional information on the individual\nIndividuals that Stripe can’t verify must provide proof of liveness, which entails taking a selfie and uploading an ID document using Stripe Identity. Your platform needs to integrate with Connect Onboarding to allow such individuals to complete this requirement.\nAlternatively, your platform can collect scans of an individual’s ID and address documents and upload them to Stripe. After uploading, submit the individual’s ID document with the individual.verification.document.front and individual.verification.document.back fields and the address document with the individual.verification.additionaldocument.front and individual.verification.additionaldocument.back fields. You can’t provide the same document for both identity and address verification.\n#Additional information on owners\nYou must collect information on all owners. Owners are any individual who owns 25% or more of the company (owners). When you finish collecting the required information from all owners, set company.ownersprovided to true. This lets Stripe know that you have completed this requirement.\n`true`Optionally, you can collect ownership information on each person who owns 25% or more of the company with relationship.owner and relationship.percentownership.\n#Additional information on directors\nYou must collect information on all directors. We check the director information you supply against the registry and results in one of these outcomes:\n• The business is found in the registry, and the information matches. The account fully onboards, and requires no additional action.\n• The business is found in the registry, but the director information doesn’t match. You must upload a proof of registration document using the documents.proofofregistration.files field. Pass the file in the file parameter and set the purpose parameter to accountrequirement.\n`file``purpose``accountrequirement`curl https://files.stripe.com/v1/files \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -F \"purpose\"=\"accountrequirement\" \\\n  -F \"file\"=\"@/path/to/a/file\"\n`curl https://files.stripe.com/v1/files \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -F \"purpose\"=\"accountrequirement\" \\\n  -F \"file\"=\"@/path/to/a/file\"`This request uploads the file and returns a token:\n{\n  \"id\": \"file5dtoJkOhAxrMWb\",\n  \"created\": 1403047735,\n  \"size\": 4908\n}\n`{\n  \"id\": \"file5dtoJkOhAxrMWb\",\n  \"created\": 1403047735,\n  \"size\": 4908\n}`You can then use the token’s id value to attach the file to a connected account for identity verification.\n`id`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"documents[proofofregistration][files][]\"=file5dtoJkOhAxrMWb\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"documents[proofofregistration][files][]\"=file5dtoJkOhAxrMWb`#### Additional information on registration statuses\nIf Stripe can’t verify the registration status of the charity, you need to collect a proof-of-entity document to enable payouts. Collect this with the documents.companyregistrationverification.files field.\n#Universal Beneficial Ownership Verification\nAfter supplying the beneficial owner information, it is checked against the National Registry of Businesses (NRB). Depending on the results of this check, there are three outcomes:\n• The business is found in the NRB, and the information matches. The account is fully onboarded, and no additional action is required.\n• The business is found in the NRB, but the information doesn’t match. The account is fully onboarded, and no additional action is required. A discrepancy report is sent to the NRB.\n• The business isn’t found in the NRB. An attestation consisting of an IP address, date, and user agent of the person submitting the information must be provided. The person is attesting that the business is registered with the NRB, and the information given to Stripe matches.\nIn the case where the business isn’t found in the NRB, attesting that the beneficial ownership information is complete and correct is accomplished by providing the company.ownershipdeclaration.date and company.ownershipdeclaration.ip arguments.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"`### Universal Beneficial Ownership Verification\nAfter supplying the beneficial owner information, it is checked against the National Registry of Businesses (NRB). Depending on the results of this check, there are three outcomes:\n• The business is found in the NRB, and the information matches. The account is fully onboarded, and no additional action is required.\n• The business is found in the NRB, but the information doesn’t match. The account is fully onboarded, and no additional action is required. A discrepancy report is sent to the NRB.\n• The business isn’t found in the NRB. An attestation consisting of an IP address, date, and user agent of the person submitting the information must be provided. The person is attesting that the business is registered with the NRB, and the information given to Stripe matches.\nIn the case where the business isn’t found in the NRB, attesting that the beneficial ownership information is complete and correct is accomplished by providing the company.ownershipdeclaration.date and company.ownershipdeclaration.ip arguments.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"`#### Additional information on the account\nIf Stripe is unable to verify the company, or if there are possible concerns about sanctions, you must collect a proof-of-entity document to enable payouts. Collect it using the company.verification.document.front and company.verification.document.back arguments.\n#Additional information on the individual\nDepending on the situation, you might need to collect a scan of an ID document, an address document, or both to enable payouts. That can happen if Stripe can’t verify the individual or if there are possible concerns about sanctions. In some cases, depending on various calculated risk factors, Stripe can use Simplified Due Diligence and request only one document for verification at a later time.\nCollect ID information using the individual.verification.document.front and individual.verification.document.back arguments, and address information using the verification.additionaldocument.front and verification.additionaldocument.back arguments.\n#Additional information on the representative\nA person known as a representative must activate this connected account. The representative must be a beneficial owner who is authorized to sign for the company. Indicate this relationship to Stripe by setting relationship.executive to true, or, if the representative owns 25% or more of the company, by setting relationship.owner to true.\n`true``true`You might need to collect a scan of an ID document and an address document to enable payouts. That can happen if Stripe can’t verify the representative’s provided information or if there are possible concerns about sanctions. In some cases, depending on various calculated risk factors, Stripe can use Simplified Due Diligence and request only one document for verification at a later time.\nAdditionally, for partnerships you must provide a relationship.percentownership value.\nYou can collect ID information with the verification.document.front and verification.document.back arguments.\n#Additional information on directors\nFor companies, excluding partnerships, you must collect information on all directors. Directors are members of the governing board of the company. When you have finished collecting the required information from all directors, or if your company does not have any directors, you must inform Stripe by setting company.directorsprovided to true.\n`true`You might need to collect a scan of an ID document and an address document to enable payouts. That can happen if Stripe can’t verify the director’s provided information or if there are possible concerns about sanctions. In some cases, depending on various calculated risk factors, Stripe can use Simplified Due Diligence and request only one document for verification at a later time.\nYou can collect ID information using the verification.document.front and verification.document.back arguments, and address information using the verification.additionaldocument.front and verification.additionaldocument.back arguments.\n#Additional information on beneficial owners (for both executives and owners)\nYou must collect information on all beneficial owners. Beneficial owners are persons who exercise significant management control over the company (executives) or who own 25% or more of the company (owners). When you have finished collecting the required information from all beneficial owners, you must inform Stripe by setting both company.ownersprovided and company.executivesprovided to true.\n`true`You might need to collect a scan of an ID document and an address document to enable payouts. That can happen if Stripe can’t verify the beneficial owner’s provided information or if there are possible concerns about sanctions. In some cases, depending on various calculated risk factors, Stripe can use Simplified Due Diligence and request only one document for verification at a later time.\nYou can collect ID information using the verification.document.front and verification.document.back arguments, and address information using the verification.additionaldocument.front and verification.additionaldocument.back arguments.\nOptionally, you can collect ownership information on each person who owns 25% or more of the company with relationship.owner and relationship.percentownership.\nAdditionally, for partnerships you need to provide a relationship.percentownership value for any owners added to the account.\n#Universal Beneficial Ownership Verification\nAfter supplying the beneficial owner information, it is checked against the National Registry of Businesses (NRB). Depending on the results of this check, there are three outcomes:\n• The business is found in the NRB, and the information matches. The account is fully onboarded, and no additional action is required.\n• The business is found in the NRB, but the information doesn’t match. The account is fully onboarded, and no additional action is required. A discrepancy report is sent to the NRB.\n• The business isn’t found in the NRB. An attestation consisting of an IP address, date, and user agent of the person submitting the information must be provided. The person is attesting that the business is registered with the NRB, and the information given to Stripe matches.\nIn the case where the business isn’t found in the NRB, attesting that the beneficial ownership information is complete and correct is accomplished by providing the company.ownershipdeclaration.date and company.ownershipdeclaration.ip arguments.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"`#### Additional information on the representative\nIf Stripe is unable to verify the representative, you need to provide a scan of an ID document. This can be collected with the verification.document.front and verification.document.back arguments.\n#Additional information on the owner\nIf Stripe is unable to verify the owner, you need to provide a scan of an ID document. This can be collected with the verification.document.front and verification.document.back arguments.\n#Additional information on the individual\nIf Stripe is unable to verify the individual, you need to provide a scan of an ID document. This can be collected with the individual.verification.document.front and individual.verification.document.back arguments.\n#Universal Beneficial Ownership Verification\nAfter supplying the beneficial owner information, it is checked against the National Registry of Businesses (NRB). Depending on the results of this check, there are three outcomes:\n• The business is found in the NRB, and the information matches. The account is fully onboarded, and no additional action is required.\n• The business is found in the NRB, but the information doesn’t match. The account is fully onboarded, no additional action is required. A discrepancy report is sent to the NRB.\n• The business is not found in the NRB. A proof of registration document (screenshot of the registration or copy of the confirmation email) is required to be uploaded.\n#Uploading proof of registration Custom accounts\nIn the case the business is not found in the NRB, a screenshot of the beneficial owner information from the NRB must be uploaded using the documents.proofofregistration.files argument.\nPass the file in the file parameter and set the purpose parameter to accountrequirement:\n`file``purpose``accountrequirement`curl https://files.stripe.com/v1/files \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -F \"purpose\"=\"accountrequirement\" \\\n  -F \"file\"=\"@/path/to/a/file\"\n`curl https://files.stripe.com/v1/files \\\n  -u sktestY17KokhC3SRYCQTLYiU5ZCD2: \\\n  -H \"Stripe-Account: {{CONNECTEDSTRIPEACCOUNTID}}\" \\\n  -F \"purpose\"=\"accountrequirement\" \\\n  -F \"file\"=\"@/path/to/a/file\"`This request uploads the file and returns a token:\n{\n  \"id\": \"file5dtoJkOhAxrMWb\",\n  \"created\": 1403047735,\n  \"size\": 4908\n}\n`{\n  \"id\": \"file5dtoJkOhAxrMWb\",\n  \"created\": 1403047735,\n  \"size\": 4908\n}`You may then use the token’s id value to attach the file to a connected account for identity verification.\n`id`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"documents[proofofregistration][files][]\"=file5dtoJkOhAxrMWb\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"documents[proofofregistration][files][]\"=file5dtoJkOhAxrMWb`#### Additional information on bank accounts\nWe’ll verify that the legal owner of each payout bank account matches that of the Stripe account.\nIf Stripe can’t verify the owner of the bank account, we’ll transition the status of the ExternalAccount to verificationfailed. You’ll need to collect a scan of a cancelled check or bank statement to prove the legal owner of the bank account. Collect this information with the documents.bankaccountownershipverification.files argument.\n`verificationfailed`#### Provide ID document for the representative\nYou must provide a scan of an ID document for the representative. To collect this scan, use the verification.document.front and verification.document.back arguments.\nIdentity verification documents must be issued in Japan and show the representative’s residency status.\n#Provide ID document for the individual\nYou must collect a scan of an ID document for an individual. To collect this scan, use the individual.verification.document.front and individual.verification.document.back arguments.\nIdentity verification documents must be issued in Japan and show the individual’s residency status.\n#Special considerations\nCollecting information for Japanese accounts is unique in that both kana and kanji language variations are required for a number of parameters:\n• firstnamekana\n• firstnamekanji\n• lastnamekana\n• lastnamekanji\n• namekana\n• namekanji\n• addresskana\n• addresskanji\n`firstnamekana``firstnamekanji``lastnamekana``lastnamekanji``namekana``namekanji``addresskana``addresskanji`You need to submit information for these parameters instead of their counterparts (that is, instead of firstname, lastname, and so forth). It might seem counterintuitive to provide two arguments that represent the same onboarding requirement, but Stripe can’t verify a Japanese account until we’ve received information for both language variations. These variations may be composed of full- or half-width hiragana, katakana, or Latin characters, with kanji-specific API parameters also allowing for kanji characters.\n`firstname``lastname`#### Japanese addresses\nBoth kana and kanji language variations apply to Japanese address requirements as well.\npostalcode is always required when providing a Japanese address of either language variation. Stripe validates submitted addresses, and for a valid postalcode, we attempt to automatically fill attributes for matching state, city, and town for bothj addresskana and addresskanji.\n`postalcode``postalcode``state``city``town``addresskana``addresskanji`Requests with address details that are incompatible with the provided postalcode fail.\n`postalcode`line2 should contain the building name in addition to the room number if applicable. This attribute can be omitted when the address does not contain building details.\n`line2`Here’s an example representation of a Japanese address, with explanations for how each part maps to its corresponding Stripe API attribute:\n// 〒150-0001 東京都渋谷区神宮前1-5-8 神宮前タワービルディング22F\n{\n  \"country\": \"JP\",\n  \"legalentity\": {\n    \"addresskana\": {\n      \"country\": \"JP\", // 2-letter country code\n      \"postalcode\": \"1500001\", // Zip/Postal Code\n      \"state\": \"ﾄｳｷﾖｳﾄ\", // Prefecture\n      \"city\": \"ｼﾌﾞﾔ\", // City/Ward\n      \"town\": \"ｼﾞﾝｸﾞｳﾏｴ 1-\", // Town/cho-me\n      \"line1\": \"5-8\", // Block/Building number\n      \"line2\": \"ｼﾞﾝｸﾞｳﾏｴﾀﾜｰﾋﾞﾙﾃﾞｨﾝｸﾞ22F\", // Building details (optional)\n    },\n    \"addresskanji\": {\n      \"country\": \"JP\", // 2-letter country code\n      \"postalcode\": \"１５００００１\", // Zip/Postal Code\n      \"state\": \"東京都\", // Prefecture\n      \"city\": \"渋谷区\", // City/Ward\n      \"town\": \"神宮前　１丁目\", // Town/cho-me (no kanji numerals)\n      \"line1\": \"５－８\", // Block/Building number\n      \"line2\": \"神宮前タワービルディング22F\", // Building details (optional)\n    }\n  }\n}\n`// 〒150-0001 東京都渋谷区神宮前1-5-8 神宮前タワービルディング22F\n{\n  \"country\": \"JP\",\n  \"legalentity\": {\n    \"addresskana\": {\n      \"country\": \"JP\", // 2-letter country code\n      \"postalcode\": \"1500001\", // Zip/Postal Code\n      \"state\": \"ﾄｳｷﾖｳﾄ\", // Prefecture\n      \"city\": \"ｼﾌﾞﾔ\", // City/Ward\n      \"town\": \"ｼﾞﾝｸﾞｳﾏｴ 1-\", // Town/cho-me\n      \"line1\": \"5-8\", // Block/Building number\n      \"line2\": \"ｼﾞﾝｸﾞｳﾏｴﾀﾜｰﾋﾞﾙﾃﾞｨﾝｸﾞ22F\", // Building details (optional)\n    },\n    \"addresskanji\": {\n      \"country\": \"JP\", // 2-letter country code\n      \"postalcode\": \"１５００００１\", // Zip/Postal Code\n      \"state\": \"東京都\", // Prefecture\n      \"city\": \"渋谷区\", // City/Ward\n      \"town\": \"神宮前　１丁目\", // Town/cho-me (no kanji numerals)\n      \"line1\": \"５－８\", // Block/Building number\n      \"line2\": \"神宮前タワービルディング22F\", // Building details (optional)\n    }\n  }\n}`#### Statement descriptors\nStatement descriptors explain charges or payments and include information that banks and card networks require to help customers understand their statements.\nWe recommend setting the static components of statement descriptors in all three supported scripts (kanji, kana, and Latin characters) for Japanese connected accounts.\n  | PARAMETER \n --- | --- \n Statement descriptor | settings.payments.statementdescriptor \n Statement descriptor (kanji) | settings.payments.statementdescriptorkanji \n Statement descriptor (kana) | settings.payments.statementdescriptorkana \n Statement descriptor prefix | settings.cardpayments.statementdescriptorprefix \n Statement descriptor prefix (kanji) | settings.cardpayments.statementdescriptorprefixkanji \n Statement descriptor prefix (kana) | settings.cardpayments.statementdescriptorprefixkana \nYou can set these fields with API.\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=custom \\\n  -d country=JP \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[payments][statementdescriptor]\"=\"example descriptor\" \\\n  -d \"settings[payments][statementdescriptorkanji]\"=\"漢字明細\" \\\n  -d \"settings[payments][statementdescriptorkana]\"=\"カナメイサイ\"\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=custom \\\n  -d country=JP \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[payments][statementdescriptor]\"=\"example descriptor\" \\\n  -d \"settings[payments][statementdescriptorkanji]\"=\"漢字明細\" \\\n  -d \"settings[payments][statementdescriptorkana]\"=\"カナメイサイ\"`See Japanese statement descriptors for more details.\n#Universal Beneficial Ownership Verification\nAfter supplying the beneficial owner information, it is checked against the National Registry of Businesses (NRB). Depending on the results of this check, there are three outcomes:\n• The business is found in the NRB, and the information matches. The account is fully onboarded, and no additional action is required.\n• The business is found in the NRB, but the information doesn’t match. The account is fully onboarded, and no additional action is required. A discrepancy report is sent to the NRB.\n• The business isn’t found in the NRB. An attestation consisting of an IP address, date, and user agent of the person submitting the information must be provided. The person is attesting that the business is registered with the NRB, and the information given to Stripe matches.\nIn the case where the business isn’t found in the NRB, attesting that the beneficial ownership information is complete and correct is accomplished by providing the company.ownershipdeclaration.date and company.ownershipdeclaration.ip arguments.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDSTRIPEACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownershipdeclaration][date]\"=1609798905 \\\n  -d \"company[ownershipdeclaration][ip]\"=\"8.8.8.8\" \\\n  --data-urlencode \"company[ownershipdeclaration][useragent]\"=\"Mozilla/5.0\"`#### Additional information on the account\nIf Stripe is unable to verify the business entity, the entity doesn’t have a company.taxid, or there are possible concerns about sanctions, you need to collect a proof of entity document to enable payouts. Collect it using the company.verification.document.front and company.verification.document.back arguments.\n`company.taxid`#### Companies with the cardpayments capability\ncompany refers to these types of entities:\n`company`- Sociedad Anónima (S.A.)\n• Sociedad de Responsabilidad Limitada (S. de R.L.)\n• Sociedad Anónima Promotora de Inversión (S.A.P.I.)\n• Sociedad por Acciones Simplificada (S.A.S.)\n#Additional information on the individual\nIf the individual fails verification, doesn’t have an individual.idnumber, or there are possible concerns about sanctions, then an ID document scan is required to enable payouts. You can collect that information using the individual.verification.document.front and individual.verification.document.back arguments.\n`individual.idnumber`#### Additional information on the representative\nA person known as a representative must activate this connected account. The representative must be an authorized signatory with legal powers to represent the company as set forth under the relevant corporate documents, and must be authorized to agree to Stripe’s terms.\nIf Stripe is unable to verify the representative, the representative doesn’t have a representative.idnumber, or there are possible concerns about sanctions, you must collect a scan of an ID document to enable payouts. Collect ID information using the verification.document.front and verification.document.back arguments.\n#Additional information on owners\nYou must collect information on all owners with more than 25% ownership of the company. When you have finished collecting the required owner information, you must inform Stripe by setting company.ownersprovided to true.\n`true`If Stripe is unable to verify an owner, an owner doesn’t have an owners.idnumber, or there are possible concerns about sanctions, you must collect a scan of an ID document to enable payouts. Collect ID information using the verification.document.front and verification.document.back arguments.\nOptionally, you can collect ownership information on each person using the relationship.owner and relationship.percentownership arguments.\n#Additional information on the account\nIf Stripe is unable to verify the company, or if there are possible concerns about sanctions, you must collect a proof-of-entity document to enable payouts. Collect it using the company.verification.document.front and company.verification.document.back arguments.\n#Additional information on the individual\nDepending on the situation, you might need to collect a scan of an ID document, an address document, or both to enable payouts. That can happen if Stripe is unable to verify the individual or if there are possible concerns about sanctions. Collect ID information using the individual.verification.document.front and individual.verification.document.back arguments.\n#Additional information on the representative\nA person known as a representative must activate this connected account. The representative must be a beneficial owner who is authorized to sign for the company. Indicate that relationship to Stripe by setting relationship.executive to true, or, if the representative owns 25% or more of the company, by setting relationship.owner to true.\n`true``true`Depending on the situation, you might need to collect a scan of an ID document to enable payouts. That can happen if Stripe is unable to verify the representative or if there are possible concerns about sanctions. Collect ID information using the verification.document.front and verification.document.back arguments.\nOptionally, you can collect the representative’s ownership information using the relationship.representative and relationship.percentownership arguments.\n#Additional information on directors\nFor companies (excluding partnerships), you must collect information on all directors. Directors are members of the governing board of the company. When you have finished collecting the required information from all directors, or if your company does not have any directors, you must notify Stripe by setting company.directorsprovided to true.\n`true`If there are possible concerns about sanctions, you must collect a scan of an ID document to enable payouts. Collect ID information using the verification.document.front and verification.document.back arguments.\n#Additional information on beneficial owners (for both executives and owners)\nYou must collect information on all beneficial owners. Beneficial owners are persons who exercise significant management control over the company (executives) or who own 25% or more of the company (owners). When you have finished collecting the required information from all beneficial owners, you must notify Stripe by setting both company.ownersprovided and company.executivesprovided to true.\n`true`Depending on the situation, you might need to collect a scan of an ID document to enable payouts. That can happen if Stripe is unable to verify a beneficial owner or if there are possible concerns about sanctions. Collect ID information using the verification.document.front and verification.document.back arguments.\nOptionally, you can collect ownership information on each person who owns 25% or more of the company using the relationship.owner and relationship.percentownership arguments.\n#Business representative verification\nStripe requires the account representative to undergo enhanced identity verification and address verification.\n#Enhanced identity verification\nSingapore requires using Singpass MyInfo for enhanced identity verification of representatives for all business types. If users don’t have access to MyInfo, they must verify liveness using Stripe Identity.\nSuccessful completion of enhanced identity verification using either SingPass MyInfo or Stripe Identity requires integrating with Connect Onboarding or Embedded Onboarding. If you’re using the Stripe API to onboard connected accounts, you must update your forms to collect the new required verification information from your users, and redirect them to Connect Onboarding at the final stage to complete the enhanced identity verification.\n#Address verification\nVerification of the business representative’s address is required for all businesses. If Stripe can’t verify the address, you must collect a proof of address document.\n#Proof of authority verification\nStripe needs to verify that the account representative has sufficient authority to open an account on behalf of the legal entity.\nIf we can’t verify this programmatically, Stripe returns the verificationfailedrepresentativeauthority error code. You must change the representative to a person with sufficient authority.\nAlternatively, if a person with sufficient authority can’t be the business representative, you can add them as a person with the authorizer position. The business must then provide a Letter of Authorization signed by the authorizer, which permits the business representative to manage the account. You must provide this as the representative’s companyauthorization. You must add the first name and last name of the authorizer to the account, along with a copy of their ID Document.\n#Note\nStripe currently only accepts the Letter of Authorization template provided.\nAdditionally, the Letter of Authorization requirement can expose document-related errors such as verificationdocumentnamemismatch, or verificationdocumenttypenotsupported. Make sure you can handle Document Verification Errors and the New verification error codes.\n`verificationdocumentnamemismatch``verificationdocumenttypenotsupported`#### Proof of authority verification\nStripe needs to verify that the account representative has sufficient authority to open an account on behalf of the legal entity.\nIf we can’t verify this programmatically, Stripe returns the verificationfailedrepresentativeauthority error code. You must change the representative to a person with sufficient authority.\nAlternatively, if a person with sufficient authority can’t be the business representative, you can add them as a person with the authorizer position. The business must then provide a Letter of Authorization signed by the authorizer, which permits the business representative to manage the account. You must provide this as the representative’s companyauthorization. You must add the first name and last name of the authorizer to the account, along with a copy of their ID Document.\n#Note\nStripe currently only accepts the Letter of Authorization template provided.\nAdditionally, the Letter of Authorization requirement can expose document-related errors such as verificationdocumentnamemismatch, or verificationdocumenttypenotsupported. Make sure you can handle Document Verification Errors and the New verification error codes.\n`verificationdocumentnamemismatch``verificationdocumenttypenotsupported`#### Legal entity verification\nStripe requires the verification of business name, UEN and legal entity type. If we can’t verify the existence of the company, you must collect a company document.\nStripe also needs to check that the business type and business structure matches the local government records. When a mismatch in business type or business structure occurs, it generates a verificationlegalentitystructuremismatch error, and you need to update the business type or structure, or provide a company document to verify the legal entity.\n`verificationlegalentitystructuremismatch`UEN information might be verified with the data made available at https://data.gov.sg under the terms of the Singapore Open Data License version 1.0.\n#Legal entity verification\nStripe requires the verification of business name, UEN and legal entity type. If we can’t verify the existence of the company, you must collect a company document.\nStripe also needs to check that the business type and business structure matches the local government records. When a mismatch in business type or business structure occurs, it generates a verificationlegalentitystructuremismatch error, and you need to update the business type or structure, or provide a company document to verify the legal entity.\n`verificationlegalentitystructuremismatch`UEN information might be verified with the data made available at https://data.gov.sg under the terms of the Singapore Open Data License version 1.0.\n#Ultimate beneficial ownership verification\nThe ultimate beneficial ownership verification requirements depend on the user’s business type.\n#Private Companies\nStripe defines and attempts to identify any individual with 25% or more ownership as the ultimate beneficial owner (UBO). We recommend using Stripe-hosted or Embedded Onboarding to allow your users to preview and confirm the owners. Alternatively, you can collect and add all UBOs to the account using the owner position in the API.\nIf Stripe can’t determine these individuals, a company must submit a proof of ultimate beneficial ownership document to attest to their ownership structure. This must include proof of ownership documents for any holding companies owning 25% or more shares of the connected account. Stripe-hosted or embedded onboarding automatically seeks to collect these documents, or you can collect and submit them using the v1/accounts API. You must add all UBOs listed on the proof of ultimate beneficial ownership to the account.\n#Note\nConnected accounts can submit a single ultimate beneficial owner attestation as an alternative to one document for the business and another for each holding company with significant ownership.\nIf the company has no owners with 25% or more ownership, all directors listed on government records (and available for preview on Stripe-hosted or embedded onboarding) are considered to be the UBOs and you must add them to the account.\n#Partnerships\nPartnerships must verify the relationship between the business and all partners, managers and any other individual with 25% or more ownership. You must add these persons to the account with the owner position in the API.\n#Exemptions\nIn certain situations, a business entity might not need to declare its ownership. To qualify for an exemption, you must provide a legitimate reason under the ownershipexemptionreason parameter to the company field. Valid reasons for exemption include:\n`ownershipexemptionreason`- qualifiedentityexceedsownershipthreshold: If a government, publicly listed company, or financial institution owns at least 75% of the business, the business is exempt from providing ownership details.\n• qualifiesasfinancialinstitution: Businesses that are financial institutions regulated by the Monetary Authority of Singapore are exempt from sharing ownership details.\n`qualifiedentityexceedsownershipthreshold``qualifiesasfinancialinstitution`After submitting an exemption reason, we’ll review the business entity’s details. During this review, the requirement moves to requirements.pendingverification. If Stripe determines that the business entity doesn’t qualify for the exemption, we display an error message, and the ownership requirement will remain:\n{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requirements\": {\n    \"pastdue\": [\n      \"documents.proofofultimatebeneficialownership.files\",\n    ],\n    \"alternatives\": [\n      {\n        \"originalfieldsdue\": [\n          \"documents.proofofultimatebeneficialownership.files\",\n        ],\n        \"alternativefieldsdue\": [\n          \"company.ownershipexemptionreason\",\n        ]\n      }\n    ],\n    \"errors\": [\n      {\n        \"code\": \"verificationrejectedownershipexemptionreason\",\n        \"reason\": \"The ownership exemption reason was rejected.\",\n        \"requirement\": \"company.ownershipexemptionreason\"\n      }\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requirements\": {\n    \"pastdue\": [\n      \"documents.proofofultimatebeneficialownership.files\",\n    ],\n    \"alternatives\": [\n      {\n        \"originalfieldsdue\": [\n          \"documents.proofofultimatebeneficialownership.files\",\n        ],\n        \"alternativefieldsdue\": [\n          \"company.ownershipexemptionreason\",\n        ]\n      }\n    ],\n    \"errors\": [\n      {\n        \"code\": \"verificationrejectedownershipexemptionreason\",\n        \"reason\": \"The ownership exemption reason was rejected.\",\n        \"requirement\": \"company.ownershipexemptionreason\"\n      }\n    ],\n    ...\n  },\n  ...\n}`##### Integration details\nYou must add UBOs and directors to the account with the owner or director position in the API. Private companies, private partnerships, and non-profits require proof of beneficial ownership. When we can’t successfully verify the UBO, you need to collect an ID Document for the unverified UBO.\nIf Stripe determines that the account is missing owners, directors, or documentation of holding companies, the documents.proofofultimatebeneficialownership.files field will be returned in requirements. You can find a complete list of acceptable documents at Acceptable Verification Documents.\n`documents.proofofultimatebeneficialownership.files`Both Stripe-hosted and embedded onboarding display a list of missing owners and directors, which allows the user to add them to their account by clicking on them. Adding the suggested individuals fulfills the UBO requirement for companies without any holding companies in their ownership structure. For companies with holding companies, Stripe attempts to verify its owners. If we can’t, the user receives a prompt to upload either an ultimate beneficial owner attestation document or relevant ownership documents to determine the account’s ultimate beneficial owners. (This also applies to other business types, such as non-profits.)\nAccounts with missing beneficial owners have a verificationmissingowners error code in the errors hash of requirements. Similarly, accounts with missing directors have a verificationdocumentdirectorsmismatch error code. Lastly, accounts where Stripe requires additional information regarding their ownership have a verificationrequiresadditionalproofofregistration error code.\n`verificationmissingowners``verificationdocumentdirectorsmismatch``verificationrequiresadditionalproofofregistration`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requirements\": {\n    \"pastdue\": [\n      \"documents.proofofultimatebeneficialownership.files\",\n    ],\n    \"errors\": [\n      {\n        \"code\": \"verificationmissingowners\",\n        \"requirement\": \"documents.proofofultimatebeneficialownership.files\",\n        \"reason\": \"...\"\n      },\n      ...\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requirements\": {\n    \"pastdue\": [\n      \"documents.proofofultimatebeneficialownership.files\",\n    ],\n    \"errors\": [\n      {\n        \"code\": \"verificationmissingowners\",\n        \"requirement\": \"documents.proofofultimatebeneficialownership.files\",\n        \"reason\": \"...\"\n      },\n      ...\n    ],\n    ...\n  },\n  ...\n}`#### Ultimate beneficial ownership verification\nIn the case of non-profits, all key executives and directors are considered UBOs. This includes:\n• President (including assistant or deputy)\n• Executive director (including assistant or deputy)\n• CEO (including assistant or deputy)\n• Treasurer (including assistant or deputy)\n• Secretary or general secretary (including assistant or deputy)\n• Chairman (including assistant or deputy)\n• Trustee\nStripe attempts to identify all directors and key executives of charities registered in Singapore, which you can preview and confirm in Stripe-hosted or embedded onboarding. All other non-profits must provide a proof of ultimate beneficial ownership document and you must add the listed individuals to the account with the director position in the API.\n#Integration details\nYou must add all UBOs of non-profits to the account with director position in the API. When we can’t successfully verify the UBO, you need to collect an ID Document for the unverified UBO.\nIf Stripe determines that the account is missing owners, directors, or documentation of holding companies, the documents.proofofultimatebeneficialownership.files field becomes due. You can find a complete list of acceptable documents for Singapore at Acceptable Verification Documents.\n`documents.proofofultimatebeneficialownership.files`Stripe-hosted and embedded onboarding display a list of missing owners and directors, which allows the user to add them to the account by clicking on them. Adding the suggested individuals fulfills the UBO requirement for companies without any holding companies in their ownership structure. For companies with holding companies, Stripe attempts to verify its owners. If we can’t, the user receives a prompt to upload either an ultimate beneficial owner attestation document or relevant ownership documents to determine the account’s ultimate beneficial owners. (This also applies to other business types, such as non-profits.)\nNon-profits with missing beneficial owners have a verificationdocumentdirectorsmismatch error code.\n`verificationdocumentdirectorsmismatch`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requirements\": {\n    \"pastdue\": [\n      \"documents.proofofultimatebeneficialownership.files\",\n    ],\n    \"errors\": [\n      {\n        \"code\": \"verificationdocumentdirectorsmismatch\",\n        \"requirement\": \"documents.proofofultimatebeneficialownership.files\",\n        \"reason\": \"...\"\n      },\n      ...\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"requirements\": {\n    \"pastdue\": [\n      \"documents.proofofultimatebeneficialownership.files\",\n    ],\n    \"errors\": [\n      {\n        \"code\": \"verificationdocumentdirectorsmismatch\",\n        \"requirement\": \"documents.proofofultimatebeneficialownership.files\",\n        \"reason\": \"...\"\n      },\n      ...\n    ],\n    ...\n  },\n  ...\n}`#### Closure of unverified accounts\nAs required under Singapore’s Payment Services Act, we’re permanently closing Singapore accounts that remain unverified for over 120 business days. These are accounts whose charges or payouts have already been suspended, so this closure affects only inactive accounts.\nTo help you identify affected accounts, we upload monthly reports titled “Unverified account list” to your Dashboard under the Compliance and documents section, where you can find the list of impacted accounts and their requirement deadlines. Any accounts closed in the last month are in the report titled “Closed unverified account list.”\nWe’ll close any account that hasn’t been verified by its designated deadline. The account owner needs to provide the missing verification information before the deadline to keep the account open. If the information is provided after the deadline has passed, we’ll release any remaining balance to the account holder’s bank account, but we won’t be able to reactivate their Stripe account.\nStripe sends emails to Standard and Express accounts that remain unverified for too long, to inform them of the impending closure and to remind them to update their account details. Stripe won’t communicate with Custom connected accounts directly. That means you, as the platform, can contact them to avoid account closures.\nAccounts that are closed under this process have their disabledreason set to rejected.other.\n`rejected.other`#### Additional identity verification\nTo comply with regulatory requirements in Thailand, we require additional identity verification for certain connected accounts. This entails taking a selfie and uploading an ID document using Stripe Identity. Your platform needs to integrate with Connect Onboarding to satisfy this identity verification requirement.\nAdditional identity verification applies to the representatives and beneficial owners of connected accounts belonging to individuals, sole proprietors and unregistered partnerships.\n#Warning\nIf you don’t integrate with Connect Onboarding, you won’t be able to onboard connected accounts subject to additional identity verification.\n#Registered address requirement\nThe registered address requirement refers to the Household Registration address. Please provide an address as per the ‘Tabien Bann’ or Household Registration book, also known as the Blue book for Thai nationals, or Yellow book for non-Thai nationals. To collect a Household Registration address, use the registeredaddress parameter.\nIf the user is neither a Thai national nor resident of Thailand, collect their current residential address with the same parameter instead.\n#ID number requirement\nThe ID number requirement refers to the 13-digit code found on the front of a Thai ID card, and secondary ID number requirement refers to the laser code found at the back of a Thai ID card. To collect a Thai ID number use the idnumber parameter, and to collect a laser code use the idnumbersecondary parameter.\nThese requirements are only applicable to Thai nationals, so leave the parameters empty if the user isn’t a Thai national.\n#Additional information on the individual\nIf Stripe is unable to verify the individual or if they’re not a Thai national, you need to collect a scan of an ID document. To collect an ID document, use the individual.verification.document.front and individual.verification.document.back parameters.\n#Additional information on the representative\nIf Stripe is unable to verify the account representative or if they’re not a Thai national, you need to provide a scan of an ID document. To collect an ID document, use the verification.document.front and verification.document.back parameters.\n#Additional information on beneficial owners\nAccounts belonging to companies and registered partnerships are required to provide information on all beneficial owners. A beneficial owner is defined as any individual who owns 25% or more shares of the business. If there is no such person, then any individual who exercises significant control over the company is considered a beneficial owner. Otherwise, please provide information on any individual holding the position of senior management.\nIf Stripe is unable to verify a beneficial owner or if they’re not a Thai national, you need to provide a scan of an ID document. To collect an ID document, use the verification.document.front and verification.document.back parameters.\n#Additional information on the company\nIf Stripe is unable to verify the company, you need to provide a scan of a company verification document issued less than 6 months ago. To collect the company verification document scan, use the company.verification.document.front and company.verification.document.back parameters on the Account object.\n#Additional tax information\nIf Stripe is unable to verify the company.taxid, upload a copy of an IRS Letter 147C document or an IRS SS-4 confirmation letter as an alternate attempt at verification. This information can be collected with the company.verification.document.front argument, and should include the connected account’s company.name and company.taxid.\n`company.taxid``company.name``company.taxid`#### Additional information on the account\nTo enable card payments, a validated city, state, and ZIP code for company.address is required. Card payments will be disabled if the company.taxid (EIN) hasn’t been verified before 30 days or 1,500 USD in payments, whichever comes first.\n`company.address``company.taxid`To enable payouts, company.address needs to be a validated full address and the company.taxid (EIN) needs to be verified. Payouts will be disabled if a full address hasn’t been validated or the company.taxid is not verified before 30 days.\n`company.address``company.taxid``company.taxid`#### Additional information on the individual\nTo enable card payments, a validated city, state, and ZIP code for individual.address is required.\n`individual.address`To enable payouts, individual.address needs to be a validated full address. Payouts will be disabled if a full address hasn’t been validated before 30 days.\n`individual.address`If the individual fails verification with ssnlast4, then the full SSN is required and their identity needs to be verified to enable card payments. Use the individual.idnumber argument to collect this information.\n`ssnlast4`#### Additional information on the representative\nThis connected account needs to be activated by a person, known as a representative, with significant responsibility to control, manage, or direct the organization; and is authorized by the organization to agree to Stripe’s terms. The representative must either be an owner or an executive, which you specify by setting relationship.owner to true or relationship.executive to true.\n`true``true`If the representative fails verification with ssnlast4, then the full SSN is required and their identity needs to be verified to enable card payments. Use the person.idnumber argument to collect this information.\n`ssnlast4`If Stripe is unable to verify the representative or if the person doesn’t have an SSN, you need to collect a scan of an ID document to enable card payments. This information can be collected with the verification.document.front and verification.document.back arguments.\n#Additional information for minors\nIf the account representative is a minor, you must verify the minor’s legal guardian. A legal guardian is a Person on the account with relationship.legalguardian set to true. Additionally, the legal guardian must provide their information and sign the Stripe terms of service, which we store on the Person object with relationship.legalguardian set to true. Store the legal guardian’s terms of service acceptance in the additionaltosacceptances hash.\n`true``relationship.legalguardian``true`If the legal guardian fails verification with ssnlast4, then the full SSN is required and their identity needs to be verified to enable card payments. Use the person.idnumber argument to collect this information.\n`ssnlast4`If Stripe is unable to verify the legal guardian or if the person doesn’t have an SSN, you need to collect a scan of an ID document to enable card payments. This information can be collected with the verification.document.front and verification.document.back arguments.\n#Additional information on owners\nInformation on all owners with 25% or more ownership of the company must be collected. When you have finished collecting the required owner information, you need to attest this by setting company.ownersprovided to true. This lets Stripe know that you have completed this requirement.\n`company.ownersprovided``true`If there are any unverified owners in the company, payouts on the connected account can become disabled at 750,000 USD in charges unless the following information is collected:\n• owners.dob.day\n• owners.dob.month\n• owners.dob.year\n• owners.address\n• owners.idnumber\n• owners.phone\n`owners.dob.day``owners.dob.month``owners.dob.year``owners.address``owners.idnumber``owners.phone`If Stripe is unable to verify an owner or if an owner lives outside of the US and doesn’t have an SSN, you need to collect a scan of an ID document. This information can be collected with the verification.document.front and verification.document.back arguments.\nOptionally, you can collect company ownership information. This can be done using the relationship.owner and relationship.percentownership attributes. Set relationship.owner to true and relationship.percentownership to the user’s ownership percentage. If relationship.percentownership is unspecified, the default is 25%.\n`relationship.owner``true``relationship.percentownership``relationship.percentownership`#### Supported business structures\nOptionally, you can collect information on the legal structure of your user’s business with the company.structure argument. See Business structure for more details.\nBelow lists the supported business structures for privately held companies:\n• multimemberllc\n• singlememberllc\n• privatepartnership\n• privatecorporation\n• unincorporatedassociation\n`multimemberllc``singlememberllc``privatepartnership``privatecorporation``unincorporatedassociation`Below lists the supported business structures for publicly traded companies. If you further classify the business with any of these structures, the representative doesn’t need to be an owner nor an executive, and you do not need to provide information on additional owners.\n• publiccorporation\n• publicpartnership\n`publiccorporation``publicpartnership`#### Supported business structures\nOptionally, you can collect information on the legal structure of your user’s business. This can be done using the company.structure argument. See Business structure for more details.\nBelow lists the supported business structures for government entities:\n• governmentalunit\n• governmentinstrumentality\n`governmentalunit``governmentinstrumentality`If your user is an instrumentality with tax-exempt status, you can set the company.structure to taxexemptgovernmentinstrumentality.\n`company.structure``taxexemptgovernmentinstrumentality`#### Supported business structures\nWhile uncommon, there are circumstances where an individual business operates and is treated more like a company, such as a single-member LLC. For these users, you can optionally collect information on their legal structure with the company.structure argument.\n`individual``company`If your user’s business has only one member or owner and is registered as an LLC with a US state, you can set the businesstype to company and the company.structure to singlememberllc. You collect the same required information, except you use the company hash and the Persons API, instead of the individual hash. For any requirement in the individual hash, you need to map it to the account’s representative, such as setting representative.firstname instead of individual.firstname.\n`businesstype``company``company.structure``singlememberllc``individual``individual``representative.firstname``individual.firstname`If your user has obtained a business identification (for example, has a tax ID that’s separate from their personal ID, or a business address that’s different than their home address), you can set the businesstype to company and the company.structure to soleproprietorship. You collect the same required information, except you use the company hash and the Persons API, instead of the individual hash since it pertains to the natural person. For any requirement in the individual hash, you need to map it to the account’s representative, such as setting representative.firstname instead of individual.firstname.\n`businesstype``company``company.structure``soleproprietorship``individual``individual``representative.firstname``individual.firstname`#### Supported business structures\nOptionally, you can collect information on the legal structure of your user’s business with the company.structure argument. See Business structure for more details.\nBelow lists the supported business structures for non-profit organizations:\n• incorporatednonprofit\n• unincorporatednonprofit\n`incorporatednonprofit``unincorporatednonprofit`The US federal government grants tax-exempt status to certain government entities that are considered non-profit. If your user is an instrumentality with tax-exempt status, you can set the businesstype to governmententity and the company.structure to taxexemptgovernmentinstrumentality. Then, collect the appropriate verification requirements from them.\n`businesstype``governmententity``company.structure``taxexemptgovernmentinstrumentality`#### Tax reporting information\nBy default, the requirements for transfers do not collect all information at the appropriate thresholds to file IRS Form 1099-K or Form 1099-MISC. If your business has US federal 1099 filing requirements and plans to file these through Stripe, request the appropriate tax reporting capability and make sure to collect the necessary information from your users.\n`transfers`#### Threshold information\nIn addition to the onboarding requirements, there is a second threshold to keep payouts enabled, which depends on your industry and Stripe’s review of your platform profile. The company.taxid (EIN) needs to be verified before 10,000 USD in charges for some platforms, and before 3,000 USD for other platforms.\n`company.taxid`#### Threshold information\nIn addition to the onboarding requirements, there is a second threshold to keep payouts enabled, which depends on your industry and Stripe’s review of your platform profile. The company.taxid (EIN) needs to be verified before 10,000 USD in charges for some platforms, and before 3,000 USD for other platforms.\n`company.taxid`- individual.dob.day\n• individual.dob.month\n• individual.dob.year\n• individual.ssnlast4\n`individual.dob.day``individual.dob.month``individual.dob.year``individual.ssnlast4`#### Payments threshold information\nWhen an account with cardpayments reaches 500,000 USD in lifetime charges, we require a full idnumber (SSN) for them to continue accepting payments. If they’ve already provided the full number, they don’t have to provide it again.\n`cardpayments``idnumber`For accounts with businesstype set to individual, and where the owner isn’t a minor, update the account’s individual.idnumber. For other accounts, which have persons with relationship.legalguardian, relationship.representative, or relationship.owner, update the appropriate person’s idnumber.\n`businesstype``individual`"}, {"path": "connect\\risk-management.md", "url": "https://docs.stripe.com/connect/risk-management", "content": "#Risk management with Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/risk-management\n\n#Risk management with Connect\n#Learn how Connect can help you manage risk and losses.\nAll business owners assume a certain amount of risk when accepting payments for goods and services. This guide defines the risks to consider as a Connect platform owner and the approaches you can take to mitigate those risks.\n#Components of payments risk\nAny approach to risk management involves many potential sources of payments risk, which can be split into two general categories:\n• Transaction risk: The risk that a customer might charge back a transaction, such as disputes or fraud identified from card testing. With direct charges, transaction risk primarily affects connected accounts; with destination charges and separate charges and transfers, transaction risk primarily affects platforms.\n• Merchant risk: The risk that a connected account is unable or unwilling to cover the costs of chargebacks on its transactions, leading to unrecoverable negative balances. Merchant risk primarily affects platforms.\nThere are two main types of merchant risk: credit risk and fraud risk. Both can result in chargebacks and unrecoverable negative balances.\n Type | Description | Examples \n --- | --- | --- \n Credit risk | The risk that connected accounts are unable to fulfill their obligations to their customers, such as failing to deliver orders due to unforeseen supply issues. If a connected account accumulates more refunds and chargebacks than it can financially cover, it can result in default. | During the COVID pandemic, some hotels and short-term accommodation providers represented by connected accounts went out of business. As a result, customers who had pre-paid for future stays submitted chargebacks, which were covered by the platforms that processed those payments. \n Fraud risk | The risk that dishonest owners or employees of connected accounts intentionally don’t fulfill their obligations to their customers, such as taking orders for unavailable goods and services. | No intent to deliver: A fraudulent online storefront charged customers for goods that they didn’t intend to deliver. The connected account then paid out the money to their external bank account. When the customers realized that their orders were never going to arrive, they submitted chargebacks, which were covered by the platform.Payment method cashing: A fraudster stole a customer’s credit card number, opened a connected account, and made purchases through that account using the stolen payment method credentials. When the customer discovered the fraudulent charges, they submitted chargebacks, which were covered by the platform. \n• No intent to deliver: A fraudulent online storefront charged customers for goods that they didn’t intend to deliver. The connected account then paid out the money to their external bank account. When the customers realized that their orders were never going to arrive, they submitted chargebacks, which were covered by the platform.\n• Payment method cashing: A fraudster stole a customer’s credit card number, opened a connected account, and made purchases through that account using the stolen payment method credentials. When the customer discovered the fraudulent charges, they submitted chargebacks, which were covered by the platform.\n#Connect merchant risk options\nEach connected account’s Account object has a controller.losses.payments property that determines who’s responsible for covering any negative payments balance on that account.\n#Note\nThe controller.losses.payments property applies only to the connected account’s payments balance. It doesn’t affect responsibility for covering negative Issuing or Treasury balances.\n`controller.losses.payments`You can select whether you or Stripe is responsible for negative balance liabilities on your accounts. Because your choice of negative balance liability can significantly impact your platform and connected accounts, consider it carefully before onboarding any accounts. This table describes some important elements of the decision:\n  | Stripe | Platform \n --- | --- | --- \n API value | stripe | application \n Losses | Stripe covers losses due to your connected accounts’ negative balances. | Your platform can incur losses due to your connected accounts’ negative balances. \n Operational responsibilities | Stripe’s risk teams fully manage all payments-related merchant risk. | The platform maintains an internal risk team capable of adequately managing all payments-related merchant risk. \n Connected account experience | Stripe directly contacts your connected accounts to prevent, mitigate, and resolve payments risk-related issues, and in some cases can take action against them. | Your platform has a greater degree of control over the payments risk-related experience of your connected accounts. \n Stripe fees | If you pay Stripe’s listed prices for other fees, we don’t charge additional fees for negative balance liability. | Stripe charges no additional fees. \n`stripe``application`We recommend that new platforms have Stripe take responsibility for negative balances on connected accounts. Only consider taking responsibility as the platform if you’re highly confident in your ability to manage merchant risk.\n#Stripe solutions for risk management\nStripe provides a variety of solutions to help manage both transaction and merchant risk. These solutions fall into two categories:\n• Tools to manage risk: Tools that Stripe provides to help platforms manage risks without Stripe being liable for any resulting losses.\n• Full service risk management: Risk-management services that Stripe provides where Stripe covers the costs of any resulting losses.\nThis table describes the main solution that Stripe provides in each category for each type of risk:\n Risk type | Tools to manage risk | Full service risk management \n --- | --- | --- \n Transaction risk | Radar: Scans every payment to help detect and prevent fraud. |  \n Merchant risk | Merchant risk tooling: Tools that help your risk teams prevent, detect, and mitigate risks posed by your connected accounts. | Stripe Managed Risk: A full-service solution that protects your platform by managing risk and covering any negative balances on your connected accounts. \n#Know Your Customer (KYC) and compliance\nIn addition to operational risk management solutions, Stripe provides KYC and risk-based screening to help onboard connected accounts and maintain compliance with evolving regulations. Stripe screens include the following:\n• Identity verifications\n• Risk-based KYC and AML checks for individuals and businesses\n• Sanctions screening\n• MATCH (Member Alert To Control High-risk businesses) list checks\n• Secure credit card data tokenization for PCI compliance\n• Money transmitter licenses (MTL) in the US and e-money (EMI) licenses in the EU\n• Prohibited business checks"}, {"path": "connect\\separate-charges-and-transfers.md", "url": "https://docs.stripe.com/connect/separate-charges-and-transfers", "content": "#Create separate charges and transfers | Stripe Documentation\nURL: https://docs.stripe.com/connect/separate-charges-and-transfers\n\n#Create separate charges and transfers\n#Create charges on your platform account and transfer funds to multiple connected accounts.\nCreate separate charges and transfers to transfer funds from one payment to multiple connected accounts, or when a specific user isn’t known at the time of the payment. The charge on your platform account is decoupled from the transfers to your connected accounts. With this charge type:\n• You create a charge on your platform’s account and also transfer funds to your connected accounts. The payment appears as a charge on your account and there are also transfers to connected accounts (amount determined by you), which are withdrawn from your account balance.\n• You can transfer funds to multiple connected accounts.\n• Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\nThis charge type is most optimal for marketplaces that need to split payments between multiple parties, such as DoorDash, a restaurant delivery platform.\nStripe supports separate charges and transfers in the following regions:\nIn most scenarios, your platform and any connected account must be in the same region. Attempting to transfer funds across a disallowed border returns an error. For information about cross-region support, see cross-border transfers. You must only use transfers in combination with the permitted use cases for charges, tops-ups and fees.\n#Note\nWe recommend using separate charges and transfers for connected accounts that have access to the Express Dashboard or no dashboard access.\nRedirect to a Stripe-hosted payment page using Stripe Checkout. See how this integration compares to Stripe’s other integration types.\n#Integration effort\n#Integration type\nRedirect to Stripe-hosted payment page\n#UI customization\nTry it out\nFirst, register for a Stripe account.\nUse our official libraries to access the Stripe API from your application:\n#Available as a gem\nsudo gem install stripe\n`# Available as a gem\nsudo gem install stripe`#If you use bundler, you can add this line to your Gemfile\ngem 'stripe'\n`# If you use bundler, you can add this line to your Gemfile\ngem 'stripe'`## Create a Checkout SessionClient-sideServer-side\nA Checkout Session controls what your customer sees in the payment form such as line items, the order amount and currency, and acceptable payment methods. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`\n  \n    Checkout\n  \n  \n    \n      Checkout\n    \n  \n`On your server, create a Checkout Session and redirect your customer to the URL returned in the response.\ncurl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=\"Restaurant delivery service\" \\\n  -d \"lineitems[0][pricedata][unitamount]\"=10000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[transfergroup]\"=ORDER100 \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success?sessionid={CHECKOUTSESSIONID}\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=\"Restaurant delivery service\" \\\n  -d \"lineitems[0][pricedata][unitamount]\"=10000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[transfergroup]\"=ORDER100 \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success?sessionid={CHECKOUTSESSIONID}\"`- lineitems - This attribute represents the items the customer is purchasing. The items are displayed in the Stripe-hosted checkout page.\n• paymentintentdata[transfergroup] - Use a unique string as the transfergroup to identify objects that are associated with each other. When Stripe automatically creates a charge for a PaymentIntent with a transfergroup value, it assigns the same value to the charge’s transfergroup.\n• successurl - Stripe redirects the customer to the success URL after they complete a payment and replaces the {CHECKOUTSESSIONID} string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See customize redirect behavior with a Stripe-hosted page for more information.\n`lineitems``paymentintentdata[transfergroup]``transfergroup``transfergroup``transfergroup``successurl``{CHECKOUTSESSIONID}`## Handle post-payment eventsServer-side\nStripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.\nStripe recommends handling all of the following events when collecting payments with Checkout:\n Event | Description | Next steps \n --- | --- | --- \n checkout.session.completed | The customer has successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. \n checkout.session.asyncpaymentsucceeded | The customer’s payment succeeded. | Fulfill the purchased goods or services. \n checkout.session.asyncpaymentfailed | The payment was declined, or failed for some other reason. | Contact the customer through email and request that they place a new order. \nThese events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded or a failure status.\n`processing``succeeded`## Create a TransferServer-side\nOn your server, send funds from your account to a connected account by creating a Transfer and specifying the transfergroup used.\n`transfergroup`curl https://api.stripe.com/v1/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=7000 \\\n  -d currency=usd \\\n  -d destination={{CONNECTEDACCOUNTID}} \\\n  -d transfergroup=ORDER100\n`curl https://api.stripe.com/v1/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=7000 \\\n  -d currency=usd \\\n  -d destination={{CONNECTEDACCOUNTID}} \\\n  -d transfergroup=ORDER100`Transfer and charge amounts don’t have to match. You can split a single charge between multiple transfers or include multiple charges in a single transfer. The following example creates an additional transfer associated with the same transfergroup.\n`transfergroup`curl https://api.stripe.com/v1/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=2000 \\\n  -d currency=usd \\\n  -d destination={{OTHERCONNECTEDACCOUNTID}} \\\n  -d transfergroup=ORDER100\n`curl https://api.stripe.com/v1/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=2000 \\\n  -d currency=usd \\\n  -d destination={{OTHERCONNECTEDACCOUNTID}} \\\n  -d transfergroup=ORDER100`### Transfer options\nYou can assign any value to the transfergroup string, but it must represent a single business action. You can also make a transfer with neither an associated charge nor a transfergroup—for example, when you must pay a provider but there’s no associated customer payment.\n`transfergroup``transfergroup`#### Note\nThe transfergroup only identifies associated objects. It doesn’t affect any standard functionality. To prevent a transfer from executing before the funds from the associated charge are available, use the transfer’s sourcetransaction attribute.\n`transfergroup``sourcetransaction`By default, a transfer request fails when the amount exceeds the platform’s available account balance. Stripe doesn’t automatically retry failed transfer requests.\nYou can avoid failed transfer requests for transfers that are associated with charges. When you specify the associated charge as the transfer’s sourcetransaction, the transfer request automatically succeeds. However, we don’t execute the transfer until the funds from that charge are available in the platform account.\n#Note\nIf you use separate charges and transfers, take that into account when planning your payout schedule. Automatic payouts can interfere with transfers that don’t have a defined sourcetransaction.\n`sourcetransaction`## Test the integration\n Card number | Scenario | How to test \n --- | --- | --- \n 4242424242424242 | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000002500003155 | The card payment requires authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 4000000000009995 | The card is declined with a decline code like insufficientfunds. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n 6205500000000000004 | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. \n`insufficientfunds`See Testing for additional information to test your integration.\n#OptionalEnable additional payment methods\n#Specify the settlement merchant\nThe settlement merchant is dependent on the capabilities set on an account and how a charge is created. The settlement merchant determines whose information is used to make the charge. This includes the statement descriptor (either the platform’s or the connected account’s) that’s displayed on the customer’s credit card or bank statement for that charge.\nSpecifying the settlement merchant allows you to be more explicit about who to create charges for. For example, some platforms prefer to be the settlement merchant because the end customer interacts directly with their platform (such as on-demand platforms). However, some platforms have connected accounts that interact directly with end customers instead (such as a storefront on an e-commerce platform). In these scenarios, it might make more sense for the connected account to be the settlement merchant.\nYou can set the onbehalfof parameter to the ID of a connected account to make that account the settlement merchant for the payment. When using onbehalfof:\n`onbehalfof``onbehalfof`- Charges settle in the connected account’s country and settlement currency.\n• The fee structure for the connected account’s country is used.\n• The connected account’s statement descriptor is displayed on the customer’s credit card statement.\n• If the connected account is in a different country than the platform, the connected account’s address and phone number are displayed on the customer’s credit card statement.\n• The number of days that a pending balance is held before being paid out depends on the delaydays setting on the connected account.\nIf onbehalfof is omitted, the platform is the business of record for the payment.\n`onbehalfof`#### Caution\nThe onbehalfof parameter is supported only for connected accounts with a payments capability such as cardpayments. Accounts under the recipient service agreement can’t request cardpayments or other payments capabilities.\n`onbehalfof``cardpayments`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=\"Restaurant delivery service\" \\\n  -d \"lineitems[0][pricedata][unitamount]\"=10000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[onbehalfof]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"paymentintentdata[transfergroup]\"=ORDER100 \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success\"\n`curl https://api.stripe.com/v1/checkout/sessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"lineitems[0][pricedata][currency]\"=usd \\\n  -d \"lineitems[0][pricedata][productdata][name]\"=\"Restaurant delivery service\" \\\n  -d \"lineitems[0][pricedata][unitamount]\"=10000 \\\n  -d \"lineitems[0][quantity]\"=1 \\\n  -d \"paymentintentdata[onbehalfof]\"={{CONNECTEDACCOUNTID}} \\\n  -d \"paymentintentdata[transfergroup]\"=ORDER100 \\\n  -d mode=payment \\\n  --data-urlencode successurl=\"https://example.com/success\"`## Collect fees\nWhen using separate charges and transfers, the platform can collect fees on a charge by reducing the amount it transfers to the destination accounts. For example, consider a restaurant delivery service transaction that involves payments to the restaurant and to the driver:\n# The customer pays a 100 USD charge.\n# Stripe collects a 3.20 USD fee and adds the remaining 96.80 USD to the platform account’s pending balance.\n# The platform transfers 70 USD to the restaurant’s connected account and 20 USD to the driver’s connected account.\n# A platform fee of 6.80 USD remains in the platform account.\nTo learn about processing payments in multiple currencies with Connect, see working with multiple currencies.\n#Transfer availability\nThe default behavior is to transfer funds from the platform account’s available balance. Attempting a transfer that exceeds the available balance fails with an error. To avoid this problem, when creating a transfer, tie it to an existing charge by specifying the charge ID as the sourcetransaction parameter. With a sourcetransaction, the transfer request returns success regardless of your available balance if the related charge has not settled yet. However, the funds don’t become available in the destination account until the funds from the associated charge are available to transfer from the platform account.\n`sourcetransaction``sourcetransaction`#### Note\nIf a transfer fails due to insufficient funds in your platform balance, adding funds doesn’t automatically retry the failed action. After adding funds, you must repeat any failed transfers or payouts.\nIf the source charge has a transfergroup value, Stripe assigns the same value to the transfer’s transfergroup. If it doesn’t, then Stripe generates a string in the format group plus the associated PaymentIntent ID, for example: grouppi2NHDDD589O8KAxCG0179Du2s. It assigns that string as the transfergroup for both the charge and the transfer.\n`transfergroup``transfergroup``group``grouppi2NHDDD589O8KAxCG0179Du2s``transfergroup`#### Note\nYou must specify the sourcetransaction when you create a transfer. You can’t update that attribute later.\n`sourcetransaction`curl https://api.stripe.com/v1/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=7000 \\\n  -d currency=usd \\\n  -d sourcetransaction={{CHARGEID}} \\\n  -d destination={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/transfers \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=7000 \\\n  -d currency=usd \\\n  -d sourcetransaction={{CHARGEID}} \\\n  -d destination={{CONNECTEDACCOUNTID}}`You can get the charge ID from the PaymentIntent:\n• Get the PaymentIntent’s latestcharge attribute. This attribute is the ID of the most recent charge associated with the PaymentIntent.\n• Request a list of charges, specifying the paymentintent in the request. This method returns full data for all charges associated with the PaymentIntent.\n`paymentintent`When using this parameter:\n• The amount of the transfer must not exceed the amount of the source charge\n• You can create multiple transfers with the same sourcetransaction, as long as the sum of the transfers doesn’t exceed the source charge\n• The transfer takes on the pending status of the associated charge: if the funds from the charge become available in N days, the payment that the destination Stripe account receives from the transfer also becomes available in N days\n• Stripe automatically creates a transfergroup for you\n• The currency of the balance transaction associated with the charge must match the currency of the transfer\n`sourcetransaction``transfergroup`Asynchronous payment methods, like ACH, can fail after a subsequent transfer request is made. For these payments, avoid using sourcetransaction. Instead, wait until a charge.succeeded event is triggered before transferring the funds. If you have to use sourcetransaction with these payments, you must implement functionality to manage payment failures.\n`sourcetransaction``sourcetransaction`When a payment used as a sourcetransaction fails, funds from your platform’s account balance are transferred to the connected account to cover the payment. To recover these funds, reverse the transfer associated with the failed sourcetransaction.\n`sourcetransaction``sourcetransaction`## Issue refunds\nYou can refund charges created on your platform using its secret key. However, refunding a charge has no impact on any associated transfers. It’s up to your platform to reconcile any amount owed back to it by reducing subsequent transfer amounts or by reversing transfers.\ncurl https://api.stripe.com/v1/refunds \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d charge={{CHARGEID}}\n`curl https://api.stripe.com/v1/refunds \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d charge={{CHARGEID}}`## Reverse transfers\nConnect supports the ability to reverse transfers made to connected accounts, either entirely or partially (by setting an amount value). Use transfer reversals only for refunds or disputes related to the charge, or to correct errors in the transfer.\n`amount`curl https://api.stripe.com/v1/transfers/{{TRANSFERID}}/reversals \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=7000\n`curl https://api.stripe.com/v1/transfers/{{TRANSFERID}}/reversals \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=7000`Transfer reversals add the specified (or entire) amount back to the platform’s available balance, reducing the connected account’s available balance accordingly. It is only possible to reverse a transfer if the connected account’s available balance is greater than the reversal amount or has connected reserves enabled.\nIf the transfer reversal requires a currency conversion, and the reversal amount would result in a zero balance after the conversion, it returns an error.\nDisabling refunds for a connected account won’t block the ability to process transfer reversals.\n#See also\n• Working with multiple currencies\n• Statement descriptors with Connect\n• Understanding Connect account balances"}, {"path": "connect\\service-agreement-types.md", "url": "https://docs.stripe.com/connect/service-agreement-types", "content": "#Service agreement types | Stripe Documentation\nURL: https://docs.stripe.com/connect/service-agreement-types\n\n#Service agreement types\n#A service agreement establishes the relationship between Stripe and the platform's users.\nThe connected account’s service agreement type determines what capabilities the account has access to, and which service agreement applies to the platform’s users.\n#Supported agreement types\nConnected accounts can be under one of the following service agreement types: full or recipient. After the connected account’s service agreement is accepted, the type of service agreement can’t be modified.\n`full``recipient`### Full service agreement\nA full service agreement creates a service relationship between Stripe and the connected account holder. Connected accounts under the full service agreement can process card payments and request the cardpayments capability.\n`full``full`For the legal language, see the Stripe Connected Account Agreement.\n#Recipient service agreement\nA recipient service agreement clarifies that there is no service relationship between Stripe and the recipient, and that the recipient’s relationship is with the platform. Connected accounts under the recipient service agreement can’t process payments or request the cardpayments capability.\n`recipient``cardpayments`Transfers to recipient accounts take an extra 24 hours to become available in the connected account’s balance. To learn more about pending balances, see the account balances page.\n`recipient``pending`Cross-border payouts only work with accounts under the recipient service agreement. You must explicitly pass in the country code if it differs from the platform country.\n`recipient`Stripe isn’t responsible for providing direct support for accounts on the recipient service agreement. However, the platform can reach out to Stripe for support for these accounts.\n`recipient`For the legal language, see the Stripe Recipient Agreement.\n#Choosing the agreement type\nYou can specify the agreement type through the Accounts API.\n#Accounts API\nTo choose a recipient service agreement when creating an account, specify the agreement type with tosacceptance[serviceagreement]:\n`recipient`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"tosacceptance[serviceagreement]\"=recipient\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"tosacceptance[serviceagreement]\"=recipient`The same principle applies when updating an account:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"tosacceptance[serviceagreement]\"=recipient\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"tosacceptance[service_agreement]\"=recipient`#### Caution\nChanging the service agreement type fails if the service agreement has already been accepted; in those cases, create a new account with the desired service agreement.\n#Connect Configuration settings\nTo choose a recipient service agreement for connected accounts with access to the Express Dashboard, select the Transfers option with the Restricted Capability Access icon in the Configuration settings section of the Stripe Dashboard.\n`recipient`You can override the Configuration settings for an individual account by specifying its capabilities and service agreement type with the Accounts API.\n#Accepting the correct agreement\nStripe handles the service agreement acceptance if you use Stripe-hosted onboarding or Embedded onboarding. For API onboarding, the platform must attest that their user has seen and accepted the service agreement. See service agreement acceptance for more information."}, {"path": "connect\\setting-mcc.md", "url": "https://docs.stripe.com/connect/setting-mcc", "content": "#Setting merchant category codes | Stripe Documentation\nURL: https://docs.stripe.com/connect/setting-mcc\n\n#Setting merchant category codes\n#Learn about merchant category codes (MCCs) and how to set them for your connected accounts.\nMCCs are used to classify businesses by the type of goods or services they provide. For example, grocery stores, hotels, and airlines all have different MCCs. These codes are often used for calculating interchange fees, authorizing payments, and preventing fraud, so it’s important that your connected accounts have MCCs that match their businesses.\nEach Stripe account has exactly one MCC. To view the MCC for a specific account, you can retrieve the businessprofile.mcc field on the account object.\n`businessprofile.mcc`Stripe automatically sets MCC codes for connected accounts, but you can choose to set them manually for accounts that your platform controls. That includes Custom and Express accounts.\n#Setting MCCs automatically\nStripe automatically evaluates accounts to determine appropriate MCCs. That means you don’t need to build and maintain any custom logic. Generally, the industry listed in the Stripe Dashboard for the connected account is used to determine the MCC. For accounts where Stripe collects updated information for due or changed requirements, including Standard and Express accounts, and for Custom accounts using Stripe-hosted onboarding, the MCC is set during onboarding. For accounts created with the API and for Express accounts, you can set the MCC manually.\nIf the industry that the user provides can’t be used, Stripe might use information from the connected account’s website to determine the MCC. If this also fails, the platform or Stripe’s default MCC (5734 Computer Software Stores) is used.\n`5734`Sometimes accounts are flagged for manual review by Stripe. If this happens and Stripe determines the MCC on an account is inaccurate, we might update it. The new MCC can’t be manually changed by the platform, and an error is returned if the API is used to update the MCC.\n#Setting MCCs manually\nYou can set the MCC manually when you create accounts. The examples below use the code for Computer Software Stores (5734), but you can see a full list in the next section.\n`5734`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"businessprofile[mcc]\"=5734\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"businessprofile[mcc]\"=5734`If your connected accounts share an MCC, you can provide the code using businessprofile.mcc when you create accounts. In Connect Onboarding, your users won’t be asked for an industry. If you build your own onboarding UI, you don’t need to add a UI element for MCC.\n`businessprofile.mcc`If your connected accounts have different MCCs, Connect Onboarding will collect that information. If you aren’t using Connect Onboarding, you can provide a list of MCC options for users to choose from. Based on the user’s selection, you can pass an MCC appropriate for their business. If you don’t want to pass MCCs when you create accounts, you can update accounts with MCCs later.\nSimilar to an MCC that’s set automatically, Stripe can override an MCC set manually if the connected account is flagged for review and we determine the MCC is inaccurate.\n#Merchant category code list\nThe following is a list of supported MCCs that you can use when creating connected accounts. You must contact Stripe to use a restricted MCC.\n Category | MCC \n --- | --- \n A/C, Refrigeration Repairacrefrigerationrepair | 7623 \n Accounting/Bookkeeping Servicesaccountingbookkeepingservices | 8931 \n Advertising Servicesadvertisingservices | 7311 \n Agricultural Cooperativeagriculturalcooperative | 0763 \n Airlines, Air Carriers Restrictedairlinesaircarriers | 4511 \n Airports, Flying Fieldsairportsflyingfields | 4582 \n Ambulance Services Restrictedambulanceservices | 4119 \n Amusement Parks/Carnivals Restrictedamusementparkscarnivals | 7996 \n Antique Reproductionsantiquereproductions | 5937 \n Antique Shopsantiqueshops | 5932 \n Aquariumsaquariums | 7998 \n Architectural/Surveying Servicesarchitecturalsurveyingservices | 8911 \n Art Dealers and Galleriesartdealersandgalleries | 5971 \n Artists Supply and Craft Shopsartistssupplyandcraftshops | 5970 \n Auto Body Repair Shopsautobodyrepairshops | 7531 \n Auto Paint Shopsautopaintshops | 7535 \n Auto Service Shopsautoserviceshops | 7538 \n Auto and Home Supply Storesautoandhomesupplystores | 5531 \n Automated Fuel Dispensersautomatedfueldispensers | 5542 \n Automobile Associationsautomobileassociations | 8675 \n Automotive Parts and Accessories Storesautomotivepartsandaccessoriesstores | 5533 \n Automotive Tire Storesautomotivetirestores | 5532 \n Bail and Bond Payments (payment to the surety for the bond, not the actual bond paid to the government agency) Restrictedbailandbondpayments | 9223 \n Bakeriesbakeries | 5462 \n Bands, Orchestrasbandsorchestras | 7929 \n Barber and Beauty Shopsbarberandbeautyshops | 7230 \n Betting/Casino Gambling Restrictedbettingcasinogambling | 7995 \n Bicycle Shopsbicycleshops | 5940 \n Billiard/Pool Establishmentsbilliardpoolestablishments | 7932 \n Boat Dealersboatdealers | 5551 \n Boat Rentals and Leasesboatrentalsandleases | 4457 \n Book Storesbookstores | 5942 \n Books, Periodicals, and Newspapersbooksperiodicalsandnewspapers | 5192 \n Bowling Alleysbowlingalleys | 7933 \n Bus Linesbuslines | 4131 \n Business/Secretarial Schoolsbusinesssecretarialschools | 8244 \n Buying/Shopping Servicesbuyingshoppingservices | 7278 \n Cable, Satellite, and Other Pay Television and Radiocablesatelliteandotherpaytelevisionandradio | 4899 \n Camera and Photographic Supply Storescameraandphotographicsupplystores | 5946 \n Candy, Nut, and Confectionery Storescandynutandconfectionerystores | 5441 \n Car Rental Agenciescarrentalagencies | 7512 \n Car Washescarwashes | 7542 \n Car and Truck Dealers (New & Used) Sales, Service, Repairs Parts and Leasingcarandtruckdealersnewused | 5511 \n Car and Truck Dealers (Used Only) Sales, Service, Repairs Parts and Leasingcarandtruckdealersusedonly | 5521 \n Carpentry Servicescarpentryservices | 1750 \n Carpet/Upholstery Cleaningcarpetupholsterycleaning | 7217 \n Catererscaterers | 5811 \n Charitable and Social Service Organizations - Fundraising Restrictedcharitableandsocialserviceorganizationsfundraising | 8398 \n Chemicals and Allied Products (Not Elsewhere Classified)chemicalsandalliedproducts | 5169 \n Child Care Serviceschildcareservices | 8351 \n Childrens and Infants Wear Storeschildrensandinfantswearstores | 5641 \n Chiropodists, Podiatrists Restrictedchiropodistspodiatrists | 8049 \n Chiropractors Restrictedchiropractors | 8041 \n Cigar Stores and Stands Restrictedcigarstoresandstands | 5993 \n Civic, Social, Fraternal Associationscivicsocialfraternalassociations | 8641 \n Cleaning and Maintenancecleaningandmaintenance | 7349 \n Clothing Rentalclothingrental | 7296 \n Colleges, Universitiescollegesuniversities | 8220 \n Commercial Equipment (Not Elsewhere Classified)commercialequipment | 5046 \n Commercial Footwearcommercialfootwear | 5139 \n Commercial Photography, Art and Graphicscommercialphotographyartandgraphics | 7333 \n Commuter Transport, Ferriescommutertransportandferries | 4111 \n Computer Network Servicescomputernetworkservices | 4816 \n Computer Programmingcomputerprogramming | 7372 \n Computer Repaircomputerrepair | 7379 \n Computer Software Storescomputersoftwarestores | 5734 \n Computers, Peripherals, and Softwarecomputersperipheralsandsoftware | 5045 \n Concrete Work Servicesconcreteworkservices | 1771 \n Construction Materials (Not Elsewhere Classified)constructionmaterials | 5039 \n Consulting, Public Relationsconsultingpublicrelations | 7392 \n Correspondence Schoolscorrespondenceschools | 8241 \n Cosmetic Storescosmeticstores | 5977 \n Counseling Services Restrictedcounselingservices | 7277 \n Country Clubscountryclubs | 7997 \n Courier Servicescourierservices | 4215 \n Court Costs, Including Alimony and Child Support - Courts of Law Restrictedcourtcosts | 9211 \n Credit Reporting Agenciescreditreportingagencies | 7321 \n Cruise Lines Restrictedcruiselines | 4411 \n Dairy Products Storesdairyproductsstores | 5451 \n Dance Hall, Studios, Schoolsdancehallstudiosschools | 7911 \n Dentists, Orthodontists Restricteddentistsorthodontists | 8021 \n Department Storesdepartmentstores | 5311 \n Detective Agenciesdetectiveagencies | 7393 \n Digital Goods Media – Books, Movies, Musicdigitalgoodsmedia | 5815 \n Digital Goods – Applications (Excludes Games)digitalgoodsapplications | 5817 \n Digital Goods – Gamesdigitalgoodsgames | 5816 \n Digital Goods – Large Digital Goods Merchantdigitalgoodslargevolume | 5818 \n Direct Marketing - Catalog Merchantdirectmarketingcatalogmerchant | 5964 \n Direct Marketing - Combination Catalog and Retail Merchantdirectmarketingcombinationcatalogandretailmerchant | 5965 \n Direct Marketing - Inbound Telemarketing Restricteddirectmarketinginboundtelemarketing | 5967 \n Direct Marketing - Insurance Servicesdirectmarketinginsuranceservices | 5960 \n Direct Marketing - Otherdirectmarketingother | 5969 \n Direct Marketing - Outbound Telemarketing Restricteddirectmarketingoutboundtelemarketing | 5966 \n Direct Marketing - Subscriptiondirectmarketingsubscription | 5968 \n Direct Marketing - Travel Restricteddirectmarketingtravel | 5962 \n Discount Storesdiscountstores | 5310 \n Doctors Restricteddoctors | 8011 \n Door-To-Door Sales Restricteddoortodoorsales | 5963 \n Drapery, Window Covering, and Upholstery Storesdraperywindowcoveringandupholsterystores | 5714 \n Drinking Placesdrinkingplaces | 5813 \n Drug Stores and Pharmacies Restricteddrugstoresandpharmacies | 5912 \n Drugs, Drug Proprietaries, and Druggist Sundries Restricteddrugsdrugproprietariesanddruggistsundries | 5122 \n Dry Cleanersdrycleaners | 7216 \n Durable Goods (Not Elsewhere Classified)durablegoods | 5099 \n Duty Free Storesdutyfreestores | 5309 \n Eating Places, Restaurantseatingplacesrestaurants | 5812 \n Educational Serviceseducationalservices | 8299 \n Electric Razor Storeselectricrazorstores | 5997 \n Electric Vehicle Chargingelectricvehiclecharging | 5552 \n Electrical Parts and Equipmentelectricalpartsandequipment | 5065 \n Electrical Serviceselectricalservices | 1731 \n Electronics Repair Shopselectronicsrepairshops | 7622 \n Electronics Storeselectronicsstores | 5732 \n Elementary, Secondary Schoolselementarysecondaryschools | 8211 \n Emergency Services (GCAS) (Visa use only)emergencyservicesgcasvisauseonly | 9702 \n Employment/Temp Agenciesemploymenttempagencies | 7361 \n Equipment Rentalequipmentrental | 7394 \n Exterminating Servicesexterminatingservices | 7342 \n Family Clothing Storesfamilyclothingstores | 5651 \n Fast Food Restaurantsfastfoodrestaurants | 5814 \n Financial Institutions Restrictedfinancialinstitutions | 6012 \n Fines - Government Administrative Entities Restrictedfinesgovernmentadministrativeentities | 9222 \n Fireplace, Fireplace Screens, and Accessories Storesfireplacefireplacescreensandaccessoriesstores | 5718 \n Floor Covering Storesfloorcoveringstores | 5713 \n Floristsflorists | 5992 \n Florists Supplies, Nursery Stock, and Flowersfloristssuppliesnurserystockandflowers | 5193 \n Freezer and Locker Meat Provisionersfreezerandlockermeatprovisioners | 5422 \n Fuel Dealers (Non Automotive)fueldealersnonautomotive | 5983 \n Funeral Services, Crematoriesfuneralservicescrematories | 7261 \n Furniture Repair, Refinishingfurniturerepairrefinishing | 7641 \n Furniture, Home Furnishings, and Equipment Stores, Except Appliancesfurniturehomefurnishingsandequipmentstoresexceptappliances | 5712 \n Furriers and Fur Shopsfurriersandfurshops | 5681 \n General Servicesgeneralservices | 1520 \n Gift, Card, Novelty, and Souvenir Shopsgiftcardnoveltyandsouvenirshops | 5947 \n Glass, Paint, and Wallpaper Storesglasspaintandwallpaperstores | 5231 \n Glassware, Crystal Storesglasswarecrystalstores | 5950 \n Golf Courses - Publicgolfcoursespublic | 7992 \n Government Licensed On-line Casinos (On-Line Gambling)(US Region only) Restrictedgovernmentlicensedonlinecasionsonlinegamblingusregiononly | 7801 \n Government Services (Not Elsewhere Classified) Restrictedgovernmentservices | 9399 \n Government-Licensed Horse/Dog Racing (US Region only) Restrictedgovernmentlicensedhorsedogracingusregiononly | 7802 \n Government-Owned Lotteries (Non-US region)governmentownedlotteriesnonusregion | 9406 \n Government-Owned Lotteries (US Region only) Restrictedgovernmentownedlotteriesusregiononly | 7800 \n Grocery Stores, Supermarketsgrocerystoressupermarkets | 5411 \n Hardware Storeshardwarestores | 5251 \n Hardware, Equipment, and Supplieshardwareequipmentandsupplies | 5072 \n Health and Beauty Spashealthandbeautyspas | 7298 \n Hearing Aids Sales and Supplies Restrictedhearingaidssalesandsupplies | 5975 \n Heating, Plumbing, A/Cheatingplumbingac | 1711 \n Hobby, Toy, and Game Shopshobbytoyandgameshops | 5945 \n Home Supply Warehouse Storeshomesupplywarehousestores | 5200 \n Hospitals Restrictedhospitals | 8062 \n Hotels, Motels, and Resortshotelsmotelsandresorts | 7011 \n Household Appliance Storeshouseholdappliancestores | 5722 \n Industrial Supplies (Not Elsewhere Classified)industrialsupplies | 5085 \n Information Retrieval Servicesinformationretrievalservices | 7375 \n Insurance Underwriting, Premiums Restrictedinsuranceunderwritingpremiums | 6300 \n Intra-Company Purchasesintracompanypurchases | 9950 \n Jewelry Stores, Watches, Clocks, and Silverware Storesjewelrystoreswatchesclocksandsilverwarestores | 5944 \n Landscaping Serviceslandscapingservices | 0780 \n Laundrieslaundries | 7211 \n Laundry, Cleaning Serviceslaundrycleaningservices | 7210 \n Legal Services, Attorneyslegalservicesattorneys | 8111 \n Luggage and Leather Goods Storesluggageandleathergoodsstores | 5948 \n Lumber, Building Materials Storeslumberbuildingmaterialsstores | 5211 \n Marinas, Service and Suppliesmarinasserviceandsupplies | 4468 \n Marketplacesmarketplaces | 5262 \n Masonry, Stonework, and Plastermasonrystoneworkandplaster | 1740 \n Massage Parlorsmassageparlors | 7297 \n Medical Services Restrictedmedicalservices | 8099 \n Medical and Dental Labs Restrictedmedicalanddentallabs | 8071 \n Medical, Dental, Ophthalmic, and Hospital Equipment and Supplies Restrictedmedicaldentalophthalmicandhospitalequipmentandsupplies | 5047 \n Membership Organizationsmembershiporganizations | 8699 \n Mens and Boys Clothing and Accessories Storesmensandboysclothingandaccessoriesstores | 5611 \n Mens, Womens Clothing Storesmenswomensclothingstores | 5691 \n Metal Service Centersmetalservicecenters | 5051 \n Miscellaneous Apparel and Accessory Shopsmiscellaneousapparelandaccessoryshops | 5699 \n Miscellaneous Auto Dealersmiscellaneousautodealers | 5599 \n Miscellaneous Business Servicesmiscellaneousbusinessservices | 7399 \n Miscellaneous Food Stores - Convenience Stores and Specialty Marketsmiscellaneousfoodstores | 5499 \n Miscellaneous General Merchandisemiscellaneousgeneralmerchandise | 5399 \n Miscellaneous General Servicesmiscellaneousgeneralservices | 7299 \n Miscellaneous Home Furnishing Specialty Storesmiscellaneoushomefurnishingspecialtystores | 5719 \n Miscellaneous Publishing and Printingmiscellaneouspublishingandprinting | 2741 \n Miscellaneous Recreation Servicesmiscellaneousrecreationservices | 7999 \n Miscellaneous Repair Shopsmiscellaneousrepairshops | 7699 \n Miscellaneous Specialty Retailmiscellaneousspecialtyretail | 5999 \n Mobile Home Dealersmobilehomedealers | 5271 \n Motion Picture Theatersmotionpicturetheaters | 7832 \n Motor Freight Carriers and Trucking - Local and Long Distance, Moving and Storage Companies, and Local Delivery Servicesmotorfreightcarriersandtrucking | 4214 \n Motor Homes Dealersmotorhomesdealers | 5592 \n Motor Vehicle Supplies and New Partsmotorvehiclesuppliesandnewparts | 5013 \n Motorcycle Shops and Dealersmotorcycleshopsanddealers | 5571 \n Motorcycle Shops, Dealersmotorcycleshopsdealers | 5561 \n Music Stores-Musical Instruments, Pianos, and Sheet Musicmusicstoresmusicalinstrumentspianosandsheetmusic | 5733 \n News Dealers and Newsstandsnewsdealersandnewsstands | 5994 \n Non-FI, Money Orders Restrictednonfimoneyorders | 6051 \n Non-FI, Stored Value Card Purchase/Load Restrictednonfistoredvaluecardpurchaseload | 6540 \n Nondurable Goods (Not Elsewhere Classified)nondurablegoods | 5199 \n Nurseries, Lawn and Garden Supply Storesnurserieslawnandgardensupplystores | 5261 \n Nursing/Personal Care Restrictednursingpersonalcare | 8050 \n Office and Commercial Furnitureofficeandcommercialfurniture | 5021 \n Opticians, Eyeglasses Restrictedopticianseyeglasses | 8043 \n Optometrists, Ophthalmologist Restrictedoptometristsophthalmologist | 8042 \n Orthopedic Goods - Prosthetic Devices Restrictedorthopedicgoodsprostheticdevices | 5976 \n Osteopaths Restrictedosteopaths | 8031 \n Package Stores-Beer, Wine, and Liquorpackagestoresbeerwineandliquor | 5921 \n Paints, Varnishes, and Suppliespaintsvarnishesandsupplies | 5198 \n Parking Lots, Garagesparkinglotsgarages | 7523 \n Passenger Railwayspassengerrailways | 4112 \n Pawn Shopspawnshops | 5933 \n Pet Shops, Pet Food, and Suppliespetshopspetfoodandsupplies | 5995 \n Petroleum and Petroleum Productspetroleumandpetroleumproducts | 5172 \n Photo Developingphotodeveloping | 7395 \n Photographic Studiosphotographicstudios | 7221 \n Photographic, Photocopy, Microfilm Equipment, and Suppliesphotographicphotocopymicrofilmequipmentandsupplies | 5044 \n Picture/Video Productionpicturevideoproduction | 7829 \n Piece Goods, Notions, and Other Dry Goodspiecegoodsnotionsandotherdrygoods | 5131 \n Plumbing, Heating Equipment, and Suppliesplumbingheatingequipmentandsupplies | 5074 \n Political Organizations Restrictedpoliticalorganizations | 8651 \n Postal Services - Government Only Restrictedpostalservicesgovernmentonly | 9402 \n Precious Stones and Metals, Watches and Jewelrypreciousstonesandmetalswatchesandjewelry | 5094 \n Professional Servicesprofessionalservices | 8999 \n Public Warehousing and Storage - Farm Products, Refrigerated Goods, Household Goods, and Storagepublicwarehousingandstorage | 4225 \n Quick Copy, Repro, and Blueprintquickcopyreproandblueprint | 7338 \n Railroadsrailroads | 4011 \n Real Estate Agents and Managers - Rentalsrealestateagentsandmanagersrentals | 6513 \n Record Storesrecordstores | 5735 \n Recreational Vehicle Rentalsrecreationalvehiclerentals | 7519 \n Religious Goods Storesreligiousgoodsstores | 5973 \n Religious Organizations Restrictedreligiousorganizations | 8661 \n Roofing/Siding, Sheet Metalroofingsidingsheetmetal | 1761 \n Secretarial Support Servicessecretarialsupportservices | 7339 \n Security Brokers/Dealers Restrictedsecuritybrokersdealers | 6211 \n Service Stationsservicestations | 5541 \n Sewing, Needlework, Fabric, and Piece Goods Storessewingneedleworkfabricandpiecegoodsstores | 5949 \n Shoe Repair/Hat Cleaningshoerepairhatcleaning | 7251 \n Shoe Storesshoestores | 5661 \n Small Appliance Repairsmallappliancerepair | 7629 \n Snowmobile Dealerssnowmobiledealers | 5598 \n Special Trade Servicesspecialtradeservices | 1799 \n Specialty Cleaningspecialtycleaning | 2842 \n Sporting Goods Storessportinggoodsstores | 5941 \n Sporting/Recreation Campssportingrecreationcamps | 7032 \n Sports Clubs/Fieldssportsclubsfields | 7941 \n Sports and Riding Apparel Storessportsandridingapparelstores | 5655 \n Stamp and Coin Storesstampandcoinstores | 5972 \n Stationary, Office Supplies, Printing and Writing Paperstationaryofficesuppliesprintingandwritingpaper | 5111 \n Stationery Stores, Office, and School Supply Storesstationerystoresofficeandschoolsupplystores | 5943 \n Swimming Pools Salesswimmingpoolssales | 5996 \n TUI Travel - Germanytuitravelgermany | 4723 \n Tailors, Alterationstailorsalterations | 5697 \n Tax Payments - Government Agencies Restrictedtaxpaymentsgovernmentagencies | 9311 \n Tax Preparation Servicestaxpreparationservices | 7276 \n Taxicabs/Limousinestaxicabslimousines | 4121 \n Telecommunication Equipment and Telephone Salestelecommunicationequipmentandtelephonesales | 4812 \n Telecommunication Services Restrictedtelecommunicationservices | 4814 \n Telegraph Servicestelegraphservices | 4821 \n Tent and Awning Shopstentandawningshops | 5998 \n Testing Laboratoriestestinglaboratories | 8734 \n Theatrical Ticket Agenciestheatricalticketagencies | 7922 \n Timeshares Restrictedtimeshares | 7012 \n Tire Retreading and Repairtireretreadingandrepair | 7534 \n Tolls/Bridge Feestollsbridgefees | 4784 \n Tourist Attractions and Exhibitstouristattractionsandexhibits | 7991 \n Towing Servicestowingservices | 7549 \n Trailer Parks, Campgroundstrailerparkscampgrounds | 7033 \n Transportation Services (Not Elsewhere Classified)transportationservices | 4789 \n Travel Agencies, Tour Operatorstravelagenciestouroperators | 4722 \n Truck/Utility Trailer Rentalstruckutilitytrailerrentals | 7513 \n Typesetting, Plate Making, and Related Servicestypesettingplatemakingandrelatedservices | 2791 \n Typewriter Storestypewriterstores | 5978 \n U.S. Federal Government Agencies or Departments Restrictedusfederalgovernmentagenciesordepartments | 9405 \n Uniforms, Commercial Clothinguniformscommercialclothing | 5137 \n Used Merchandise and Secondhand Storesusedmerchandiseandsecondhandstores | 5931 \n Utilitiesutilities | 4900 \n Variety Storesvarietystores | 5331 \n Veterinary Servicesveterinaryservices | 0742 \n Video Amusement Game Suppliesvideoamusementgamesupplies | 7993 \n Video Game Arcadesvideogamearcades | 7994 \n Video Tape Rental Storesvideotaperentalstores | 7841 \n Vocational/Trade Schoolsvocationaltradeschools | 8249 \n Watch/Jewelry Repairwatchjewelryrepair | 7631 \n Welding Repairweldingrepair | 7692 \n Wholesale Clubswholesaleclubs | 5300 \n Wig and Toupee Storeswigandtoupeestores | 5698 \n Wires, Money Orders Restrictedwiresmoneyorders | 4829 \n Womens Accessory and Specialty Shopswomensaccessoryandspecialtyshops | 5631 \n Womens Ready-To-Wear Storeswomensreadytowearstores | 5621 \n Wrecking and Salvage Yardswreckingandsalvageyards | 5935 \n`acrefrigerationrepair``accountingbookkeepingservices``advertisingservices``agriculturalcooperative``airlinesaircarriers``airportsflyingfields``ambulanceservices``amusementparkscarnivals``antiquereproductions``antiqueshops``aquariums``architecturalsurveyingservices``artdealersandgalleries``artistssupplyandcraftshops``autobodyrepairshops``autopaintshops``autoserviceshops``autoandhomesupplystores``automatedfueldispensers``automobileassociations``automotivepartsandaccessoriesstores``automotivetirestores``bailandbondpayments``bakeries``bandsorchestras``barberandbeautyshops``bettingcasinogambling``bicycleshops``billiardpoolestablishments``boatdealers``boatrentalsandleases``bookstores``booksperiodicalsandnewspapers``bowlingalleys``buslines``businesssecretarialschools``buyingshoppingservices``cablesatelliteandotherpaytelevisionandradio``cameraandphotographicsupplystores``candynutandconfectionerystores``carrentalagencies``carwashes``carandtruckdealersnewused``carandtruckdealersusedonly``carpentryservices``carpetupholsterycleaning``caterers``charitableandsocialserviceorganizationsfundraising``chemicalsandalliedproducts``childcareservices``childrensandinfantswearstores``chiropodistspodiatrists``chiropractors``cigarstoresandstands``civicsocialfraternalassociations``cleaningandmaintenance``clothingrental``collegesuniversities``commercialequipment``commercialfootwear``commercialphotographyartandgraphics``commutertransportandferries``computernetworkservices``computerprogramming``computerrepair``computersoftwarestores``computersperipheralsandsoftware``concreteworkservices``constructionmaterials``consultingpublicrelations``correspondenceschools``cosmeticstores``counselingservices``countryclubs``courierservices``courtcosts``creditreportingagencies``cruiselines``dairyproductsstores``dancehallstudiosschools``dentistsorthodontists``departmentstores``detectiveagencies``digitalgoodsmedia``digitalgoodsapplications``digitalgoodsgames``digitalgoodslargevolume``directmarketingcatalogmerchant``directmarketingcombinationcatalogandretailmerchant``directmarketinginboundtelemarketing``directmarketinginsuranceservices``directmarketingother``directmarketingoutboundtelemarketing``directmarketingsubscription``directmarketingtravel``discountstores``doctors``doortodoorsales``draperywindowcoveringandupholsterystores``drinkingplaces``drugstoresandpharmacies``drugsdrugproprietariesanddruggistsundries``drycleaners``durablegoods``dutyfreestores``eatingplacesrestaurants``educationalservices``electricrazorstores``electricvehiclecharging``electricalpartsandequipment``electricalservices``electronicsrepairshops``electronicsstores``elementarysecondaryschools``emergencyservicesgcasvisauseonly``employmenttempagencies``equipmentrental``exterminatingservices``familyclothingstores``fastfoodrestaurants``financialinstitutions``finesgovernmentadministrativeentities``fireplacefireplacescreensandaccessoriesstores``floorcoveringstores``florists``floristssuppliesnurserystockandflowers``freezerandlockermeatprovisioners``fueldealersnonautomotive``funeralservicescrematories``furniturerepairrefinishing``furniturehomefurnishingsandequipmentstoresexceptappliances``furriersandfurshops``generalservices``giftcardnoveltyandsouvenirshops``glasspaintandwallpaperstores``glasswarecrystalstores``golfcoursespublic``governmentlicensedonlinecasionsonlinegamblingusregiononly``governmentservices``governmentlicensedhorsedogracingusregiononly``governmentownedlotteriesnonusregion``governmentownedlotteriesusregiononly``grocerystoressupermarkets``hardwarestores``hardwareequipmentandsupplies``healthandbeautyspas``hearingaidssalesandsupplies``heatingplumbingac``hobbytoyandgameshops``homesupplywarehousestores``hospitals``hotelsmotelsandresorts``householdappliancestores``industrialsupplies``informationretrievalservices``insuranceunderwritingpremiums``intracompanypurchases``jewelrystoreswatchesclocksandsilverwarestores``landscapingservices``laundries``laundrycleaningservices``legalservicesattorneys``luggageandleathergoodsstores``lumberbuildingmaterialsstores``marinasserviceandsupplies``marketplaces``masonrystoneworkandplaster``massageparlors``medicalservices``medicalanddentallabs``medicaldentalophthalmicandhospitalequipmentandsupplies``membershiporganizations``mensandboysclothingandaccessoriesstores``menswomensclothingstores``metalservicecenters``miscellaneousapparelandaccessoryshops``miscellaneousautodealers``miscellaneousbusinessservices``miscellaneousfoodstores``miscellaneousgeneralmerchandise``miscellaneousgeneralservices``miscellaneoushomefurnishingspecialtystores``miscellaneouspublishingandprinting``miscellaneousrecreationservices``miscellaneousrepairshops``miscellaneousspecialtyretail``mobilehomedealers``motionpicturetheaters``motorfreightcarriersandtrucking``motorhomesdealers``motorvehiclesuppliesandnewparts``motorcycleshopsanddealers``motorcycleshopsdealers``musicstoresmusicalinstrumentspianosandsheetmusic``newsdealersandnewsstands``nonfimoneyorders``nonfistoredvaluecardpurchaseload``nondurablegoods``nurserieslawnandgardensupplystores``nursingpersonalcare``officeandcommercialfurniture``opticianseyeglasses``optometristsophthalmologist``orthopedicgoodsprostheticdevices``osteopaths``packagestoresbeerwineandliquor``paintsvarnishesandsupplies``parkinglotsgarages``passengerrailways``pawnshops``petshopspetfoodandsupplies``petroleumandpetroleumproducts``photodeveloping``photographicstudios``photographicphotocopymicrofilmequipmentandsupplies``picturevideoproduction``piecegoodsnotionsandotherdrygoods``plumbingheatingequipmentandsupplies``politicalorganizations``postalservicesgovernmentonly``preciousstonesandmetalswatchesandjewelry``professionalservices``publicwarehousingandstorage``quickcopyreproandblueprint``railroads``realestateagentsandmanagersrentals``recordstores``recreationalvehiclerentals``religiousgoodsstores``religiousorganizations``roofingsidingsheetmetal``secretarialsupportservices``securitybrokersdealers``servicestations``sewingneedleworkfabricandpiecegoodsstores``shoerepairhatcleaning``shoestores``smallappliancerepair``snowmobiledealers``specialtradeservices``specialtycleaning``sportinggoodsstores``sportingrecreationcamps``sportsclubsfields``sportsandridingapparelstores``stampandcoinstores``stationaryofficesuppliesprintingandwritingpaper``stationerystoresofficeandschoolsupplystores``swimmingpoolssales``tuitravelgermany``tailorsalterations``taxpaymentsgovernmentagencies``taxpreparationservices``taxicabslimousines``telecommunicationequipmentandtelephonesales``telecommunicationservices``telegraphservices``tentandawningshops``testinglaboratories``theatricalticketagencies``timeshares``tireretreadingandrepair``tollsbridgefees``touristattractionsandexhibits``towingservices``trailerparkscampgrounds``transportationservices``travelagenciestouroperators``truckutilitytrailerrentals``typesettingplatemakingandrelatedservices``typewriterstores``usfederalgovernmentagenciesordepartments``uniformscommercialclothing``usedmerchandiseandsecondhandstores``utilities``varietystores``veterinaryservices``videoamusementgamesupplies``videogamearcades``videotaperentalstores``vocationaltradeschools``watchjewelryrepair``weldingrepair``wholesaleclubs``wigandtoupeestores``wiresmoneyorders``womensaccessoryandspecialtyshops``womensreadytowearstores``wreckingandsalvageyards`"}, {"path": "connect\\split-tax-forms.md", "url": "https://docs.stripe.com/connect/split-tax-forms", "content": "#Split tax forms | Stripe Documentation\nURL: https://docs.stripe.com/connect/split-tax-forms\n\n#Split tax forms\n#Split your tax forms for your connected accounts after a change of ownership occurs during the tax year.\nSplitting a 1099 tax form means that you distribute the amount initially reported on a single 1099 form across two 1099 forms. You can split a 1099 form after a change of ownership occurs during the tax year for the legal entity receiving the form. Splitting a 1099 form assigns a portion of the reported amount to the legal entity before the change and assigns the remaining amount to the legal entity after the change.\nChanges to the legal entity of your connected accounts may include these examples:\n• Change of ownership—The owner of the connected account sells the business to a new entity.\n• Change of legal entity type—The owner of the connected account changes the business type from individual to company, and wants to file for both entities.\n• Change of Tax Identification Number (TIN)—A sole proprietorship that uses the individual’s social security number (SSN) as the business TIN changes it to an employer identification number (EIN), and wants to file for both entities.\n#Note\nChanging the TIN doesn’t necessarily require a split (for example, if the change was due to an oversight). You’ll need to determine whether changing the TIN requires a split, an update, or a correction. Work with your tax advisor to ensure you understand the split requirements specific to your business.\n#Create a split\nYou can split a tax form beginning January 4th of the year following that form’s tax year. For example, you can split a 2024 tax form starting January 4th, 2025. To create a split, select the form in the Dashboard and then click Split from the menu on the detail pane. You can filter by the account ID to identify the form of the connected account you want to create a split for.\n#Note\nYou can’t split a form after you manually edit the numerical data. To split one of these forms, you must revert the numerical data on the form to the Stripe-supplied values by clicking Undo edits on the Totals section. If the split forms are drafts, you can then update the draft form prior to filing. If you have already filed the original form, you can then update form totals on the split forms with a correction.\nIn the Split 1099 tax form, provide the date of the legal entity change and then click Split.\nYou’ll see two forms for the connected account:\n• Form one includes the amounts from January 1 to the day before the specified split date.\n• Form two includes the amounts from the specified split date to December 31.\nIf the legal entity is the same on both forms, they’re marked Needs Attention. To correct this, you can update the form to replace the values for relevant payees.\n`Needs Attention`#### Note\nYou have to update the identity information on the forms (name, address, TIN) correctly, so that it isn’t the same as what it was before the split. You are responsible for marking the right identity information on each of the split forms.\nAfter you update the form so that the payee information is different for each form, the form status changes to Ready. Click File to send both forms to the IRS.\n`Ready`#### Note\nSplit forms can only be delivered using postal mail. Paperless deliveries using the Express app is not currently supported."}, {"path": "connect\\stablecoin-payouts.md", "url": "https://docs.stripe.com/connect/stablecoin-payouts", "content": "#Stablecoin payouts for Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/stablecoin-payouts\n\n#Stablecoin payouts for ConnectPrivate preview\n#Enable stablecoin payouts on your platform.\n#Private preview\nThe Stablecoin Payouts feature is currently limited to private preview users. If you’re interested in trying it out, email us.\nStablecoin payouts let your platform pay out in stablecoins, starting with USDC. You can use stablecoin payouts with your existing Connect integration to avoid managing stablecoins yourself. Your platform’s funds can remain in fiat currency, and Stripe handles converting to stablecoins and paying it out.\n#How it works\nWhen you opt in to stablecoin payouts and provide your users access to the Express Dashboard, your users can link a crypto wallet with their account and set their default currency to USDC. Your users can link a crypto wallet using the Express Dashboard.\nWhen a user links a crypto wallet, they immediately see a new USDC balance on their connected account. The USDC balance works like any other local currency balance. You can transfer funds into the balance and the funds are paid out to their linked crypto wallet instead of their bank account. When you create Transfers in USD, they automatically convert to the preferred currency of your recipients. This simplifies your integration and enables you to have a unified integration across fiat and stablecoin payouts.\n#Considerations\n• US platform activation: Your platform must be in the US and activated. You can activate it by registering your platform, activating your account, and completing the platform profile.\n• Individual recipients: Recipients paid in stablecoins must be individuals or sole proprietors. Paying companies and non-profits in stablecoins isn’t currently supported.\n• Express Dashboard access: To pay an individual in stablecoins, create a connected account for them with access to the Express Dashboard. They can link a crypto wallet and choose their preferred currency in this Dashboard.\n• Pay with the Transfers API: You must use the Transfers API within your integration to pay in stablecoins. Transfers to connected accounts with linked crypto wallets are converted from fiat to USDC, enabling you to pay in USDC while your platform balance stays in fiat. If you haven’t built an integration yet, you can pay in stablecoins using a no-code or programmatic integration.\n#Supported countries\n#Onboarding\nBefore you can enable Stablecoin Payouts:\n# Make sure your Stripe account has been set up as a Connect platform.\n# Email us to gain access to this preview feature. Include your Stripe account ID in the email.\n# After you hear back from us, which can take around two business days, request the feature through the Dashboard.\n# Complete additional account requirements, filling out the due diligence questionnaire on the Account status page.\n# After we review and approve your information, Stablecoin Payouts becomes available in your Payment Method settings.\nMake sure your Stripe account has been set up as a Connect platform.\nEmail us to gain access to this preview feature. Include your Stripe account ID in the email.\nAfter you hear back from us, which can take around two business days, request the feature through the Dashboard.\nComplete additional account requirements, filling out the due diligence questionnaire on the Account status page.\nAfter we review and approve your information, Stablecoin Payouts becomes available in your Payment Method settings."}, {"path": "connect\\standard-accounts.md", "url": "https://docs.stripe.com/connect/standard-accounts", "content": "#Using Connect with Standard connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/standard-accounts\n\n#Using Connect with Standard connected accounts\n#Use Standard connected accounts to get started using Connect right away, and let Stripe handle the majority of the connected account experience.\nA Standard connected account is a conventional Stripe account where your connected account has a relationship with Stripe, is able to log in to the Dashboard, and can process charges on their own.\nStripe’s sample integration, Kavholm, shows you how to use Connect Onboarding for a seamless user onboarding experience.\n#Get started\nIf you’re new to Connect, start with a guide to use Standard accounts to enable other businesses to accept payments directly.\n#How to use Connect Onboarding for Standard accounts\n# Go to your Connect settings page to customize the visual appearance of the form with the name, color, and icon of your brand. Connect Onboarding requires this information.\n# Use the /v1/accounts API to create a new account and get the account ID. You can prefill information on the account object for the user before you generate the account link. You must pass the following parameter:type = standardNoteAfter you’ve created the new account, check to see that the account displays in the Dashboard.\n# Call the Account Links API to create a link for the account to onboard with.\n# In the onboarding flow for your own platform, redirect your user to the url returned by Account Links.\n# Handle additional account states, redirecting your account to the Connect Onboarding flow if necessary.\n# Optional: You can add additional procedures, such as Tax or Climate, to the Connect Onboarding flow through the Connect onboarding options in the Dashboard.\nGo to your Connect settings page to customize the visual appearance of the form with the name, color, and icon of your brand. Connect Onboarding requires this information.\nUse the /v1/accounts API to create a new account and get the account ID. You can prefill information on the account object for the user before you generate the account link. You must pass the following parameter:\n`/v1/accounts`- type = standard\n`type``standard`#### Note\nAfter you’ve created the new account, check to see that the account displays in the Dashboard.\nCall the Account Links API to create a link for the account to onboard with.\nIn the onboarding flow for your own platform, redirect your user to the url returned by Account Links.\n`url`Handle additional account states, redirecting your account to the Connect Onboarding flow if necessary.\nOptional: You can add additional procedures, such as Tax or Climate, to the Connect Onboarding flow through the Connect onboarding options in the Dashboard.\n#Create a Standard account and prefill information\nUse the Create Account API to create a connected account with type set to standard. You can prefill any information, but at a minimum, you must specify the type. The country of the account defaults to the same country as your platform, and the account confirms the selection during onboarding. If you know what capabilities the account needs, you can request them when you create it.\n`type``standard``type`#### Note\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as address and websiteurl, see the Create Account API reference.\n`address``websiteurl`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=standard\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d type=standard`If you’ve already collected information for your connected accounts, you can prefill that information on the Account object. You can prefill any account information, including personal and business information, external account information, and so on.\n`Account`Connect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the Connect service agreement.\nWhen testing your integration, prefill account information using test data.\n#Create an account link\nYou can create an account link by calling the Account Links API with the following parameters:\n• account - use the account ID returned by the API from the previous step\n• refreshurl\n• returnurl\n• type = accountonboarding\n`account``refreshurl``returnurl``type``accountonboarding`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding`## Redirect your user to the account link URL\nThe response to your Account Links request includes a value for the key url. Redirect to this link to send your user into the flow. You can only use URLs from the account links once because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. After you create an account link on a Standard account, you won’t be able to read or write Know Your Customer (KYC) information. Prefill any KYC information before creating the first account link.\n`url`#### Security tip\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n#Handle the user returning to your platform\nConnect Onboarding requires you to pass both a returnurl and refreshurl to handle all cases where you redirect the user to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n`returnurl``refreshurl`#### Note\nYou can use HTTP for your returnurl and refreshurl while in test mode (for example, to test with localhost), but you can only use HTTPS in live mode. Be sure to swap testing URLs for HTTPS URLs before going live.\n`returnurl``refreshurl`#### returnurl\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\nNo state is passed through this URL. After redirecting a user to your returnurl, check the state of the detailssubmitted parameter on their account by doing either of the following:\n`returnurl``detailssubmitted`- Listening to account.updated webhooks\n• Calling the Accounts API and inspecting the returned object\n`account.updated`#### refreshurl\nYour user redirects to the refreshurl in these cases:\n`refreshurl`- The link expired (a few minutes went by since the link was created)\n• The user already visited the link (they refreshed the page, or clicked back or forward in the browser)\n• Your platform is no longer able to access the account\n• The account has been rejected\nYour refreshurl triggers a method on your server to call Account Links again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.\n`refreshurl`## Handle users that have not completed onboarding\nA user that is redirected to your returnurl might not have completed the onboarding process. Use the /v1/accounts endpoint to retrieve the user’s account and check for chargesenabled. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the detailssubmitted parameter on their account to see if they’ve completed the onboarding process.\n`returnurl``/v1/accounts``chargesenabled``detailssubmitted`## OptionalEnable Stripe Tax obligation monitoring\n#See also\n• Creating charges\n• Authentication\n• OAuth reference"}, {"path": "connect\\statement-descriptors.md", "url": "https://docs.stripe.com/connect/statement-descriptors", "content": "#Set statement descriptors with Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/statement-descriptors\n\n#Set statement descriptors with Connect\n#Learn how statement descriptors work for charges with Connect.\nStatement descriptors explain charges or payments on bank statements and include information that banks and card networks require to help customers understand their statements. Familiarize yourself with the requirements for statement descriptors.\n#Set the static component for a connected account\nStatement descriptors contain a static component and, optionally, a dynamic part. The static component refers to either:\n• The entire statement descriptor is static (settings.payments.statementdescriptor).\n• The first half of the statement descriptor is static (settings.cardpayments.statementdescriptorprefix) and the second half is dynamically set from the payment.\nYour platform and connected accounts with the cardpayments capability must have a statement descriptor and, optionally, a statement descriptor prefix. Both values must be at least 5 characters in length. For a given payment, the statement descriptor of the platform or the connected account applies depending on the charge type.\n`cardpayments`The statement descriptor is set in one of the following ways:\n• With a create or update account API call\n• During Stripe-hosted or embedded onboarding\n• Through the full Stripe Dashboard or Express Dashboard\nConnected accounts with access to a Stripe-hosted dashboard can update their own statement descriptor settings.\nYou can prefill an account’s statement descriptor and prefix when you call the create account endpoint. During Stripe-hosted or embedded onboarding, If settings.payments.statementdescriptor or settings.cardpayments.statementdescriptorprefix isn’t set, Stripe sets them based on information provided about the account during onboarding. If sufficient information isn’t available, Stripe prompts connected accounts to set their own statement descriptors during onboarding.\n`settings.payments.statementdescriptor``settings.cardpayments.statementdescriptorprefix`After onboarding an account that doesn’t have access to the full Stripe Dashboard, you can update its settings.payments.statementdescriptor and settings.cardpayments.statementdescriptorprefix by calling the update account endpoint.\n`settings.payments.statementdescriptor``settings.cardpayments.statementdescriptorprefix`For accounts where the platform handles onboarding, you must set their statement descriptor.\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d businesstype=company \\\n  -d \"businessprofile[name]\"=\"Runners Club\" \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[payments][statementdescriptor]\"=\"RUNNERS CLUB\"\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d businesstype=company \\\n  -d \"businessprofile[name]\"=\"Runners Club\" \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[payments][statementdescriptor]\"=\"RUNNERS CLUB\"`As of API version 2023-10-16, there is new logic around updating statement descriptors.\n• If you update an account’s businessprofile.name, businessprofile.url, or the name of the company or individual and the existing statement descriptor is based on lower precedence data, Stripe automatically resets the statement descriptor to match the higher precedence value. For example, if the statement descriptor is automatically set based on the URL, then you set or update  businessprofile.name, Stripe resets the statement descriptor to match the business profile name. If the statement descriptor is automatically set based on businessprofile.name, and you set or update the name of the company or individual, the statement descriptor doesn’t reset because businessprofile.name has higher precedence. The precedence order is businessprofile.name, businessprofile.url, then the name of the company or individual.\n• Any update to an account’s full statement descriptor causes Stripe to automatically set the statement descriptor prefix to a shortened version of the updated statement descriptor, even if the previous prefix is manually set.\n`businessprofile.name``businessprofile.url``businessprofile.name``businessprofile.name``businessprofile.name``businessprofile.name``businessprofile.url`## Statement descriptor usage\nThe full statement descriptor is provided to the bank or card network processing the payment. Only the first 22 characters of the full statement descriptor are sent for card payments.\nThe customer’s statement uses the platform account’s static component for the following charge types:\n• Destination charges without onbehalfof\n• Separate charges and transfers without onbehalfof\n`onbehalfof``onbehalfof`The customer’s statement uses the connected account’s static component for the following charge types:\n• Direct charges\n• Destination charges with onbehalfof\n• Separate charges and transfers with onbehalfof\n`onbehalfof``onbehalfof`Using the static component from a connected account requires the account to have the cardpayments capability.\n#Caution\nFor API versions 2019-02-19 and later, the statementdescriptor parameter of /v1/charges is treated as the dynamic component, and is equivalent to providing statementdescriptorsuffix.\n`2019-02-19``statementdescriptor``/v1/charges``statementdescriptorsuffix`If both statementdescriptorsuffix and statementdescriptor are provided, only statementdescriptorsuffix is used.\n`statementdescriptorsuffix``statementdescriptor``statementdescriptorsuffix`For API versions prior to 2019-02-19, the statement descriptor parameters on /v1/charges are ignored and the platform’s static statement descriptor is used.\n`2019-02-19``/v1/charges`Along with a statement descriptor, additional information about the business is sent to display on the customer’s statement (for example, address, email, phone, and URL). The additional information defaults to the support properties of the account’s businessprofile. If a support field isn’t provided, the platform support field is used. If the platform support field isn’t available, the account’s identity information is provided instead.\n#onbehalfof behaviors\nFor charges with onbehalfof set, statement descriptor and business information are first looked up from the specified account. If that information isn’t set, the platform’s information is used.\n`onbehalfof`- If the charge has a dynamic component, the connected account’s settings.cardpayments.statementdescriptorprefix static component is used. If the connected account doesn’t have a statement descriptor prefix set, the platform’s statement descriptor prefix is used instead.\n• If the connected account’s business profile information isn’t set, the platform’s information is used instead (first the platform’s business profile, then the platform’s identity information). For example, if the connected account doesn’t have a supportphone set, the platform’s supportphone or identity phone number is provided.\n`supportphone``supportphone`If you use a dynamic suffix on a charge that uses the connected account’s static descriptor, we recommend setting a prefix to on the connected account so the complete statement descriptor appears as intended.\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[cardpayments][statementdescriptorprefix]\"=RUNCLUB\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=US \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[cardpayments][statementdescriptorprefix]\"=RUNCLUB`The static prefix must contain between 2 and 10 characters, inclusive. Card networks receive only the first 22 characters (including the  symbol and the space that concatenates the static prefix and dynamic suffix) of the complete statement descriptor.\n``Set the statementdescriptor and statementdescriptorprefix for flexibility in setting statement descriptors on charges.\n`statementdescriptor``statementdescriptorprefix`If the statement descriptor is set on card charges and no prefix is set, Stripe truncates the account statement descriptor as needed to set the prefix value.\n#Set a dynamic suffix for connected account charges\nDynamic suffixes are supported only for card charges by using the statementdescriptorsuffix parameter. You can read more about dynamic suffixes or see the concatenated statement descriptors (prefix suffix) in the Dashboard.\n`statementdescriptorsuffix`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=1000 \\\n  -d currency=usd \\\n  -d \"paymentmethodtypes[]\"=card \\\n  -d statementdescriptorsuffix=\"Custom suffix\"\n`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d amount=1000 \\\n  -d currency=usd \\\n  -d \"paymentmethodtypes[]\"=card \\\n  -d statementdescriptorsuffix=\"Custom suffix\"`## Set Japanese statement descriptors\nWe recommend setting the static components of kanji and kana statement descriptors for Japanese connected accounts. You can set all descriptors and their corresponding prefixes when creating a Japanese connected account:\ncurl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=JP \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[cardpayments][statementdescriptorprefix]\"=\"example prefix\" \\\n  -d \"settings[cardpayments][statementdescriptorprefixkanji]\"=\"漢字プリフィックス\" \\\n  -d \"settings[cardpayments][statementdescriptorprefixkana]\"=\"カナプリフィックス\" \\\n  -d \"settings[payments][statementdescriptor]\"=\"example descriptor\" \\\n  -d \"settings[payments][statementdescriptorkanji]\"=\"漢字明細\" \\\n  -d \"settings[payments][statementdescriptorkana]\"=\"カナメイサイ\"\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d country=JP \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d \"settings[cardpayments][statementdescriptorprefix]\"=\"example prefix\" \\\n  -d \"settings[cardpayments][statementdescriptorprefixkanji]\"=\"漢字プリフィックス\" \\\n  -d \"settings[cardpayments][statementdescriptorprefixkana]\"=\"カナプリフィックス\" \\\n  -d \"settings[payments][statementdescriptor]\"=\"example descriptor\" \\\n  -d \"settings[payments][statementdescriptorkanji]\"=\"漢字明細\" \\\n  -d \"settings[payments][statementdescriptorkana]\"=\"カナメイサイ\"`You can set dynamic kanji and kana suffixes when creating card charges with paymentmethodoptions[card][statementdescriptorsuffixkanji] and paymentmethodoptions[card][statementdescriptorsuffixkana].\n`paymentmethodoptions[card][statementdescriptorsuffixkanji]``paymentmethodoptions[card][statementdescriptorsuffixkana]`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=1000 \\\n  -d currency=jpy \\\n  -d \"paymentmethodtypes[]\"=card \\\n  -d statementdescriptorsuffix=\"example descriptor\" \\\n  -d \"paymentmethodoptions[card][statementdescriptorsuffixkanji]\"=\"漢字サフィックス\" \\\n  -d \"paymentmethodoptions[card][statementdescriptorsuffixkana]\"=\"カナサフィックス\"\n`curl https://api.stripe.com/v1/paymentintents \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d amount=1000 \\\n  -d currency=jpy \\\n  -d \"paymentmethodtypes[]\"=card \\\n  -d statementdescriptorsuffix=\"example descriptor\" \\\n  -d \"paymentmethodoptions[card][statementdescriptorsuffixkanji]\"=\"漢字サフィックス\" \\\n  -d \"paymentmethodoptions[card][statementdescriptorsuffixkana]\"=\"カナサフィックス\"`See Japanese statement descriptors for more details."}, {"path": "connect\\stripe-dashboard.md", "url": "https://docs.stripe.com/connect/stripe-dashboard", "content": "#Stripe Dashboard for connected accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/stripe-dashboard\n\n#Stripe Dashboard for connected accounts\n#Learn about the features of the Stripe Dashboard for connected accounts.\nThe Stripe Dashboard is available to your platform’s connected accounts.\n#Stripe Dashboard features\nConnected accounts can use the Dashboard to:\n• See analytics and charts about business performance\n• View payments, balances, customers, billing, and other products\n• Manage their business information and account settings\n• Handle disputes, refunds, and chargebacks\n• Download reports\n#Accessing the Stripe Dashboard\nYour connected accounts have access to the Stripe Dashboard after they’ve completed onboarding. Consider linking to the Dashboard from your application.\n#Platform controls\nIf you have platform controls for a connected account, you can co-brand the Stripe Dashboard. Your platform name is displayed in the bottom left corner of the user interface."}, {"path": "connect\\subscriptions.md", "url": "https://docs.stripe.com/connect/subscriptions", "content": "#Create subscriptions with Stripe Billing | Stripe Documentation\nURL: https://docs.stripe.com/connect/subscriptions\n\n#Create subscriptions with Stripe Billing\n#With Connect, you can create subscriptions for your customers or connected accounts.\nSoftware as a Service (SaaS) and marketplace businesses use Stripe Connect to route payments between themselves, customers, and connected accounts. You can use Connect to route payments or payouts and use Stripe Billing to support your recurring revenue model.\n#Use cases\nYou can create subscriptions for connect accounts, which supports several approaches for collecting payments. You can create subscriptions for your connected account’s customers using direct or destination charges, for your end customers to directly transact with your platform, and to charge your connected accounts a fee for using your platform.\nThe following use cases describe how to use Stripe Billing to create subscriptions from end customers to connected accounts, to bill platform end customers, and to bill connected accounts.\n Use case | Description \n --- | --- \n Create subscriptions from the end customer to the connected account | Create subscriptions for end customers to your connected accounts, which supports several approaches for collecting payments. In this example, Prices reside on the connected account. \n Create subscriptions to bill platform end customers | Marketplaces can directly offer membership subscriptions without involving your connected account. In this example, Prices reside on the platform. \n Create subscriptions to bill connected accounts | Platforms can create subscriptions for their connected accounts. In this example, Prices reside on the platform. \n#Restrictions\nUsing subscriptions with Connect has these restrictions:\n• Your platform can’t update or cancel a subscription that it didn’t create.\n• Your platform can’t add an applicationfeeamount to an invoice that it didn’t create, nor to an invoice that contains invoice items the platform didn’t create.\n• Subscriptions aren’t automatically cancelled when you disconnect from the platform. You must cancel the subscription after disconnection. You can use webhooks to monitor connected account activity.\n`applicationfeeamount`## Create subscriptions from the end customer to the connected account\nIf you’re building a platform, you can create subscriptions for your connected accounts’ customers, optionally taking a per-payment fee for your platform.\nThis example builds an online publishing platform that allows customers to subscribe to their favorite authors and pay them a monthly fee to receive premium blog posts from each author.\n#Before you begin\nBefore you can create subscriptions for your customers or connected accounts, you must:\n# Create a connected account for each person that receives money on your platform. In our online publishing example, a connected account represents an author.\n# Create a pricing model. For this example, we create a flat-rate pricing model to charge customers a fee on a recurring basis, but per-seat and usage-based pricing are also supported.\n# Create a customer with the intended payment method for each person that subscribes to a connected account. In our online publishing example, you create a customer for each reader that subscribes to an author.\n#Decide between direct charges and destination charges\nYou can use either direct charges or destination charges to split a customer’s payment between the connected account and your platform.\nWith direct charges, customers won’t be aware of your platform’s existence because the author’s name, rather than your platform’s name, is shown on the statement descriptor. In our online publishing example, readers interact with authors directly.\nDirect charges are recommended for connected accounts with access to the full Stripe Dashboard, which includes Standard accounts.\nIf you want your platform to be responsible for Stripe fees, refunds, and chargebacks, use destination charges. In our online publishing example, customers subscribe to your publishing platform, not directly with specific authors.\nDestination charges are recommended for connected accounts with access to the Express Dashboard or connected accounts without access to a Stripe-hosted dashboard, which includes Express and Custom accounts.\nFor more information about the different types of Connect charges, see Charge types.\n#Use direct charges to create a subscription\nTo create a subscription with Charges associated to the connected account, create a subscription while authenticated as the connected account. Make sure to define the customer with a default payment method and the Price on the connected account. To use a customer without a default payment method, set paymentbehavior: \"defaultincomplete\". Learn more about payment behavior.\n`paymentbehavior: \"defaultincomplete\"`Expand latestinvoice.paymentintent to include the Payment Element, which is needed to confirm the payment. Learn more about Payment Elements.\n`latestinvoice.paymentintent`For an end-to-end example of how to implement a subscription signup and payment flow in your application, see the subscriptions integration guide.\ncurl https://api.stripe.com/v1/subscriptions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"items[0][price]\"={{PRICEID}} \\\n  -d \"expand[0]\"=\"latestinvoice.paymentintent\"\n`curl https://api.stripe.com/v1/subscriptions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"items[0][price]\"={{PRICEID}} \\\n  -d \"expand[0]\"=\"latestinvoice.paymentintent\"`### Use destination charges to create a subscription\nTo create a subscription with Charges associated to the platform and automatically create transfers to a connected account, make a create subscription call while providing the connected account ID as the transferdata[destination] value.\n`transferdata[destination]`Expand latestinvoice.paymentintent to include the Payment Element, which you need to confirm the payment. Learn more about Payment Elements.\n`latestinvoice.paymentintent`You can optionally specify an applicationfeepercent. Learn more about collecting fees.\ncurl https://api.stripe.com/v1/subscriptions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"items[0][price]\"={{PRICEID}} \\\n  -d \"expand[0]\"=\"latestinvoice.paymentintent\" \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}\n`curl https://api.stripe.com/v1/subscriptions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d customer={{CUSTOMERID}} \\\n  -d \"items[0][price]\"={{PRICEID}} \\\n  -d \"expand[0]\"=\"latestinvoice.paymentintent\" \\\n  -d \"transferdata[destination]\"={{CONNECTEDACCOUNTID}}`### Additional steps before you create a subscription\nTo create a destination charge, define both the customer and the price on the platform account. You must have created a connected account on the platform. The customer must exist within the platform account. When using destination charges, the platform is the merchant of record.\n#Create subscriptions to bill platform end customers\nYou can use Stripe Billing to create subscriptions for your end customers to directly transact with your platform without involving your connected accounts.\nThis example builds a marketplace that allows customers to order on-demand delivery from restaurants. This marketplace offers customers a premium monthly subscription that waives their delivery fees. Customers who subscribe to the premium offering pay the marketplace directly and don’t subscribe to any particular delivery service or restaurant.\n#Before you begin\nBefore you create subscriptions for your customers, you must:\n# Create a pricing model. For this example, we create a flat-rate pricing model to charge customers a fee on a recurring basis, but per-seat and usage-based pricing are also supported.\n# Create a customer record for every customer you want to bill.\nYou can also create a connected account for each user that receives money from your marketplace. In our on-demand restaurant delivery example, a connected account is a restaurant or a delivery service. However, this step isn’t required for customers to subscribe to your marketplace directly.\n#Create a subscription\nTo create a subscription where your platform receives the funds, without any money going to connected accounts, follow the Subscriptions guide to create a subscription with Stripe Billing.\n#Create separate charges and transfers\nIf you want to manually transfer a portion of the funds that your platform receives to your connected accounts later, use separate charges and transfers to pay out funds to one or more connected accounts. In our on-demand restaurant delivery example, you can use separate charges and transfers to pay out an affiliate fee to a delivery driver or restaurant who refers a customer to subscribe to the premium delivery service.\n#Create subscriptions to bill connected accounts\nYou can use Stripe Billing to create subscriptions to charge your connected accounts a fee for using your platform.\nThis example builds a gym management software platform that allows gym businesses to pay a monthly fee to use the software to manage scheduling and appointments for classes. The gym businesses pay the subscription fee, not the gym patrons.\nThe gym management software also facilitates one-time payments between the gym patron and gym business for each class that the gym patron enrolls in. The monthly subscription is between the connected account and the platform, which doesn’t involve the gym patron in the transaction.\nIn the diagram above, the gym business is the connected account and the gym patron is the end customer.\n#Before you begin\nBefore you create subscriptions for your customers or connected accounts, you must:\n# Create a connected account for each user that receives money on your platform. In this example, the connected account is the gym business.\n# Create a pricing model. For this example, we create a flat-rate pricing model to charge customers a fee on a recurring basis, but per-seat and usage-based pricing are also supported.\n# Create a customer on the platform with the intended payment method for every connected account you want to bill. In the gym management software example, you create a customer for each gym business:\n#Create a Customer object to represent the connected account\nIf your connected accounts use Stripe to process payments for their end customers, they might have already created a Customer object for each end customer.\nTo successfully create a subscription for the connected account to pay a recurring fee to the platform, you must create a separate Customer object to represent the connected account.\nIn the gym example, the gym business uses Stripe to process one-time payments for its gym patrons. They already created a Customer object for each gym patron, but you need to create a different Customer object to represent the gym business itself. Create only one Customer to represent each business entity and don’t create a Customer to represent each owner, manager, or operator of the business.\n#Create a subscription for the connected account\nTo create a subscription where your platform receives the funds from your connected accounts, follow the Subscriptions guide to create a subscription with Stripe Billing. The Customer object involved in the transaction represents the connected account, not the end customer. In our gym example, the CUSTOMERID represents the gym business, not the gym patron.\n`CUSTOMERID`## Enable your integration to receive event notifications\nStripe creates event notifications when changes happen in your account, like when a recurring payment succeeds or when a payout fails. To receive these notifications and use them to automate your integration, set up a webhook endpoint. For example, you could provision access to your service when you receive the invoice.paid event.\n`invoice.paid`### Event notifications for Connect and subscriptions integrations\nHere are the event notifications that Connect integrations typically use.\n Event | data.object type | Description \n --- | --- | --- \n account.application.deauthorized | application | Occurs when a connected account disconnects from your platform. You can use it to trigger cleanup on your server. Available for connected accounts with access to the Stripe Dashboard, which includes Standard accounts. \n account.externalaccount.updated | An external account, such as card or bankaccount | Occurs when a bank account or debit card attached to a connected account is updated, which can impact payouts. Available for connected accounts that your platform controls, which includes Custom and Express accounts, and Standard accounts with platform controls enabled. \n account.updated | account | Allows you to monitor changes to connected account requirements and status changes. Available for all connected accounts. \n balance.available | balance | Occurs when your Stripe balance has been updated (for example, when funds you’ve added from your bank account are available for transfer to your connected account). \n paymentintent.succeeded | paymentintent | Occurs when a payment intent results in a successful charge. Available for all payments, including destination and direct charges. \n payout.failed | payout | Occurs when a payout fails. When a payout fails, the external account involved is disabled, and no automatic or manual payouts can be processed until the external account is updated. \n person.updated | person | If you use the Persons API, allows you to monitor changes to requirements and status changes for individuals. Available for connected accounts that your platform controls, which includes Custom and Express accounts, and Standard accounts with platform controls enabled. \n`account.application.deauthorized``application``account.externalaccount.updated``card``bankaccount``account.updated``account``balance.available``balance``paymentintent.succeeded``paymentintent``payout.failed``payout``person.updated``person`Here are the event notifications that subscriptions integrations typically use.\n Event | Description |  \n --- | --- | --- \n customer.created | Sent when a Customer is successfully created. \n customer.subscription.created | Sent when the subscription is created. The subscription status might be incomplete if customer authentication is required to complete the payment or if you set paymentbehavior to defaultincomplete. View subscription payment behavior to learn more. \n customer.subscription.deleted | Sent when a customer’s subscription ends. \n customer.subscription.paused | Sent when a subscription’s status changes to paused. For example, this is sent when a subscription is configured to pause when a free trial ends without a payment method. Invoicing won’t occur until the subscription is resumed. We don’t send this event if payment collection is paused because invoices continue to be created during that time period. \n customer.subscription.resumed | Sent when a subscription previously in a paused status is resumed. This doesn’t apply when payment collection is unpaused. \n customer.subscription.trialwillend | Sent three days before the trial period ends. If the trial is less than three days, this event is triggered. \n customer.subscription.updated | Sent when a subscription starts or changes. For example, renewing a subscription, adding a coupon, applying a discount, adding an invoice item, and changing plans all trigger this event. \n entitlements.activeentitlementsummary.updated | Sent when a customer’s active entitlements are updated. When you receive this event, you can provision or de-provision access to your product’s features. Read more about integrating with entitlements. \n invoice.created | Sent when an invoice is created for a new or renewing subscription. If Stripe fails to receive a successful response to invoice.created, then finalizing all invoices with automatic collection is delayed for up to 72 hours. Read more about finalizing invoices.Respond to the notification by sending a request to the Finalize an invoice API. \n invoice.finalized | Sent when an invoice is successfully finalized and ready to be paid.You can send the invoice to the customer. View invoice finalization to learn more.Depending on your settings, we automatically charge the default payment method or attempt collection. View emails after finalization to learn more. \n invoice.finalizationfailed | The invoice couldn’t be finalized. Learn how to handle invoice finalization failures by reading the guide. Learn more about invoice finalization in the invoices overview guide.Inspect the Invoice’s lastfinalizationerror to determine the cause of the error.If you’re using Stripe Tax, check the Invoice object’s automatictax field.If automatictax[status]=requireslocationinputs, the invoice can’t be finalized and payments can’t be collected. Notify your customer and collect the required customer location.If automatictax[status]=failed, retry the request later. \n invoice.paid | Sent when the invoice is successfully paid. You can provision access to your product when you receive this event and the subscription status is active. \n invoice.paymentactionrequired | Sent when the invoice requires customer authentication. Learn how to handle the subscription when the invoice requires action. \n invoice.paymentfailed | A payment for an invoice failed. The PaymentIntent status changes to requiresaction. The status of the subscription continues to be incomplete only for the subscription’s first invoice. If a payment fails, there are several possible actions to take:Notify the customer. Read about how you can configure subscription settings to enable Smart Retries and other revenue recovery features.If you’re using PaymentIntents, collect new payment information and confirm the PaymentIntent.Update the default payment method on the subscription. \n invoice.upcoming | Sent a few days prior to the renewal of the subscription. The number of days is based on the number set for Upcoming renewal events in the Dashboard. For existing subscriptions, changing the number of days takes effect on the next billing period. You can still add extra invoice items, if needed. \n invoice.updated | Sent when a payment succeeds or fails. If payment is successful the paid attribute is set to true and the status is paid. If payment fails, paid is set to false and the status remains open. Payment failures also trigger  a invoice.paymentfailed event. \n paymentintent.created | Sent when a PaymentIntent is created. \n paymentintent.succeeded | Sent when a PaymentIntent has successfully completed payment. \n subscriptionschedule.aborted | Sent when a subscription schedule is canceled because payment delinquency terminated the related subscription. \n subscriptionschedule.canceled | Sent when a subscription schedule is canceled, which also cancels any active associated subscription. \n subscriptionschedule.completed | Sent when all phases of a subscription schedule complete. \n subscriptionschedule.created | Sent when a new subscription schedule is created. \n subscriptionschedule.expiring | Sent 7 days before a subscription schedule is set to expire. \n subscriptionschedule.released | Sent when a subscription schedule is released, or stopped and disassociated from the subscription, which remains. \n subscriptionschedule.updated | Sent when a subscription schedule is updated. \n`customer.created``customer.subscription.created``status``incomplete``paymentbehavior``defaultincomplete``customer.subscription.deleted``customer.subscription.paused``status``paused``customer.subscription.resumed``paused``customer.subscription.trialwillend``customer.subscription.updated``entitlements.activeentitlementsummary.updated``invoice.created``invoice.created`- Respond to the notification by sending a request to the Finalize an invoice API.\n`invoice.finalized`- You can send the invoice to the customer. View invoice finalization to learn more.\n• Depending on your settings, we automatically charge the default payment method or attempt collection. View emails after finalization to learn more.\n`invoice.finalizationfailed`- Inspect the Invoice’s lastfinalizationerror to determine the cause of the error.\n• If you’re using Stripe Tax, check the Invoice object’s automatictax field.\n• If automatictax[status]=requireslocationinputs, the invoice can’t be finalized and payments can’t be collected. Notify your customer and collect the required customer location.\n• If automatictax[status]=failed, retry the request later.\n`automatictax[status]=requireslocationinputs``automatictax[status]=failed``invoice.paid``status``active``invoice.paymentactionrequired`invoice.paymentfailed\n`invoice.paymentfailed`A payment for an invoice failed. The PaymentIntent status changes to requiresaction. The status of the subscription continues to be incomplete only for the subscription’s first invoice. If a payment fails, there are several possible actions to take:\n`requiresaction``incomplete`- Notify the customer. Read about how you can configure subscription settings to enable Smart Retries and other revenue recovery features.\n• If you’re using PaymentIntents, collect new payment information and confirm the PaymentIntent.\n• Update the default payment method on the subscription.\n`invoice.upcoming``invoice.updated``paid``true``status``paid``paid``false``status``open``invoice.paymentfailed``paymentintent.created``paymentintent.succeeded``subscriptionschedule.aborted``subscriptionschedule.canceled``subscriptionschedule.completed``subscriptionschedule.created``subscriptionschedule.expiring``subscriptionschedule.released``subscriptionschedule.updated`- Create a webhook endpoint\n• Listen to events with the Stripe CLI\n• Connect webhooks\n• Subscription webhooks\n#Test your integration\nAfter you create your subscription, thoroughly test your integration before you expose it to customers or use it for any live activity. Learn more about testing Stripe Billing.\n#Additional options\nAfter you create your subscription, you can specify an applicationfeepercent, set up the customer portal, charge your customer using the onbehalfof parameter, and monitor subscriptions with webhooks, in addition to other options.\n`onbehalfof`### Collect fees on subscriptions\n#Use coupons\n#Use trial periods\n#Set up the customer portal\n#Monitor subscriptions with webhooks\n#Make the connected account the settlement merchant using onbehalfof\n#Understand disconnect behavior\n#Integrate tax calculation and collection\n#See also\n• Creating invoices\n• Creating charges\n• Share customers across accounts\n• Multiple currencies"}, {"path": "connect\\supported-embedded-components.md", "url": "https://docs.stripe.com/connect/supported-embedded-components", "content": "#Supported Connect embedded components | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components\n\n#Supported Connect embedded components\n#Learn about current and upcoming embedded components.\nAdd Connect embedded components to your page as HTML elements or as React components.\n#Available components\n#Preview components\nWhen using private preview components, use beta versions of the Stripe SDK, as well as beta versions of the @stripe/connect-js and @stripe/react-connect-js SDKs.\nTo create an account session with private preview components, use the Stripe beta SDKs:\n• Ruby >=13.4.0-beta.4\n• Python >=11.5.0b3\n• PHP >=16.5.0-beta.3\n• Node >=17.6.0-beta.3\n• .NET >=47.3.0-beta.3\n• Java >=28.3.0-beta.3\n• Go >=81.3.0-beta.3\n`>=13.4.0-beta.4``>=11.5.0b3``>=16.5.0-beta.3``>=17.6.0-beta.3``>=47.3.0-beta.3``>=28.3.0-beta.3``>=81.3.0-beta.3`Use the client-side libraries for rendering the private preview components:\nInstall the library:\n`npm install --save @stripe/connect-js@preview`If you’re using React in your application:\n`npm install --save @stripe/react-connect-js@preview`### Available preview components\n#Integration guides\n#Migrate from the v1 to v2 beta\n# Update your client library.Ruby >=13.4.0-beta.4Python >=11.5.0b3PHP >=16.5.0-beta.3Node >=17.6.0-beta.3.NET >=47.3.0-beta.3Java >=28.3.0-beta.3Go >=81.3.0-beta.3\n# Update the beta header used from embeddedconnectbeta=v1 to embeddedconnectbeta=v2.\n# Specify the list of components to enable as a parameter when creating an Account Session.\n• Ruby >=13.4.0-beta.4\n• Python >=11.5.0b3\n• PHP >=16.5.0-beta.3\n• Node >=17.6.0-beta.3\n• .NET >=47.3.0-beta.3\n• Java >=28.3.0-beta.3\n• Go >=81.3.0-beta.3\n`>=13.4.0-beta.4``>=11.5.0b3``>=16.5.0-beta.3``>=17.6.0-beta.3``>=47.3.0-beta.3``>=28.3.0-beta.3``>=81.3.0-beta.3``embeddedconnectbeta=v1``embeddedconnectbeta=v2``components`## Migrate from v2 beta to GA\nIf you’re using a beta component that’s now generally available, follow these steps:\n# Update your client library.Ruby >=13.4.1Python >=11.5.0PHP >=16.5.0Node >=17.6.0.NET >=47.3.0Java >=28.3.0Go >=81.3.0\n# Remove the embeddedconnectbeta header.\n# Use the GA releases of the @stripe/connect-js and @stripe/react-connect-js npm packages.\n• Ruby >=13.4.1\n• Python >=11.5.0\n• PHP >=16.5.0\n• Node >=17.6.0\n• .NET >=47.3.0\n• Java >=28.3.0\n• Go >=81.3.0\n`>=13.4.1``>=11.5.0``>=16.5.0``>=17.6.0``>=47.3.0``>=28.3.0``>=81.3.0``embeddedconnectbeta``@stripe/connect-js``@stripe/react-connect-js`"}, {"path": "connect\\tax-form-settings.md", "url": "https://docs.stripe.com/connect/tax-form-settings", "content": "#Configure tax form settings | Stripe Documentation\nURL: https://docs.stripe.com/connect/tax-form-settings\n\n#Configure tax form settings\n#Learn about the settings you can configure for the 1099 forms you send to connected accounts.\n#Getting your 1099 Forms\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see 1099 tax forms on the Stripe Support site.\nUse the Stripe Dashboard to configure the settings for the 1099 forms you send to connected accounts. You can change almost all tax settings for forms you haven’t filed yet. For example, if you initially set your tax form to report non-employee compensation using 1099-NEC and later determine you need to report payment transactions using 1099-K, you can change the default form type and automatically update all forms.\nIf a user with the administrator role configured the tax form default settings in the onboarding flow for 1099 tax reporting, you can assign the Tax Analyst role to a team member on your account to allow that person full access to features in the Tax reporting view.\n#Common settings\nThese settings apply to all tax forms.\n Default form type | Sets the default type of 1099 form to use to report compensation or payment transactions. If you need to deliver multiple form types, you can change the type of 1099 form for an account. \n Payer tax identity | Uses the platform account’s information (legal business name and tax identification number) by default. You can change your payer tax identity if, for example, you want the legal entity on the 1099 form to differ from the legal entity associated with your Stripe account. \n Payer address | Uses the platform account’s information by default. This address displays on the 1099-NEC or 1099-MISC form as the Payer’s address and on the 1099-K form as the Filer’s address. \n Payer phone number | Uses the platform account’s information by default. This phone number displays on tax forms as the Payer’s or Filer’s phone number. \n Payer state registrations | Add corresponding state tax registration or withholding ID when it is required for the states in which you’ll file. \n#Delivery method settings\nConfigure settings for how to deliver your 1099 forms to payees. These settings apply to all 1099 form types.\n Delivery strategy | Configures the default delivery strategy to use, either smart delivery settings or customize delivery settings. \n E-delivery | Specifies whether to e-deliver forms using an interface built by Stripe, including Stripe Embedded Components, the Stripe Express Dashboard, and the Stripe Dashboard. If enabled, all accounts with a viable email address receive an email when their 1099 form is available, except in some rare situations. If an account has given e-delivery consent, they can access their form immediately. If delivery is through the Stripe Express Dashboard and the connected previously didn’t have access to it, they must claim their Stripe Express account before they can access their form. \n Postal delivery | Specifies whether to deliver printed copies of 1099 forms via postal mail using the platform’s US return mailing address. \nPostal Delivery Options\n Disable Postal Delivery | Connected accounts don’t receive tax forms by postal mail. \n Optional Postal Delivery | Stripe sends printed tax forms through postal mail to every connected account that hasn’t consented to e-delivery at the time of filing, or is ineligible to receive e-delivery. If you enabled e-delivery through an interface built by Stripe, connected accounts can also request a paper copy of their tax form through their respective interface. \n Postal delivery | All connected accounts receive tax forms by postal mail. \n#1099-K settings\nConfigure these settings for the 1099-K forms you send to connected accounts.\n Default calculation method | Configures the default calculation method to use, either payments that include fees or payments that exclude fees. \n Filer type | Specifies if the platform account is a payment settlement entity (PSE) or an electronic payment facilitator (EPF). \n Payment settlement entity | Appears if the filer type is EPF. If so, you must specify the name and phone number for the PSE. \n Transactions reported | Configures the type of transaction that’s processed. \n#1099-MISC settings\nConfigure these settings for the 1099-MISC forms you send to connected accounts.\n Payments box | Payment amounts are reported in the specified box on the 1099-MISC form. For example, choose 3 Other income to display the amount in box number 3. You can use CSV import to override this box for specific tax forms. \n Default calculation method | Configures the default calculation method to use. You can choose between payments that include fees, payments that exclude fees, or payouts only. \n#1099-NEC settings\nConfigure these settings for your 1099-NEC forms.\n Default calculation method | Configures the default calculation method to use. You can choose between payments that include fees, payments that exclude fees, or payouts only."}, {"path": "connect\\tax-forms-state-requirements.md", "url": "https://docs.stripe.com/connect/tax-forms-state-requirements", "content": "#File tax forms with states | Stripe Documentation\nURL: https://docs.stripe.com/connect/tax-forms-state-requirements\n\n#File tax forms with states\n#Learn about the state requirements for filing 1099 forms.\nWhen you file your 1099 forms from the Tax reporting view in the Dashboard, Stripe submits your forms to the IRS and all qualifying states. We automatically apply state thresholds when generating 1099 tax forms, so you can easily determine which forms need state filing based on the addresses of your connected accounts.\n#Note\nStripe supports e-filing in all states but won’t transmit forms to states on your behalf that have backup or state withholding amounts. Review 1099 form requirements by state and work with your tax advisor to make sure you understand the tax requirements specific to your business.\n#Prepare to file with the states\nBefore filing forms in your Dashboard, do the following to make sure forms are filed correctly with both the IRS and states:\n#Choose the tax form type in the Dashboard\nConfigure your tax forms settings to choose the tax form type (or types) you’ll file: 1099-K, 1099-NEC, or 1099-MISC. Each state has different requirements for each form type.\n#Determine the states where your connected accounts are based\nIn the Dashboard, you can either export a CSV file with state information (reported in the payee_region column) or filter by Payee state.\n#Determine which states to file with\nSome state 1099 filings also require a state tax registration or withholding ID. Refer to the tables in the Check 1099 form requirements by state section to determine where you might need state online accounts and IDs.\n#Add the state tax Registration or withholding ID\nAfter you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the Tax forms settings page. In the Dashboard, click Settings. On Product settings, under Connect, click Tax form settings.\nRefer to the tables in the Check 1099 form requirements by state section to determine where you might need state online accounts and IDs. If prompted that some state registration or withholding IDs were missing during filing, you must add the missing IDs on the Connect Tax forms settings page, and then go through the filing flow again. Delaware and Pennsylvania typically reject state filings if state IDs are missing and a state ID was issued.\n#State-by-state breakdown\nWhen you’re ready to file forms in your Dashboard, the forms for IRS and state reporting agencies will be filed at the same time. To understand the number of forms being filed in each state, click Show state-by-state breakdown on the File Federal and state tax forms window in the filing flow. This page also indicates whether the state’s registration or withholding ID is missing or has already been provided. A yellow informational banner displays at the top of every page in the filing flow if state IDs are missing from states that are being filed.\n#Withholding\nStripe can’t file tax forms with the state authorities if state withholding is present. If you have forms with state withholding, Stripe won’t file those with the states but will make the files available as an export and file with the IRS. Please check the Exports & Imports section in the Dashboard for the downloaded file. Please consult a tax advisor on how/whether to file these forms with state agencies.\n#Check 1099 form requirements by state\nChoose the form type to view state filing requirements:\n• 1099-K\n• 1099-NEC\n• 1099-MISC\n#Correct 1099 reports with the states\nWhen you file a correction with the IRS, the state correction is filed at the same time. To file a correction with a state for a form that was already filed, you must create a correction.\n#Frequently asked questions\nThe following section provides answers to common questions about filing tax forms through Connect.\n#What happens if a connected account needs their form filed in multiple states?\nStripe does not support this at the moment. Stripe only checks eligibility and files in the state where the connected account’s address is registered.\n#When we click “File”, does Stripe file with the IRS and the States at the same time, or do we have the ability to make changes if one has a later deadline?\nStripe files with the IRS and the State right away when you file the submission and you can’t make changes to that. But platforms are always able to make “corrections” and then file them and Stripe takes care of processing those corrections to the IRS and the State.\n#How do I know if a particular form will be filed with the state?\nWe’ve introduced a new State filing status. For more information, see Understand tax form status.\n#Can I override the filing requirement for State filing without overriding the filing requirement for Federal filing?\nNo. If you override the filing requirements, it applies to both federal and state filing.\n#Why wasn’t the state filing status overridden when I selected “File even if incomplete”?\nWhen you choose to override the filing status and select File even if incomplete, there are still certain edge cases where your form might still have a state filing status of Needs Attention. This is done to minimize the risk of rejections from the state. Take note of the following state-specific rules:\n`Needs Attention`- Pennsylvania: The form must have a non-zero Taxpayer Identification Number (TIN) and pass a basic address validation check, which requires at least one digit and one number in the address.\n• Illinois: The form must have a non-zero TIN and a valid payee name.\n• Oregon: The form must have a non-zero TIN.\n• District of Columbia: The form cannot have a TIN with all digits being the same number."}, {"path": "connect\\tax-reporting.md", "url": "https://docs.stripe.com/connect/tax-reporting", "content": "#US tax reporting for Connect platforms | Stripe Documentation\nURL: https://docs.stripe.com/connect/tax-reporting\n\n#US tax reporting for Connect platforms\n#Learn how to report the annual payments for your US-based connected accounts.\nStripe Connect allows platforms to provide a seamless, end-to-end payment service for their connected accounts. This service may come with certain responsibilities, including tax information reporting.\n#Getting your 1099 Forms\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see 1099 tax forms on the Stripe Support site.\nStripe issues 1099-K forms for your connected accounts that have transactions where controller.fees.payer = account or applicationunifiedaccountsbeta.\n`controller.fees.payer``account``applicationunifiedaccountsbeta`For transactions where controller.fees.payer = application, if your connected accounts pay the processing fees for those transactions to Stripe, they could be included in a Stripe-issued 1099.\n`controller.fees.payer``application`For any other account setups that have transactions, Stripe won’t issue a 1099-K to your connected accounts (for example, when controller.fees.payer = applicationcustom or applicationexpress or application where you pay the processing fees). Instead, consider issuing a Form 1099 to report income and payment transactions. There are several types of 1099 forms, and the applicable form depends on the type of payments you make to your connected account.\n`controller.fees.payer``applicationcustom``applicationexpress``application`#### Note\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n#1099-NEC\nUse the 1099-NEC form to report non-employee compensation.\nThe account must meet all of the following criteria in the previous calendar year:\n• Based in the US or a US taxpayer\n• $600 or more in payments\n#1099-MISC\nUse the 1099-MISC form to report other forms of payments made in the course of your business.\nThe account must meet all of the following criteria in the previous calendar year:\n• Based in the US or a US taxpayer\n• $600 or more in payments or $10 in royalties\n#1099-K\nUse the 1099-K form to report payment transactions.\nThe account must meet all of the following criteria in the previous calendar year:\n• Based in the US or a US taxpayer\n• More than $5,000 in gross volume\n• More than 0 transactions\n#See also\n• Get started with the Stripe 1099 tax reporting product\n• Configure your tax form settings\n#Note\nLooking for help calculating sales tax, VAT, or GST? Check out Stripe Tax."}, {"path": "connect\\tax-year-changeover.md", "url": "https://docs.stripe.com/connect/tax-year-changeover", "content": "#Tax year changeover | Stripe Documentation\nURL: https://docs.stripe.com/connect/tax-year-changeover\n\n#Tax year changeover\n#Learn how to manage tax forms for a new tax year.\n#Getting your 1099 Forms\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see 1099 tax forms on the Stripe Support site.\n#Preparing for tax year changeover\nWhen a new tax year starts, you need to collect financial data for the new year in a new tax form for the new tax year. This is often before a user completes and submits tax forms from the previous year and before you provide them to users on your platform. To view the tax forms for the new year, you need to change the year selected either on the Tax reporting page or on the Tax form settings page.\n#About tax year settings\nWhen a new tax year starts, we apply your settings from the previous year to the new one. If no settings are in place from the previous tax year, the Tax year settings dialog displays so you can configure settings for that tax year.\nTax forms are generated as soon as a new tax year starts and a payment is made. To see the tax forms that belong to the new tax year, users need to go through a changeover process. This means they need to enable the tax year picker either on the tax forms list or on the Tax Forms settings pages, and they need to create new settings.\n#Selecting a tax year\nThe Tax reporting page displays tax forms and settings for the current tax year.\nYou can display a different tax year by doing one of the following:\n• Selecting a new tax year from the drop-down on the Tax reporting page\n• Selecting a new tax year from the drop-down on the Tax form settings page\nWhen you select a tax year from the drop-down for a year that has no activity, the Tax form defaults dialog opens. To activate the tax year, configure and save the Tax form default settings. If you don’t configure and save settings, you see the onboarding page when you open the Tax reporting page. Select a different tax year from the drop-down to change to that year.\nThe selection persists between sessions, so it displays the same tax year when you next use the Dashboard. This lets you start working with tax forms for the current year and then switch back to the previous year to file or correct existing forms.\n#Frequently asked questions\nThe following section provides answers to common questions about tax year changeover.\n#How does the user change between tax years?\nClick the small downward arrow next to the current tax year. All available tax years appear in a dropdown menu. Click one of these years to change the user’s view to that tax year.\n#What is the default tax year?\nAfter the new year’s forms become available, your Dashboard automatically changes over to that year.\n#Does the default tax year reset when you log in? Will it remember what year I last looked at?\nThe year you select to view persists between logins. If you select to view your 2024 forms, the UI defaults to your 2024 forms when you log back in.\n#What determines how many tax years are available to me?\nEvery time a tax year launches and those forms become available while you have a Stripe account with Tax Form Defaults configured, that year becomes available to you in your drop-down. If you began processing transactions in 2022, you won’t see 2021 forms in your Dashboard because you didn’t have an account when those were launched.\n#Will I see tax years from before I used Stripe?\nNo. You only see years that launched while you had a Stripe account.\n#Will I see tax years for which I filed no forms?\nYou are able to see any year in which you previously generated 1099 forms in the Connect dashboard, regardless of whether or not they were filed."}, {"path": "connect\\testing-verification.md", "url": "https://docs.stripe.com/connect/testing-verification", "content": "#Testing account verification during API onboarding | Stripe Documentation\nURL: https://docs.stripe.com/connect/testing-verification\n\n#Testing account verification during API onboarding\n#A walk-through of testing different verification states for connected accounts during API onboarding using your test API key.\nThis document assumes you’re familiar with API onboarding, how to update accounts, and identity verification.\nTest your verification flows to make sure they can handle changes in account state (for example, when you enable or disable charges). Account states generally change after fulfilling requirements or when reaching processing or time thresholds. The sections below describe these changes and how to test your verification flows.\n#Testing initial requirements\nStart by creating a new connected account in test mode, adding a bank account, and showing that the account holder accepted the Stripe Services Agreement. Stripe requires that the connected account explicitly accepts Stripe’s service agreement before making payouts. For this example, the businesstype is set to company to illustrate a more complex scenario, and the externalaccount uses a tokenized Stripe test account as a reminder to avoid exposing sensitive information in API calls.\n`businesstype``company``externalaccount`#### Note\nYou must provide a test API key from a Stripe account which has begun Connect platform onboarding. The auto-filled Stripe test API key causes these sample requests to fail.\nYou can create a connected account using either controller properties or by setting the account type. In either case, you must set country and request the cardpayments and transfers capabilities.\n`cardpayments``transfers`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d externalaccount=btokus \\\n  -d \"tosacceptance[date]\"=1547923073 \\\n  -d \"tosacceptance[ip]\"=\"172.18.80.19\"\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d \"controller[losses][payments]\"=application \\\n  -d \"controller[fees][payer]\"=application \\\n  -d \"controller[stripedashboard][type]\"=none \\\n  -d \"controller[requirementcollection]\"=application \\\n  -d businesstype=company \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true \\\n  -d externalaccount=btokus \\\n  -d \"tosacceptance[date]\"=1547923073 \\\n  -d \"tosacceptance[ip]\"=\"172.18.80.19\"`At this point, the account is created but charges and payouts are still disabled. In the response, check the requirements.currentlydue array to determine what information you need to collect:\n`requirements.currentlydue`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"businessprofile.mcc\",\n      \"businessprofile.url\",\n      \"company.address.city\",\n      \"company.address.line1\",\n      \"company.address.postalcode\",\n      \"company.address.state\",\n      \"company.name\",\n      \"company.phone\",\n      \"company.taxid\",\n      \"relationship.representative\",\n      \"relationship.owner\"\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"businessprofile.mcc\",\n      \"businessprofile.url\",\n      \"company.address.city\",\n      \"company.address.line1\",\n      \"company.address.postalcode\",\n      \"company.address.state\",\n      \"company.name\",\n      \"company.phone\",\n      \"company.taxid\",\n      \"relationship.representative\",\n      \"relationship.owner\"\n    ],\n    ...\n  },\n  ...\n}`Then, use the external account id returned in the response to update the account with the additional required information about the account:\n`id`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"businessprofile[mcc]\"=5045 \\\n  --data-urlencode \"businessprofile[url]\"=\"https://bestcookieco.com\" \\\n  -d \"company[address][city]\"=Schenectady \\\n  -d \"company[address][line1]\"=\"123 State St\" \\\n  -d \"company[address][postalcode]\"=12345 \\\n  -d \"company[address][state]\"=NY \\\n  -d \"company[taxid]\"=000000000 \\\n  -d \"company[name]\"=\"The Best Cookie Co\" \\\n  -d \"company[phone]\"=8888675309\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"businessprofile[mcc]\"=5045 \\\n  --data-urlencode \"businessprofile[url]\"=\"https://bestcookieco.com\" \\\n  -d \"company[address][city]\"=Schenectady \\\n  -d \"company[address][line1]\"=\"123 State St\" \\\n  -d \"company[address][postalcode]\"=12345 \\\n  -d \"company[address][state]\"=NY \\\n  -d \"company[taxid]\"=000000000 \\\n  -d \"company[name]\"=\"The Best Cookie Co\" \\\n  -d \"company[phone]\"=8888675309`After successfully updating the company details, checking requirements.currentlydue shows the relationship requirements are still required:\n`requirements.currentlydue``relationship`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"relationship.representative\",\n      \"relationship.owner\",\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"relationship.representative\",\n      \"relationship.owner\",\n    ],\n    ...\n  },\n  ...\n}`Use the Persons API to create a profile for the person representing the relationship to the account. For this example, we create a profile for Jenny Rosen, and identify her as the representative. For this example, we also populate the optional title attribute.\n`representative``title`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d firstname=Jenny \\\n  -d lastname=Rosen \\\n  -d \"relationship[representative]\"=true \\\n  -d \"relationship[title]\"=CEO\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d firstname=Jenny \\\n  -d lastname=Rosen \\\n  -d \"relationship[representative]\"=true \\\n  -d \"relationship[title]\"=CEO`#### Note\nFor accounts with businesstype set to individual, provide at least one individual property (for example, individual.firstname) and a Person object is created automatically. If you don’t, or for accounts with the businesstype set to company, you need to create each Person for the account.\n`individual``individual``individual.firstname``businesstype``company`When you create a Person, the response includes a requirements hash listing the required verification information for that person.\n`Person``requirements`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"address.city\",\n      \"address.line1\",\n      \"address.postalcode\",\n      \"address.state\",\n      \"dob.day\",\n      \"dob.month\",\n      \"dob.year\",\n      \"phone\",\n      \"email\",\n      \"relationship.executive\",\n      \"ssnlast4\"\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"address.city\",\n      \"address.line1\",\n      \"address.postalcode\",\n      \"address.state\",\n      \"dob.day\",\n      \"dob.month\",\n      \"dob.year\",\n      \"phone\",\n      \"email\",\n      \"relationship.executive\",\n      \"ssnlast4\"\n    ],\n    ...\n  },\n  ...\n}`After you create a Person for your external account, checking the Account object shows that the required verification information for the newly created Person has been added to the requirements.currentlydue list:\n`Person``Account``Person``requirements.currentlydue`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"person.personxxx.address.city\",\n      \"person.personxxx.address.line1\",\n      \"person.personxxx.address.postalcode\",\n      \"person.personxxx.address.state\",\n      \"person.personxxx.dob.day\",\n      \"person.personxxx.dob.month\",\n      \"person.personxxx.dob.year\",\n      \"person.personxxx.phone\",\n      \"person.personxxx.email\",\n      \"person.personxxx.relationship.executive\",\n      \"person.personxxx.ssnlast4\",\n      \"relationship.owner\"\n    ],\n    ...\n  },\n  ...\n}\n`{\n  \"id\": \"{{CONNECTEDACCOUNTID}}\",\n  \"object\": \"account\",\n  \"requirements\": {\n    \"currentlydue\": [\n      \"person.personxxx.address.city\",\n      \"person.personxxx.address.line1\",\n      \"person.personxxx.address.postalcode\",\n      \"person.personxxx.address.state\",\n      \"person.personxxx.dob.day\",\n      \"person.personxxx.dob.month\",\n      \"person.personxxx.dob.year\",\n      \"person.personxxx.phone\",\n      \"person.personxxx.email\",\n      \"person.personxxx.relationship.executive\",\n      \"person.personxxx.ssnlast4\",\n      \"relationship.owner\"\n    ],\n    ...\n  },\n  ...\n}`Use the Update a Person API to provide the requested verification information for Jenny Rosen:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"address[city]\"=Schenectady \\\n  -d \"address[line1]\"=\"123 State St\" \\\n  -d \"address[postalcode]\"=12345 \\\n  -d \"address[state]\"=NY \\\n  -d \"dob[day]\"=10 \\\n  -d \"dob[month]\"=11 \\\n  -d \"dob[year]\"=1980 \\\n  -d ssnlast4=0000 \\\n  -d phone=8888675309 \\\n  --data-urlencode email=\"jenny@bestcookieco.com\" \\\n  -d \"relationship[executive]\"=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"address[city]\"=Schenectady \\\n  -d \"address[line1]\"=\"123 State St\" \\\n  -d \"address[postalcode]\"=12345 \\\n  -d \"address[state]\"=NY \\\n  -d \"dob[day]\"=10 \\\n  -d \"dob[month]\"=11 \\\n  -d \"dob[year]\"=1980 \\\n  -d ssnlast4=0000 \\\n  -d phone=8888675309 \\\n  --data-urlencode email=\"jenny@bestcookieco.com\" \\\n  -d \"relationship[executive]\"=true`Setting relationship[executive]=true confirms to Stripe that the representative is someone with significant control in the organization. US required verification information has more information about company representative verification details for US businesses.\n`relationship[executive]=true`After providing the representative information, we still need to identify the owner for the account. In this example, Kathleen Banks owns 80% of The Best Cookie Co.\n`representative``owner`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d firstname=Kathleen \\\n  -d lastname=Banks \\\n  --data-urlencode email=\"kathleen@bestcookieco.com\" \\\n  -d \"relationship[owner]\"=true \\\n  -d \"relationship[percentownership]\"=80\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d firstname=Kathleen \\\n  -d lastname=Banks \\\n  --data-urlencode email=\"kathleen@bestcookieco.com\" \\\n  -d \"relationship[owner]\"=true \\\n  -d \"relationship[percentownership]\"=80`In our example, Kathleen Banks owns less than 100% of The Best Cookie Co. Since you haven’t defined another owner to make the ownership total 100%, Stripe requires you to confirm that you’ve provided information on all required owners.\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownersprovided]\"=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"company[ownersprovided]\"=true`Successful completion of your connected account at this stage means:\n• You’ve completed all required information (requirements.currentlydue=null).\n• Charges are enabled for the account (chargesenabled=true).\n• You received an account.updated webhook from Stripe.\n`requirements.currentlydue=null``chargesenabled=true``account.updated`## Testing thresholds\nWhether you use upfront onboarding or incremental onboarding, Stripe might request more information about connected accounts as different thresholds are reached. Sometimes these thresholds are triggered by verification failures or OFAC checks. Other times, they’re triggered by a processing or time component. For example, more information might be required after 1,500 USD in charges or 30 days after an account is created (whichever comes first). To find out what information is required and by when, you can check the requirements.eventuallydue array and the requirements.currentdeadline timestamp.\n`requirements.eventuallydue``requirements.currentdeadline`In some cases, if the you don’t collect new information by a certain date, charges and payouts might be disabled until you collect it. You can trigger these scenarios so that you can test these thresholds, and then collect the required information.\n#Triggering thresholds\nYou can create a charge with the verification token (tokvisatriggerVerification) to trigger a generic verification threshold. This doesn’t block charges or payouts, but it does trigger the request for additional information. If you’re listening to the account.updated webhook, you can check:\n`tokvisatriggerVerification``account.updated`- requirements.currentlydue to find out what information is needed.\n• requirements.currentdeadline to find out when the information is needed.\n`requirements.currentlydue``requirements.currentdeadline`If the information isn’t collected by the currentdeadline, charges and payouts might be disabled. To test scenarios like this, see the blocking charges and payouts sections below.\n`currentdeadline`You can also trigger more specific verification thresholds, like when there’s an identity mismatch or when an OFAC threshold is reached. Testing these thresholds is beneficial because they often happen when verification fails.\n#Testing blocked charges\nYou can block charges by creating a test charge with the charge block token (tokvisatriggerChargeBlock). After doing this, you should receive an account.updated webhook that shows:\n`tokvisatriggerChargeBlock``account.updated`- chargesenabled=false.\n• The required information in the requirements.currentlydue array.\n• An empty requirements.eventuallydue array.\n`chargesenabled=false``requirements.currentlydue``requirements.eventuallydue`You can then update the account with the new information. That triggers another webhook, which indicates that charges are enabled and that the requirements.currentlydue and requirements.eventuallydue arrays are both empty.\n`requirements.currentlydue``requirements.eventuallydue`### Testing blocked payouts\nYou can block payouts by creating a test charge with the block transfer token (tokvisatriggerTransferBlock). After doing this, you should receive an account.updated webhook that shows:\n`tokvisatriggerTransferBlock``account.updated`- payoutsenabled=false.\n• The required information in the requirements.currentlydue array.\n• An empty requirements.eventuallydue array.\n`payoutsenabled=false``requirements.currentlydue``requirements.eventuallydue`You can then update the account with the new information. That triggers another webhook, which indicates that payouts are enabled and that the requirements.currentlydue and requirements.eventuallydue arrays are both empty.\n`requirements.currentlydue``requirements.eventually_due`"}, {"path": "connect\\testing.md", "url": "https://docs.stripe.com/connect/testing", "content": "#Testing Stripe Connect | Stripe Documentation\nURL: https://docs.stripe.com/connect/testing\n\n#Testing Stripe Connect\n#Before going live, test your Connect integration for account creation, identity verification, and payouts.\nUse testing to make sure your Connect integration handles different flows correctly. Use test mode to simulate live mode while taking advantage of Stripe-provided special tokens to use in your tests. Take a look at our payments testing guide for more information on testing charges, disputes, and so on.\n#Create test accounts\nYou can create multiple test accounts and use any account type or controller properties you might need (for example, representing multiple countries).\nYou can create test accounts using the Accounts API or in the Stripe Dashboard.\nUse 000-000 as the SMS code when prompted for test accounts.\n`000-000`## Test the OAuth flow\nYou can test your OAuth integration with connected accounts that use a Stripe-hosted dashboard using your test mode clientid.\n`clientid`Your test mode clientid is caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb. You can find this in your Connect OAuth settings.\n`clientid``caFkyHCg7X8mlvCUdMDao4mMxagUfhIwXb`Your test mode clientid allows you to:\n`clientid`- Set your redirecturi to a non-HTTPS URL\n• Set your redirecturi to localhost\n• Force-skip the account form instead of having to fill out an entire account application (Stripe Dashboard accounts only)\n• Get test access tokens for connected accounts\n`redirecturi``redirecturi`To test the OAuth flow, create a new account after clicking the OAuth link. You can also test connecting an existing Stripe account only if the email is different from your platform account.\n#Identity verification\nAfter creating a test connected account, you can use tokens to test different verification statuses to make sure you’re handling different requirements and account states. You can use the following tokens to test verification with test accounts.\n#Test dates of birth\nUse these dates of birth (DOB) to trigger certain verification conditions.\n DOB | Type \n --- | --- \n 1901-01-01 | Successful verification. Any other DOB results in unsuccessful verification. \n 1902-01-01 | Successful, immediate verification. The verification result is returned directly in the response, not as part of a webhook event. \n 1900-01-01 | This DOB triggers an Office of Foreign Assets Control (OFAC) alert. \n`1901-01-01``1902-01-01``1900-01-01`### Test addresses\nUse these addresses for line1 to trigger certain verification conditions. You must pass in legitimate values for the city, state, and postalcode arguments.\n`line1``city``state``postalcode`| Token | Type |\n --- | --- \n addressfullmatch​ | Successful verification. \n addressnomatch | Unsuccessful verification. \n addressline1nomatch | Unsuccessful verification from partial address match. \n`addressfullmatch``addressnomatch``addressline1nomatch`### Test personal ID numbers\nUse these personal ID numbers for individual.idnumber or the idnumber attribute on the Person object to trigger certain verification conditions.\n`Person`| Number | Type |\n --- | --- \n 000000000 | Successful verification. 0000 also works for SSN last 4 verification. \n 111111111 | Unsuccessful verification (identity mismatch). \n 222222222 | Successful, immediate verification. The verification result is returned directly in the response, not as part of a webhook event. \n`000000000``111111111``222222222`### Test identity documents\nFor testing, use test images or file tokens instead of uploading your own test IDs. For details, refer to Uploading a file.\n#Test document images\nYou can use a verified image that causes the user to be automatically marked verified. You can use an unverified image that causes the user to be automatically marked unverified.\n`verified``unverified`#### Note\nTest images take precedence over test ID numbers. If you upload a verified image, verification succeeds, even if you also provide an unsuccessful test ID value. Similarly, an unverified image automatically fails verification regardless of the value of other test artifacts.\n#Test file tokens\nUse these file tokens to trigger certain identity verification conditions.\n Token | Type \n --- | --- \n fileidentitydocumentsuccess | Uses the verified image and marks that document requirement as satisfied. \n fileidentitydocumentfailure | Uses the unverified image and marks that document requirement as not satisfied. \n`fileidentitydocumentsuccess``fileidentitydocumentfailure`## Business information verification\n#Business address validation\nIn some countries, the business address associated with your connected account must be validated before charges, payouts, or both can be enabled on the connected account.\n#Test business addresses\nUse these addresses for line1 to trigger certain validation conditions. You must pass in legitimate values for the city, state, and postalcode arguments.\n`line1``city``state``postalcode`Make sure you start with an address token that has the least permissive validation condition you want to test for. This is because you can’t use an address token that has a more restrictive validation condition than the previous token used. For example, if you provided addressfullmatch to have both charges and payouts enabled, you can’t disable payouts or charges afterward by changing the token to an invalid one. You can work around this by creating a new account with the relevant token.\n`addressfullmatch`| Token | Type |\n --- | --- \n addressfullmatch​ | Both charges and payouts are enabled on the account. \n addressnomatch​ | Only charges are enabled on the account. Since validation failed on the line1 attribute, it becomes listed again in the requirements hash. \n addressline1nomatch | Neither charges nor payouts are enabled on the account. Since validation failed, the address attributes become listed again in the requirements hash. \n`addressfullmatch``addressnomatch``line1``addressline1nomatch`### Test business tax IDs\nUse these business tax ID numbers for company.taxid to trigger certain verification conditions. The test behavior might change depending on the Connected Account countries and the regulations in those countries. Depending on the country’s regulation, a valid tax document can mark tax ID verified in these countries.\n Number | Type \n --- | --- \n 000000000 | Successful verification. \n 000000001 | Successful verification as a non-profit. \n 111111111 | Unsuccessful verification (identity mismatch). \n 111111112 | Unsuccessful verification (tax ID not issued). \n 222222222 | Successful, immediate verification. The verification result is returned directly in the response, not as part of a webhook event. \n`000000000``000000001``111111111``111111112``222222222`### Test directorship verification\nStripe performs directorship verification by comparing the list of directors on the Account object against a list retrieved from local registries. If the country requires it, you can trigger verification for an Account object by using these tokens for the person.firstname attribute and setting the person.relationship.director attribute to true.\n`Account``Account`| Token | Type |\n --- | --- \n mismatchdirector | Unsuccessful verification of director due to a mismatched name. This can trigger a verificationdirectorsmismatch verification error. \n missingdirector | Unsuccessful verification due to directors missing on the account. This can trigger a verificationmissingdirectors verification error. \n extraneousdirector | Unsuccessful verification due to too many directors on the account. This can trigger a verificationextraneousdirectors verification error. \n`mismatchdirector``verificationdirectorsmismatch``missingdirector``verificationmissingdirectors``extraneousdirector``verificationextraneousdirectors`The verification errors can trigger if multiple directors on the Account object use these magic tokens.\n`Account`### Test company name verification\nTrigger company name verification for an Account object by using this token for the company.name attribute.\n`Account`| Token | Type |\n --- | --- \n mismatchbusinessname | Unsuccessful verification due to a mismatched business name. \n disallowedname | Unsuccessful verification due to a generic or well-known business name. \n matchnamerelationships | Successful verification of the business name. \n matchnameonly | Unsuccessful verification due to a business name discrepancy. \n`mismatchbusinessname``disallowedname``matchnamerelationships``matchnameonly`### Test statement descriptor verification\nTrigger statement descriptor verification for an Account object by using this token for the settings.payments.statementdescriptor attribute.\n`Account`| Token | Type |\n --- | --- \n mismatch | Trigger an invalidstatementdescriptorbusinessmismatch verification error. \n disallowed | Trigger an invalidstatementdescriptordenylisted verification error. \n`mismatch``invalidstatementdescriptorbusinessmismatch``disallowed``invalidstatementdescriptordenylisted`Trigger statement descriptor prefix verification for an Account object by using this token for the settings.cardpayments.statementdescriptorprefix attribute.\n`Account`| Token | Type |\n --- | --- \n mismatch | Trigger an invalidstatementdescriptorprefixmismatch verification error. \n disallowed | Trigger an invalidstatementdescriptorprefixdenylisted verification error. \n`mismatch``invalidstatementdescriptorprefixmismatch``disallowed``invalidstatementdescriptorprefixdenylisted`### Test business URL verification\nTrigger URL verification for an Account object by using this token for the businessprofile.url attribute.\n`Account`| Token | Type |\n --- | --- \n https://disallowed.stripe.com | Trigger an invalidurldenylisted verification error. \n https://geoblocked.stripe.com | Trigger an invalidurlwebsiteinaccessiblegeoblocked verification error. \n https://problem.stripe.com | Trigger an invalidurlwebsiteother verification error. \n https://missing.stripe.com | Trigger an invalidurlwebsiteincomplete verification error. \n https://mismatch.stripe.com | Trigger an invalidurlwebsitebusinessinformationmismatch verification error. \n https://passwordprotected.stripe.com | Trigger an invalidurlwebsiteinaccessiblepasswordprotected verification error. \n https://accessible.stripe.com | Trigger a successful validation of the URL. \n https://underconstruction.stripe.com | Trigger an invalidurlwebsiteincompleteunderconstruction verification error. \n https://inaccessible.stripe.com | Trigger an invalidurlwebsiteinaccessible verification error. \n`https://disallowed.stripe.com``invalidurldenylisted``https://geoblocked.stripe.com``invalidurlwebsiteinaccessiblegeoblocked``https://problem.stripe.com``invalidurlwebsiteother``https://missing.stripe.com``invalidurlwebsiteincomplete``https://mismatch.stripe.com``invalidurlwebsitebusinessinformationmismatch``https://passwordprotected.stripe.com``invalidurlwebsiteinaccessiblepasswordprotected``https://accessible.stripe.com``https://underconstruction.stripe.com``invalidurlwebsiteincompleteunderconstruction``https://inaccessible.stripe.com``invalidurlwebsiteinaccessible`### Test Doing Business As (DBA) verification\nTrigger DBA verification for an Account object by using this token for the businessprofile.name attribute.\n`Account`| Token | Type |\n --- | --- \n disalloweddba | Trigger an invalidbusinessprofilenamedenylisted verification error. \n invaliddba | Trigger an invalidbusinessprofilename verification error. \n`disalloweddba``invalidbusinessprofilenamedenylisted``invaliddba``invalidbusinessprofilename`### Test product description verification\nTrigger product description verification for an Account object by using this token for the businessprofile.productdescription attribute.\n`Account`| Token | Type |\n --- | --- \n requireurl | Trigger an invalidurlwebpresencedetected verification error. \n`requireurl``invalidurlwebpresencedetected`### Test phone number validation\nClear phone number validation for an Account object by using this token for the following attributes:\n• businessprofile.supportphone\n• company.phone\n• individual.phone\nClear phone number validation for a Person object by using this token for the phone attribute.\n Token | Type \n --- | --- \n 0000000000 | Successful validation \n`0000000000`### Test capability disabled reasons\nTrigger assignment of a specific requirements.disabledreason to all of an Account object’s inactive Capability objects by using this token for the account’s businessprofile.url attribute.\n`Account``Capability`| Token | Type |\n --- | --- \n https://inactivity.stripe.com | Set an account with no recent activity as inactive and pause all verifications for it. Set the disabled reason for any inactive capabilities to paused.inactivity (rejected.other for API versions prior to 2024-06-20). \n`https://inactivity.stripe.com``paused.inactivity``rejected.other``2024-06-20`## Trigger or advance verification\n#Trigger cards\nUse these card numbers to trigger various conditions when you’re testing both requirements and tiered verification. For the trigger actions to work, you must use these cards with a Connect charge by setting onbehalfof, or creating the charge directly on the connected account.\n Number | Token | Type \n --- | --- | --- \n 4000000000004202 | tokvisatriggerNextRequirements | Changes the next set of eventually due requirements to currently due. \n 4000000000004210 | tokvisatriggerChargeBlock | Triggers a charge block. \n 4000000000004236 | tokvisatriggerPayoutBlock | Triggers a payout block. \n`tokvisatriggerNextRequirements``tokvisatriggerChargeBlock``tokvisatriggerPayoutBlock`#### Trigger next requirements\nLive mode can require additional verification information when a connected account processes a certain amount of volume. This card sets any additional verification information to be required immediately. If no additional information is required, nothing appears.\n#Trigger a charge or payout block\nIf required information isn’t provided by the deadline, Stripe disables the connected account’s charges or payouts. These cards disable the connected account and move any currently due requirements to overdue. These cards have no effect until an account provides the initial information that’s required to enable charges and payouts.\n#Trigger bank account ownership verification\nConnected accounts in the United States and India are subject to Bank account ownership verification. You can complete this verification by uploading supporting documents with the Connect Dashboard or with the API through the documents[bankaccountownershipverification] hash.\nIn test mode, you can simulate the US bank account ownership verification process. Use the following test bank account numbers to trigger the verification process. One number presumes successful verification and the other prompts you to upload test images or file tokens to complete the verification process. These test accounts are only available for US accounts.\n Routing | Account | Type \n --- | --- | --- \n 110000000 | 000999999991 | Triggers and completes the bank account ownership verification process after a short delay \n 110000000 | 000999999992 | Triggers the bank account ownership verification process after a short delay and requests for document upload \n`110000000``000999999991``110000000``000999999992`### Simulate requirements\nIf your platform has connected accounts in different countries or plans to, you might need to verify a person’s address as well as their identity (depending on the country). Stripe provides a sample date of birth (DOB) and sample addresses to test for this requirement.\n Information provided | Person verification status | requirements.currentlydue \n --- | --- | --- \n Verified date of birth and verified address | Verified | None \n Verified date of birth and unverified address | Unverified | verification.additionaldocument \n Unverified date of birth and verified address | Unverified | verification.document \n Unverified date of birth and unverified address | Unverified | verification.additionaldocument, verification.document \n`requirements.currentlydue``verification.additionaldocument``verification.document``verification.additionaldocument``verification.document`## Add funds to Stripe balance\nTo test adding funds to your Stripe balance from a bank account in the Dashboard, enable test mode and select the desired test bank account in the drop-down menu within the Add to balance dialog. You can simulate success or failure due to insufficient funds.\nTo test adding funds in the API, use the following test bank tokens as the source while in test mode. Each token simulates a specific kind of event.\n Token | Type \n --- | --- \n btokusverified | Successful \n btokusverifiednoAccount | Unsuccessful with a noaccount code \n btokusverifiedaccountClosed | Unsuccessful with an accountclosed code \n btokusverifiedinsufficientFunds | Unsuccessful with an insufficientfunds code \n btokusverifieddebitNotAuthorized | Unsuccessful with a debitnotauthorized code \n btokusverifiedinvalidCurrency | Unsuccessful with an invalidcurrency code \n`btokusverified``btokusverifiednoAccount``noaccount``btokusverifiedaccountClosed``accountclosed``btokusverifiedinsufficientFunds``insufficientfunds``btokusverifieddebitNotAuthorized``debitnotauthorized``btokusverifiedinvalidCurrency``invalidcurrency`## Payouts\nUse the following test bank and debit card numbers to trigger certain events during payout testing. You can only use these values in test mode with test secret keys.\nTest mode payouts simulate a live payout but aren’t processed with the bank. Test mode accounts with Stripe Dashboard access always have payouts enabled, as long as valid external bank information and other relevant conditions are met, and never requires real identity verification.\n#Note\nYou can’t use test bank and debit card numbers in the Stripe Dashboard on a live mode connected account. If you’ve entered your bank account information on a live mode account, you can still use test mode, and test mode payouts will simulate a live payout without processing actual money.\n#Bank numbers\nUse these test bank account numbers to test payouts. You can only use them with test secret keys.\n IBAN | Type \n --- | --- \n DE89370400440532013000 | Payout succeeds. \n DE62370400440532013001 | Payout fails with a noaccount code. \n DE89370400440532013002 | Payout fails with a accountclosed code. \n DE89370400440532013003 | Payout fails with a insufficientfunds code. \n DE89370400440532013004 | Payout fails with a debitnotauthorized code. \n DE89370400440532013005 | Payout fails with a invalidcurrency code. \n`DE89370400440532013000``DE62370400440532013001``noaccount``DE89370400440532013002``accountclosed``DE89370400440532013003``insufficientfunds``DE89370400440532013004``debitnotauthorized``DE89370400440532013005``invalidcurrency`### Debit card numbers\nUse these test debit card numbers to test payouts to a debit card. These can only be used with test secret keys.\n Number | Token | Type \n --- | --- | --- \n 4000056655665556 | tokvisadebitustransferSuccess | Visa debit. Payout succeeds. \n 4000056655665572 | tokvisadebitustransferFail | Visa debit. Payout fails with a couldnotprocess code. \n 4000056755665555 | tokvisadebitusinstantPayoutUnsupported | Visa debit. Card isn’t eligible for Instant Payouts. \n 5200828282828210 | tokmastercarddebitustransferSuccess | Mastercard debit. Payout succeeds. \n 6011981111111113 | tokdiscoverdebitustransferSuccess | Discover debit. Payout succeeds. \n`tokvisadebitustransferSuccess``tokvisadebitustransferFail``couldnotprocess``tokvisadebitusinstantPayoutUnsupported``tokmastercarddebitustransferSuccess``tokdiscoverdebitus_transferSuccess`"}, {"path": "connect\\top-ups.md", "url": "https://docs.stripe.com/connect/top-ups", "content": "#Add funds to your platform balance | Stripe Documentation\nURL: https://docs.stripe.com/connect/top-ups\n\n#Add funds to your platform balance\n#Platforms can add funds to their balance from a bank account.\nPlatforms can add funds to their Stripe balance to pay connected accounts for goods or services. There are a number of different use cases for adding funds to pay connected accounts for goods or services, including:\n• Paying bonuses or other one-off payouts, independent of specific charges.\n• Providing customer discounts while still paying full price for goods or services to sellers.\n• Adding funds from non-Stripe income (for example, checks or funds from another processor).\n• Enabling faster payouts (for example, pay a vendor before incoming funds become available).\nWhere permitted, platforms can also add funds to their Stripe balance to send funds to recipients off of Stripe (for example, via cross-border payouts). They can also pay out added funds to other accounts they own.\n#Note\nIf a transfer or payout fails due to insufficient funds in your platform balance, adding funds doesn’t automatically retry the failed action. After adding funds, you must repeat any failed transfers or payouts.\n#Requirements\nAll of these requirements must be met to add funds to your Stripe balance:\n• Your platform is in the US and the connected account receiving the funds either is in the US or has a recipient service agreement.\n• Your platform profile is approved. You can check the status in your settings after completing the platform profile.\nWhen adding funds to your balance, use a manual payout schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your payout settings.\n#Note\nOnly team members with administrator access to the platform Stripe account and who’ve enabled two factor authentication can add funds.\nIf you’re new to Connect, start with a guide to add funds to your platform balance and pay out money.\n#Confirm funding purpose\nTo add funds, go to the Balance section in the Dashboard.\nClick Add to balance and select why you are adding funds to your account.\nClick Pay out connected accounts to add funds that are paid out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, click Cover negative balances and see adding funds to your Stripe balance.\n#Verify your bank account\nYou must use a verified bank account to add funds. You’ll go through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account.\nIf your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear on your online banking statement within 1-2 business days. You’ll see ACCTVERIFY for the statement description.\n`ACCTVERIFY`Stripe notifies you in the Dashboard and through email when the microdeposits should have arrived in your account. To complete the verification process, click the Dashboard notification in the Balance section, enter the two microdeposit amounts, and click Verify account.\n#Add funds\nOnce verified, you can use the Dashboard or the API to add funds to your account balance.\n# In the Dashboard, go to the Balance section.\n# In the Add to balance window, enter an amount in USD and click Connect payouts.\n# In the resulting modal window (shown below), enter an amount in USD.\n# Verify the amount and click Add funds.\n# The resulting object is called a top-up and can be viewed in the Top-ups section of the Dashboard.\n# After the funds are available in your platform’s Stripe balance, you can transfer funds to a connected account through the API or the Dashboard. In the Dashboard, transfer funds to a connected account by clicking Add funds in the Balance section of the connected account’s detail page.\n#View your funds\nView your added funds in the Dashboard on Top-ups tab under the Balance page. Each time you add funds, a top-up object is made that has a unique ID with the format tuXXXXXX, which you can see on the detailed view for the top-up.\n`tuXXXXXX`## Settlement timing\nUS platforms add funds via ACH debit, and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting Stripe Support.\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\nAdding funds for future refunds and disputes or to repay a negative balance can happen through bank or wire transfer, and be available in 1-2 business days.\n#Testing\nYou can use the Dashboard or the API to test adding funds to your balance."}, {"path": "connect\\upcoming-requirements-updates.md", "url": "https://docs.stripe.com/connect/upcoming-requirements-updates", "content": "#Upcoming requirements updates | Stripe Documentation\nURL: https://docs.stripe.com/connect/upcoming-requirements-updates\n\n#Upcoming requirements updates\n#Learn about the changes to required verification information and how this impacts your integration with Stripe.\nPayments regulations aim to create a safer, more secure financial ecosystem by helping prevent crimes such as money laundering, fraud, and tax evasion. Financial regulators around the world enforce Know Your Customer (KYC) requirements to make sure that identity information is collected, verified, and maintained from certain types of businesses, and for any individuals who ultimately own, control, or direct the business. These requirements are frequently updated by financial service regulators, card networks, and other financial institutions.\nThis guide provides an overview of the upcoming changes, and highlights the most significant changes. For the exhaustive list of requirements, refer to Required verification information.\nTo change how you integrate with Stripe, see Onboarding solutions for Custom accounts.\nLast updated: January 4, 2023\n#What’s changing\n• Required information collected from connected accounts: We’re updating the information we require from sole proprietorships, non-profits and single-member LLCs and simplifying how we obtain legal guardian consent for accounts opened by minors. In addition, an email for the account representative is now required for all legal entity types, and a change for government entities and public companies.\n• How we verify business information and provide new detailed verification responses: We’re updating our criteria for valid business information and introducing new verification error codes when we unable to accept or verify information provided.\n• Threshold at which we verify tax identification numbers (TINs): For Custom and Express connected accounts, we’re lowering the payments volume threshold at which we verify TINs to align with current federal tax reporting thresholds.\n• How we prefill statement descriptors and statement descriptor prefixes: If a statement descriptor isn’t provided, the prefill logic has changed to use either the business profile name, the business URL, or the legal entity name of the connected account.\nThese changes will affect all users with a requested cardpayments capability in the US.\n#Required information collected from connected accounts\nNew information collected and new fields added to the API:\n• Businesses that are company.structure of soleproprietorship and singlememberllc, must provide their business address (“company address”). In the event that the business address is the same as the representative’s personal address, your connected accounts can provide the same values for both.\n• Legal entities that are company.structure of governmentinstrumentality, taxexemptgovernmentinstrumentality, governmentalunit, publiccompany, and publiccorporation, publicpartnership must provide an email for the account representative. This requirement now applies to all legal entity types.\n• To simplify how we obtain a legal guardian’s consent for accounts opened by minors, the Persons API has been updated with a new relationship type of legalguardian as well as an additionaltosacceptances field to record the legal guardian’s agreement to the Stripe Terms of Service. If the account representative’s date of birth indicates the individual is a minor, then an account requirement is triggered to add a legalguardian before the account can be activated.\n`soleproprietorship``singlememberllc``governmentinstrumentality``taxexemptgovernmentinstrumentality``governmentalunit``publiccompany``publiccorporation``publicpartnership``legalguardian``additionaltosacceptances``legalguardian`## How we verify business information and provide new detailed verification responses\n#Updates to the information we already collect\nWe’ll request the following information from your connected accounts:\n Field | Updated requirements | Additional considerations \n --- | --- | --- \n SSN or ITIN collected from US-resident Representatives (Reps) | Last 4 digits required at onboarding for all account types (including Custom and Express connected accounts) | This is the current behavior for Standard connected accounts \n SSN or ITIN collected from US-resident Representatives (Reps) | If the last 4 digits fail to verify at onboarding, Reps will need to provide the full 9 digits at onboarding |  \n SSN or ITIN collected from US-resident Representatives (Reps) or Owners | Full 9 digits required once payments volume exceeds $500K | A Representative (Rep) is defined as a person with significant responsibility to control, manage, or direct the organization; and is authorized by the organization to agree to Stripe’s terms. For a representative, the full 9 digits are required at $500K only if no Owners are listed on the account. \n#New verification error codes\nWhen we’re unable to verify information provided by your connected accounts, we’ll surface detailed verification responses as new error codes in the requirements.errors array. View docs.\n#Synchronous errors\n Field | New error code | Error message \n --- | --- | --- \n Product Description | invalidproductdescriptionlength | Your product description must be at least 10 characters. \n Product Description | invalidproductdescriptionurlmatch | Your product description must be different from your URL. \n (Full) Statement Descriptor | invalidstatementdescriptorlength | Your statement descriptor must be between 5 and 22 characters. \n (Full) Statement Descriptor | invalidstatementdescriptorbusinessmismatch | Your statement descriptor must be similar to your business name, legal entity name, or URL. \n (Full) Statement Descriptor | invalidstatementdescriptordenylisted | Generic or well-known statement descriptors aren’t supported. \n (Short) Statement Descriptor | invalidstatementdescriptorprefixmismatch | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. \n (Short) Statement Descriptor | invalidstatementdescriptorprefixdenylisted | Generic or well-known statement descriptor prefixes aren’t supported. \n LE Business Name | invalidcompanynamedenylisted | Generic or well-known business names aren’t supported. \n Business Profile Name (DBA) | invalidbusinessprofilenamedenylisted | Generic or well-known business names aren’t supported. \n Business Profile Name (DBA) | invalidbusinessprofilename | Business profile names must consist of recognizable words. \n Persons DOB | invaliddobageunderminimum | Person must be at least 13 years old. \n Persons DOB | invaliddobageovermaximum | Date of birth must be within in the last 120 years. \n Persons phone | invalidphonenumber | The phone number doesn’t seem to be valid. Make sure it’s formatted correctly. \n LE Business Phone | invalidphonenumber | The phone number doesn’t seem to be valid. Make sure it’s formatted correctly. \n Company TaxID | invalidtaxidformat | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. \n URL | invalidurlformat | Format as https://example.com \n URL | invalidurldenylisted | Generic business URLs aren’t supported. \n`invalidproductdescriptionlength``invalidproductdescriptionurlmatch``invalidstatementdescriptorlength``invalidstatementdescriptorbusinessmismatch``invalidstatementdescriptordenylisted``invalidstatementdescriptorprefixmismatch``invalidstatementdescriptorprefixdenylisted``invalidcompanynamedenylisted``invalidbusinessprofilenamedenylisted``invalidbusinessprofilename``invaliddobageunderminimum``invaliddobageovermaximum``invalidphonenumber``invalidphonenumber``invalidtaxidformat``invalidurlformat``invalidurldenylisted`#### Asynchronous errors\n Field | New error code | Error message \n --- | --- | --- \n URL | invalidurlwebsiteinaccessible | This URL couldn’t be reached. Make sure it’s available and entered correctly or provide another. \n URL | invalidurlwebsitebusinessinformationmismatch | The business information on your website must match the details you provided to Stripe. \n URL | invalidurlwebsiteincomplete | Your website seems to be missing some required information. Learn about website requirements \n URL | invalidurlwebsiteother | We weren’t able to verify your business using the URL you provided. Make sure it’s entered correctly or provide another URL. \n URL | invalidurlwebpresencedetected | Because you use a website, app, social media page, or online profile to sell products or services, you must provide a URL for your business. \n`invalidurlwebsiteinaccessible``invalidurlwebsitebusinessinformationmismatch``invalidurlwebsiteincomplete``invalidurlwebsiteother``invalidurlwebpresencedetected`### Update to the threshold at which we verify tax identification numbers (TINs)\nTo align with the IRS reporting thresholds for Forms 1099-K, 1099-NEC, and 1099-MISC, we’re updating the threshold at which we verify the TIN to when your payments volume reaches $600 or within 30 days of first charge, whichever comes first.\n#How we prefill statement descriptors and statement descriptor prefixes\nIf not provided, the statement descriptor is prefilled using the following supplied fields (in this order): businessprofile.name (“doing business as”), businessprofile.url, the legal entity name (either individual.firstname + individual.last_name or company.name)`. In addition, if the statement descriptor prefix isn’t provided, it’s prefilled from the first 10 characters of the statement descriptor.\n#See also\n• Connect onboarding for Custom accounts\n• Onboarding solutions for Custom accounts\n• Required verification information\n• Updating accounts\n• Handling identity verification with the API\n• Testing Custom account identity verification\n• Accepted verification documents"}, {"path": "connect\\update-verified-information.md", "url": "https://docs.stripe.com/connect/update-verified-information", "content": "#Update verified user information | Stripe Documentation\nURL: https://docs.stripe.com/connect/update-verified-information\n\n#Update verified user information\n#Learn what verified information you can update for your connected accounts.\nFor connected accounts where your platform collects updated information for due or changed requirements, you collect the required information for each account during onboarding, and Stripe verifies it. If you update verified user information, Stripe must review it. If Stripe can’t verify it, you have a grace period of 14 days to resolve any issues and complete verification.\nDuring this grace period, the account functionality remains the same. For example, if charges or payouts were previously enabled, they’ll continue to be enabled until the grace period ends. The value of requirements.currentdeadline determines the end of the grace period and isn’t extended if you update additional information. Resolve all requirements by the end of the grace period to prevent charges or payouts from being disabled.\nThese fields can be updated, with a grace period, after they’ve been verified:\n• Business name\n• Business type\n• First name\n• Last name\n• Date of birth\n• Business tax ID\n• Tax ID registrar\n• Personal ID number\nThese fields can’t be updated after a company has been verified:\n• Verification documents\n#Change the account representative\nYou must specify a representative to activate the account, agree to Stripe’s terms, and act as primary contact for the account. You can change the account representative for any reason (for example, the designated representative left the company or they no longer serve as owner or executive).\nDo the following to change the account representative:\n• If necessary, add a Person object for the new representative. Stripe recommends that you verify the Person before proceeding, whether you designate an existing Person as the new representative or add a new Person.\n• Update the Person object to remove them as the current representative:\n`Person``Person``Person`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"relationship[representative]\"=false\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"relationship[representative]\"=false`- Update the Person object to nominate the new representative:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"relationship[representative]\"=true\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}}/persons/{{PERSONID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"relationship[representative]\"=true`- Monitor the requirements.currentlydue and requirements.pastdue arrays to make sure that verification of the new representative is complete. Even if the new representative Person is already verified, there might be additional requirements for the representative role.\n`requirements.currentlydue``requirements.pastdue``Person`After you set a representative to false, Stripe allows a grace period of 14 days for you to set the new representative to true and to complete verification.\n`false``true`## Update the account tax identification number\n#Note\nConnected account owners in Brazil can’t update Tax IDs (personal or business) after verification.\nWhen your connected account updates its verified Tax ID (personal or business), the account must agree again to the Stripe Services Agreement (SSA). Doing so accepts the transfer of ownership of their account and its balances from the entity assigned the initial Tax ID to the one assigned the new Tax ID. The information below describes the process for collecting this requirement when changing an account’s verified Tax ID.\n• This applies when you update or resubmit a verified representative’s existing ID number and ssnlast4.\n#Update Tax ID with a grace period\nAfter the account updates its Tax ID, the account enters a 14-day grace period during which it must re-accept the Stripe Services Agreement (SSA) and make sure it’s compliant with all requirements. If the connected account can’t meet its requirements after 14 days, Stripe pauses charges and payouts for the account.\nTo collect this requirement, you can:\n• If you use Connect Onboarding, provide a link to Stripe’s onboarding flow. From there, the account can fulfill any necessary requirements.For accounts with access to the Stripe Express Dashboard, create a single-use Dashboard login link that allows the account to edit their tax identification number and re-accept the Stripe Services Agreement (SSA).For accounts with no Stripe-hosted Dashboard access, provide a link to Connect Onboarding, where your account can edit their tax identification number and re-accept the Stripe Services Agreement (SSA).\n• If you onboard your connected accounts through your platform rather than using Connect Onboarding, you must collect this requirement by following the instructions in the following section.\nIf you use Connect Onboarding, provide a link to Stripe’s onboarding flow. From there, the account can fulfill any necessary requirements.\n• For accounts with access to the Stripe Express Dashboard, create a single-use Dashboard login link that allows the account to edit their tax identification number and re-accept the Stripe Services Agreement (SSA).\n• For accounts with no Stripe-hosted Dashboard access, provide a link to Connect Onboarding, where your account can edit their tax identification number and re-accept the Stripe Services Agreement (SSA).\nIf you onboard your connected accounts through your platform rather than using Connect Onboarding, you must collect this requirement by following the instructions in the following section.\n#Collect agreement of the Stripe Services Agreement once again\nIf you allow accounts with no Stripe-hosted Dashboard access, including Custom accounts, to update their verified Tax ID through your platform, you must add a section to make it clear that the account agrees once again to the Stripe Services Agreement (SSA). You must also make it clear that the account owner associated with the original TIN agrees to transfer ownership of the account and its balances to the owner associated with the updated TIN.\nOne way to achieve this is by including a clear reference and link to the agreement language below, then documenting that the account agrees using the update account API:\nIf you own the Stripe account associated with the original TIN, you agree to transfer ownership of the account and balances to the updated account owner (associated with the updated TIN), and that the updated owner has agreed to assume your agreements with Stripe. If you are the updated owner, you acknowledge that the ownership of this Stripe account has been transferred to you and that you assume the agreements that the prior account owner has with Stripe.\nUse the update account API to collect the requirements, providing the user’s IP address and the acceptance date as a timestamp. The acceptance date of the signature (tosacceptance[date]) must be the time that your connected account requested the update to the Tax ID number. It can also be any time after they requested the update.\n`tosacceptance[date]`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`"}, {"path": "connect\\updating-service-agreements.md", "url": "https://docs.stripe.com/connect/updating-service-agreements", "content": "#Updating service agreement acceptances | Stripe Documentation\nURL: https://docs.stripe.com/connect/updating-service-agreements\n\n#Updating service agreement acceptances\n#Learn how to update your connected accounts and handle acceptance of the Stripe Connected Account Agreement and other disclosures.\nWorking with connected accounts where your platform is liable for negative balances, including Custom and Express accounts, provides a lot of flexibility. You can access almost every Stripe account property through the API.\nPlatforms can use the API to perform many account management functions, including:\n• Handle acceptance and re-acceptance of the Stripe Connected Account Agreement (for accounts with no Stripe-hosted Dashboard access, including Custom accounts).\n• Handle identity verification (for accounts with no Stripe-hosted Dashboard access, including Custom accounts).\n• Manage the connected business’s information, such as its name, logo, and URL.\n• Set some charge behaviors.\n• Establish payout handling.\nYou can make those account updates with an update account call.\n#View and update a connected account through the platform’s Dashboard\nYou can update some account settings in the Connected accounts section of your Dashboard.\nClick any connected account in the list to open that account’s details page. The information that you can view and change depends on the account type or controller properties. Common tasks on this page include checking the status of payouts and searching for payments.\n#Stripe’s service agreements for connected accounts\nTo provide Stripe Connect services to your connected accounts, Stripe must establish a direct contractual relationship with them. That requires all connected accounts with no Stripe-hosted Dashboard access to accept the correct Stripe service agreement. The service agreement your accounts must accept depends on whether they’re merchants subject to Stripe’s full terms of service or are payment recipients subject to the recipient service agreement. You’re responsible for making sure that your accounts agree to the correct service agreement before accepting or receiving payments through Stripe on your platform.\nIf, after onboarding, one of your connected accounts transfers its ownership or updates its verified tax identification number, the updated account owner must provide their agreement to the correct Stripe service agreement. You’re responsible for obtaining that agreement.\n#Referencing Stripe’s service agreement\nYou must present your connected accounts with a link to the correct agreement, and they must expressly consent to it prior to using Stripe. For example, at the point of account activation, you can present language such as the following:\nBy registering your account, you agree to our Services Agreement and the Stripe Connected Account Agreement.\n#Add Stripe’s service agreement to your terms of service\nYou can make accepting Stripe’s service agreement easy for connected accounts by including it in your terms of service. In your terms, include a link to the correct Stripe service agreement and clearly state that accepting your terms includes accepting the Stripe service agreement. Here are some examples of text you can include in your terms:\nPayment processing services for [account holder term, for example, drivers or sellers] on [platform name] are provided by Stripe and are subject to the Stripe Connected Account Agreement, which includes the Stripe Terms of Service (collectively, the “Stripe Services Agreement”). By agreeing to [this agreement / these terms / and so on] or continuing to operate as a [account holder term] on [platform name], you agree to be bound by the Stripe Services Agreement, as the same may be modified by Stripe from time to time. As a condition of [platform name] enabling payment processing services through Stripe, you agree to provide [platform name] accurate and complete information about you and your business, and you authorize [platform name] to share it and transaction information related to your use of the payment processing services provided by Stripe.\n#Indicating acceptance\nFor connected accounts where the platform collects updated information for due or changed requirements, you must collect the updated acceptance of Stripe’s service agreement.\nTo indicate to Stripe that a connected account accepted Stripe’s service agreement, make an update account call, providing the acceptance date and IP address:\ncurl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"`### Acquirer disclosure\nTo meet Stripe’s Financial Partner requirements, you must advise your connected accounts of Stripe’s acquirers and their contact information in a clear and conspicuous manner, including this disclosure. For accounts that fall solely under the Recipient Service Agreement, you don’t need to include this disclosure.\nIf your accounts provide acceptance of Stripe’s service agreement through a Stripe onboarding product, it includes that disclosure.\n#Disclosing how Stripe processes connected account data\nWhile providing your connected accounts with Connect services, Stripe processes their data as explained in Stripe’s Privacy Policy.  You must disclose that to your accounts by providing them with a link to that policy.\nIn addition, connected accounts in Canada must consent to allow Stripe to obtain information from credit agencies to verify their identities. You can obtain that consent in your onboarding flow by incorporating language like the following where users agree to your terms of service:\nOur payment processor can obtain information from credit agencies to verify your identity. That information will be used for the purposes described in their Privacy Policy.\nIf you are using a Stripe onboarding product like embedded onboarding, but providing a link to your own privacy policy, your privacy policy must include a link to Stripe’s Privacy Policy and the following language:\nWhen you provide personal data in connection with , Stripe receives that personal data and processes it in accordance with Stripe’s Privacy Policy.\nFor Stripe to lawfully process personal data according to your instructions, you can be legally required to provide additional disclosures or obtain additional consents. Talk to your lawyer about which disclosures and consents might apply to your platform and connected accounts.\n#See also\n• Identity Verification\n• Account Tokens\n• Control Bank and Debit Card Payouts\n• Manage bank accounts and debit cards\n• Receive payouts\n• Full API reference"}, {"path": "connect\\webhooks.md", "url": "https://docs.stripe.com/connect/webhooks", "content": "#Connect webhooks | Stripe Documentation\nURL: https://docs.stripe.com/connect/webhooks\n\n#Connect webhooks\n#Learn how to use webhooks with Connect to be notified of Stripe activity.\nStripe uses webhooks to notify your application when an event happens in your account. All Connect integrations should establish a webhook endpoint to listen for Connect events.\n#Connect webhooks\nThere are a few types of webhooks:\n• Account webhooks are for activity on your own account (for example, most requests made using your API keys and without authenticating as another Stripe account). This includes all types of charges, except those made directly on a connected account.\n• Connect webhooks are for activity on any connected account. All events on the connected account are sent to the Connect webhooks. This includes the important account.updated event for any connected account and direct charges.\n`account.updated`When creating your webhook, ensure it is correctly configured to receive Connect webhook events. You can do this with the API by setting the connect parameter to true when creating the webhook endpoint, or through the Dashboard.\n`true`For Connect webhooks, only test webhooks are sent to your development webhook URLs, but both live and test webhooks are sent to your production webhook URLs. This is because you can perform both live and test transactions under a production application. For this reason, we recommend that you check the livemode value when receiving an event webhook to know what action, if any, users should take.\n`livemode`As we state in the event object reference, each event for a connected account also contains a top-level account property. It identifies the account that the webhook is sent to and the data[object] it belongs to. Because these objects belong to other accounts, you must make the API requests as the corresponding connected account to access them.\n`account``data[object]`{\n  \"id\": \"{{EVENTID}}\",\n  \"livemode\": true,\n  \"object\": \"event\",\n  \"type\": \"customer.created\",\n  \"account\": \"{{CONNECTEDACCOUNTID}}\",\n  \"pendingwebhooks\": 2,\n  \"created\": 1349654313,\n  \"data\": {...}\n}\n`{\n  \"id\": \"{{EVENTID}}\",\n  \"livemode\": true,\n  \"object\": \"event\",\n  \"type\": \"customer.created\",\n  \"account\": \"{{CONNECTEDACCOUNTID}}\",\n  \"pendingwebhooks\": 2,\n  \"created\": 1349654313,\n  \"data\": {...}\n}`There are several events related to accounts that Stripe recommends listening for:\n Event | data.object type | Description \n --- | --- | --- \n account.application.deauthorized | application | Occurs when a connected account disconnects from your platform. You can use it to trigger cleanup on your server. Available for connected accounts with access to the Stripe Dashboard, which includes Standard accounts. \n account.externalaccount.updated | An external account, such as card or bankaccount | Occurs when a bank account or debit card attached to a connected account is updated, which can impact payouts. Available for connected accounts that your platform controls, which includes Custom and Express accounts, and Standard accounts with platform controls enabled. \n account.updated | account | Allows you to monitor changes to connected account requirements and status changes. Available for all connected accounts. \n balance.available | balance | Occurs when your Stripe balance has been updated (for example, when funds you’ve added from your bank account are available for transfer to your connected account). \n paymentintent.succeeded | paymentintent | Occurs when a payment intent results in a successful charge. Available for all payments, including destination and direct charges. \n payout.failed | payout | Occurs when a payout fails. When a payout fails, the external account involved is disabled, and no automatic or manual payouts can be processed until the external account is updated. \n person.updated | person | If you use the Persons API, allows you to monitor changes to requirements and status changes for individuals. Available for connected accounts that your platform controls, which includes Custom and Express accounts, and Standard accounts with platform controls enabled. \n`account.application.deauthorized``application``account.externalaccount.updated``card``bankaccount``account.updated``account``balance.available``balance``paymentintent.succeeded``paymentintent``payout.failed``payout``person.updated``person`#Using Sinatra.\nrequire 'sinatra'\nrequire 'stripe'\nset :port, 4242\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\n#If you are testing your webhook locally with the Stripe CLI you\n#can find the endpoint's secret by running `stripe listen`\n#Otherwise, find your endpoint's secret in your webhook settings in\n#the Developer Dashboard\nendpointsecret = 'whsec...'\npost '/webhook' do\n  payload = request.body.read\n  sigheader = request.env['HTTPSTRIPESIGNATURE']\n  event = nil\n  # Verify webhook signature and extract the event.\n  # See https://stripe.com/docs/webhooks#verify-events for more information.\n  begin\n    event = Stripe::Webhook.constructevent(\n      payload, sigheader, endpointsecret\n    )\n  rescue JSON::ParserError => e\n    # Invalid payload.\n    status 400\n    return\n  rescue Stripe::SignatureVerificationError => e\n    # Invalid Signature.\n    status 400\n    return\n  end\n  if event['type'] == 'account.application.deauthorized'\n    application = event['data']['object']\n    connectedaccountid = event['account']\n    handledeauthorization(connectedaccountid, application)\n  end\n  status 200\nend\ndef handledeauthorization(connectedaccountid, application)\n  # Clean up account state.\n  puts 'Connected account ID: ' + connectedaccountid\n  puts application.tos\nend\n`# Using Sinatra.\nrequire 'sinatra'\nrequire 'stripe'\nset :port, 4242\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\n#If you are testing your webhook locally with the Stripe CLI you\n#can find the endpoint's secret by running `stripe listen`\n#Otherwise, find your endpoint's secret in your webhook settings in\n#the Developer Dashboard\nendpointsecret = 'whsec...'\npost '/webhook' do\n  payload = request.body.read\n  sigheader = request.env['HTTPSTRIPESIGNATURE']\n  event = nil\n  # Verify webhook signature and extract the event.\n  # See https://stripe.com/docs/webhooks#verify-events for more information.\n  begin\n    event = Stripe::Webhook.constructevent(\n      payload, sigheader, endpointsecret\n    )\n  rescue JSON::ParserError => e\n    # Invalid payload.\n    status 400\n    return\n  rescue Stripe::SignatureVerificationError => e\n    # Invalid Signature.\n    status 400\n    return\n  end\n  if event['type'] == 'account.application.deauthorized'\n    application = event['data']['object']\n    connectedaccountid = event['account']\n    handledeauthorization(connectedaccountid, application)\n  end\n  status 200\nend\ndef handledeauthorization(connectedaccountid, application)\n  # Clean up account state.\n  puts 'Connected account ID: ' + connectedaccountid\n  puts application.tos\nend`The events listed above are the ones we typically recommend Connect integrations listen for, but there are many other event types you may be interested in.\n#Test webhooks locally\nYou can test webhooks locally with the Stripe CLI.\n# If you haven’t already, install the Stripe CLI on your machine.\n# Log in to your Stripe account and set up the CLI by running stripe login on the command line.\n# Allow your local host to receive a simulated event on your connected account by running stripe listen --forward-to localhost:{PORT}/webhook in one terminal window, and running stripe trigger {{EVENTNAME}} in another.\nIf you haven’t already, install the Stripe CLI on your machine.\nLog in to your Stripe account and set up the CLI by running stripe login on the command line.\n`stripe login`Allow your local host to receive a simulated event on your connected account by running stripe listen --forward-to localhost:{PORT}/webhook in one terminal window, and running stripe trigger {{EVENTNAME}} in another.\n`stripe listen --forward-to localhost:{PORT}/webhook``stripe trigger {{EVENT_NAME}}`#### Note\nFor Connect webhooks, use –forward-connect-to with stripe listen and –stripe-account with stripe trigger.\n`stripe listen``stripe trigger`## See also\n• Webhook documentation\n• Event object reference"}, {"path": "connect\\accounts-v2\\saas-platform-payments-billing.md", "url": "https://docs.stripe.com/connect/accounts-v2/saas-platform-payments-billing", "content": "#SaaS platform payments with subscription billing using Accounts v2 | Stripe Documentation\nURL: https://docs.stripe.com/connect/accounts-v2/saas-platform-payments-billing\n\n#SaaS platform payments with subscription billing using Accounts v2Private preview\n#Learn how a SaaS platform charges its connected accounts with Stripe Billing using Accounts v2.\nSaaS (Software as a Service) platforms using Connect often charge subscription fees for providing their platform services. Accounts v1 requires platforms to maintain separate Stripe objects to enable a single business to both pay for a subscription (as a Customer) and operate on the platform (as an Account). Accounts v2 allows you to manage all your interactions with your connected accounts through a single, multi-configuration object.\n`Customer``Account`## The Accounts v2 API\nIn API v2, Account objects can have multiple configurations. Each configuration represents a different type of business relationship and enables different Stripe products. By assigning multiple configurations to an Account, a SaaS platform can enable both Connect and Billing for it without also having to create a Customer.\n`Account``Account``Customer`The Accounts v2 API provides:\n• Unified representation: A single Account object can represent multiple relationships between connected accounts and your platform.\n• Flexible configurations: Enable or change Stripe products and features by changing the configurations assigned to an Account.\n• Centralized identity data: The Account object stores all of a connected account’s identity data. When you add a configuration to an existing Account, you don’t have to collect requirements that they already provided.\n`Account``Account``Account``Account`When looking at Stripe documentation, be aware of the structural differences between an Account in API v2 and an Account in API v1. For example:\n• In API v2, some properties are part of an account’s configuration or identity properties, which only exist in Accounts v2.\n• Accounts in API v2 represent functionality such as cardpayments and stripebalance.stripetransfers as features, each associated with a configuration type. Accounts in API v1 represent similar functionality as capabilities.\n• In API v2, each requirement has its own status properties. In API v1, an Account includes arrays for each requirement status, and requirements appear in one or more of those arrays, according to their status.\n`cardpayments``stripebalance.stripetransfers``features``capabilities``status`The following table illustrates how some Accounts v1 properties map to Accounts v2 properties.\n Accounts v1 property | Accounts v2 property \n --- | --- \n businessprofile.url | identity.businessdetails.url \n businessprofile.supporturl | configuration.merchant.support.url \n businessprofile.productdescription | identity.businessdetails.productdescription \n Each requirement appears in one or more arrays, according to its status.requirements.currentlyduerequirements.eventuallyduerequirements.pastdue | Each requirement has its own status enum properties for restricting features and payouts, as well as a minimum status matching the earlier of the two. The value of each status can be currentlydue, eventuallydue, or pastdue.requirements.entries.impact.restrictsfeatures.deadline.statusrequirements.entries.impact.restrictspayouts.deadline.statusrequirements.entries.minimumdeadline.status \n• requirements.currentlydue\n• requirements.eventuallydue\n• requirements.pastdue\n`status``status``status``currentlydue``eventuallydue``pastdue`- requirements.entries.impact.restrictsfeatures.deadline.status\n• requirements.entries.impact.restrictspayouts.deadline.status\n• requirements.entries.minimumdeadline.status\n#Using Connect and Billing in API v1 with Accounts and Customers\nIn API v1, Account objects support only Connect features. To charge a connected account using a subscription, a platform must create a Customer object representing the same connected account. Accounts v1 and Customers v1 have no explicit relationship, so the platform must manage those objects separately and maintain a map of Account IDs to Customer IDs.\n`Account``Customer``Account``Customer`#### SaaS platform relationships with Accounts and Customers in API v1\n#Using Connect and Billing in API v2 with Accounts\nWith Accounts v2, a connected account that collects payments and pays you a subscription fee doesn’t require both an Account object and a Customer object. Instead, you represent it by assigning the applicable configurations to the Account.\n`Account``Customer``Account`To enable a connected account to collect payments from customers, assign the Merchant configuration to the corresponding Account.\n`Account`#### Platform and Account with Merchant configuration\nTo enable the platform to collect payments, including subscription payments, from the connected account, add the Customer configuration to the Account.\n`Account`#### Platform and Account with Merchant and Customer configurations\n#Note\nYou can collect application fees from an Account with the Merchant configuration. Assigning the Customer configuration to it doesn’t affect that ability.\n`Account`## Private preview considerations\nThe private preview release of Accounts v2 has some limitations. Consider the following:\n• Stripe products: The preview integration uses Billing to collect subscription fees and Connect to enable embedded payments.\n• Dashboard access and account types: Your connected accounts can’t use the full or Express Stripe Dashboard. Build a custom interface or use Connect embedded components.\n• Payment methods: Accounts with the Merchant configuration can accept only card payments. They can’t accept wallet payments or Link payments, regardless of the Link integration.\n• Charge types: The preview integration supports only direct charges and destination charges with the onbehalfof parameter. You can’t use destination charges without onbehalfof or separate charges and transfers.\n`Accounts``onbehalfof``onbehalfof`"}, {"path": "connect\\connect-embedded-components\\quickstart.md", "url": "https://docs.stripe.com/connect/connect-embedded-components/quickstart", "content": "#Integrate with Connect embedded components | Stripe Documentation\nURL: https://docs.stripe.com/connect/connect-embedded-components/quickstart"}, {"path": "connect\\cross-border-payouts\\special-requirements.md", "url": "https://docs.stripe.com/connect/cross-border-payouts/special-requirements", "content": "#Country-specific considerations for cross-border payouts | Stripe Documentation\nURL: https://docs.stripe.com/connect/cross-border-payouts/special-requirements\n\n#Country-specific considerations for cross-border payouts\n#Learn about country-specific requirements for receiving payments from other countries.\nThe minimum payout amounts for cross-border payouts depend on the recipient connected account’s country. Also, cross-border payouts to connected accounts in certain countries might have additional bank or fund flow restrictions.\n#Cross-border minimum payout amounts\nThe minimum cross-border payout amount for a given country depends on the lowest amount that Stripe can support with our banking partners. Typically, the minimum is one base unit of the recipient account’s local currency. In some cases, Stripe sets a higher minimum to account for possible bank fees.\n#Cross-border minimum payout amounts per country\n#Bank restrictions\nMost banks can accept payments from other countries without any special requirements. Some banks in certain countries require additional information about recipient identity or transactions for risk and compliance purposes. The receiving bank often has discretion over what they require for cross-border transactions, which can differ between banks, even within the same country.\nIf a connected account onboards to your platform in a country with special restrictions, we send an email to alert them about the possibility of additional requirements. If the receiving bank requires additional information about the connected account, direct them to contact the account.\nSome country-specific bank requirements can result in additional fees for a connected account to receive payouts. In those countries, Stripe might also set a higher minimum payout to account for those fees.\nThe following list of country-specific requirements isn’t exhaustive, because Stripe has no control over them and can’t guarantee notification of changes. If you encounter additional requirements that aren’t listed, please notify Stripe support.\nPossible special requirements include:\n#Bangladesh\n• Submitting a remittance form.\n• Providing a receipt or invoice as proof that the recipient is legitimately receiving the payment.\n• Paying additional fees.\n#Japan\n• Visiting a bank location to submit a copy of their ID and additional paperwork, if they haven’t previously done so. Banks require a national ID card number (MyNumber) to be submitted and on file before they can receive or send international transfers.\n• Providing a receipt or invoice as proof that the recipient is legitimately receiving the payment.\n• Paying additional fees.\n• Supporting payouts only to banks participating in the Foreign Exchange Yen Clearing System (FXYCS).\n#Serbia\n• Providing additional information on the purpose of the payment.\n• Providing a receipt or invoice as proof that the recipient is legitimately receiving the payment.\n• Submitting a remittance form.\n#Fund flow restrictions\nThe following fund flows are generally supported in countries for cross-border payouts:\n• Separate charges and transfers without the onbehalfof parameter\n• Top-up and transfers\n• Destination charges\n`onbehalfof`Direct charges and destination charges with the onbehalfof parameter aren’t supported. However, some countries have additional limitations.\n`onbehalfof`For Brazil, India, and Thailand, only the following fund flows are supported:\n• Separate charges and transfers without the onbehalfof parameter\n• Top-up and transfers\n`onbehalfof`"}, {"path": "connect\\custom\\hosted-onboarding.md", "url": "https://docs.stripe.com/connect/custom/hosted-onboarding", "content": "#Stripe hosted onboarding for Custom accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/custom/hosted-onboarding\n\n#Stripe hosted onboarding for Custom accounts\n#Let Stripe collect identity verification information for your Custom connected accounts.\nConnect Onboarding for Custom Accounts is a web form hosted by Stripe that takes care of collecting identity verification information from users. It dynamically adjusts the information that it collects to reflect the connected account’s capabilities, country, and business type. Connect Onboarding is the recommended solution to collect identity verification information for Custom accounts, and ensures that your flow is optimized for:\n• Mobile browsers\n• Accessibility\n• Internationalization and localization\n• Conversion rate\n• Intelligently requesting requirements based on what’s already provided on the account\nHere’s what the form looks like for Stripe’s sample integration, Rocket Deliveries:\n#How to use Connect Onboarding for Custom Accounts\n# Navigate to your onboarding settings to customize the visual appearance of the form. You must provide the name, color, and icon of your brand. You must collect bank account details within the form, either manually or instantly with Stripe Financial Connections.\n# Create a new account and get the account ID, or use an existing account ID (in the form of acctXXXXXXXX).\n# If you have information about the account holder (like their name, address, or other details), you can proactively provide this through the account create or update methods. The more information provide through the API, the less information Connect Onboarding prompts your user for.\n# Call the Account Links with the following parameters (see the API ref for more):accountrefreshurlreturnurltypecollectionoptions (optional)\n# In the onboarding flow for your own platform, redirect your user to the url returned by Account Links.\n# Handle additional account states, redirecting your user back into the Connect Onboarding flow if necessary. To handle user-initiated updates to information they’ve already provided, create a way for your user to get a new redirect to the Connect Onboarding form from your platform’s Dashboard.\n`acctXXXXXXXX`- account\n• refreshurl\n• returnurl\n• type\n• collectionoptions (optional)\n`account``refreshurl``returnurl``type``collectionoptions``url`## Determine the information to collect\nConnect Onboarding for Custom Accounts supports upfront or incremental onboarding. Upfront onboarding collects the eventuallydue requirements for the account, while incremental onboarding collects the currentlydue requirements. For the advantages and disadvantages of each, see the onboarding flows documentation.\n`eventuallydue``currentlydue`The currentlydue requirements request only the user information needed for verification at this specific point in time; the eventuallydue requirements include a more complete set of questions that we’ll eventually need to collect.\n`currentlydue``eventuallydue`Based on the needs of your platform, pass either currentlydue or eventuallydue as the value of the collectionoptions.fields parameter in your calls to Account Links. Here’s an example request:\n`currentlydue``eventuallydue``collectionoptions.fields`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding \\\n  -d \"collectionoptions[fields]\"=eventuallydue\n`curl https://api.stripe.com/v1/accountlinks \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  --data-urlencode refreshurl=\"https://example.com/reauth\" \\\n  --data-urlencode returnurl=\"https://example.com/return\" \\\n  -d type=accountonboarding \\\n  -d \"collectionoptions[fields]\"=eventuallydue`## Redirect your user to the Account Link URL\nThe response to your Account Links request includes a value for the key url. Redirect your user to this link to send them into the flow. You can only use your Account Link URLs one time because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. If you enable Collect external account information for accounts where the platform is responsible for collecting requirements in your payout onboarding settings, or if the treasury capability is requested, the user must set up additional authentication with Stripe before entering the onboarding flow.\n`url``treasury`#### Security tip\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n#Handle the user returning to your platform\nConnect Onboarding requires you to pass both a returnurl and refreshurl to handle all cases in which the user will be redirected back to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n`returnurl``refreshurl`#### Note\nYou can use HTTP for your returnurl and refreshurl while you’re in test mode (for example, to test with localhost), but for live mode only HTTPS is accepted. Be sure you’ve swapped any testing URLs for HTTPS URLs before going live.\n`returnurl``refreshurl`#### returnurl\nStripe will issue a redirect back to this URL when the user completes the Connect Onboarding flow, or clicks Save for later at any point in the flow. It does not mean that all information has been collected, or that there are no outstanding requirements on the account. It only means the flow was entered and exited properly.\nNo state is passed with this URL. After a user is redirected to your returnurl, check the state of the requirements attribute on their account. You can either listen to account.updated webhooks or retrieve the Account object and inspect the state of its requirements attribute. See more details in Step 4 below.\n`returnurl``requirements``account.updated``requirements`#### refreshurl\nYour user will be redirected to the refreshurl in these cases:\n`refreshurl`- The link is expired (a few minutes went by since the link was created)\n• The link was already visited (the user refreshed the page or clicked the back/forward button)\n• The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which cause them to become expired\nYour refreshurl should trigger a method on your server to call Account Links again, with the same parameters, and redirect the user back into the Connect Onboarding flow to create a seamless experience.\n`refreshurl`## Handle the case of new requirements becoming due\nSet up your integration to listen for changes to account requirements, if you haven’t already done so. We recommend using webhooks to do so. You can test handling new requirements (and how they may disable charges and payouts) with our test mode trigger cards.\nWhen upcoming requirements updates affect your connected accounts, we’ll notify you.\nIf you use embedded or Stripe-hosted onboarding, you can proactively collect information to fulfill future requirements. For embedded onboarding, include the collectionOptions attribute in the embedded onboarding component. For Stripe-hosted onboarding, specify the collectionoptions parameter when creating account links.\n`collectionOptions``collectionoptions`Based on the verification needs of your application, send the user back into Connect Onboarding as necessary to satisfy currentlydue or eventuallydue requirements as described in step 1. You can use this as a signal of when to send your user back into the flow. Keep in mind that using Connect Onboarding means you don’t really need to worry about what the requirements are – sending the user back into Connect Onboarding means it will collect the right information.\n`currentlydue``eventuallydue`For example, if your user mistypes their information and they can’t be verified, they could be asked to provide an Identity Document (for example, a Driver’s License in the United States). Sending this user into Connect Onboarding prompts them to upload such a document to ensure they become verified.\n#Note\nConnect Onboarding for Custom Accounts doesn’t collect the externalaccount requirement by default. To collect externalaccount, enable Collect external account information for accounts where the platform is responsible for collecting requirements in your payout onboarding settings. Learn more about managing bank accounts and debit cards.\n`externalaccount``externalaccount`## Handle the case of user-initiated updates\nMost Connect Onboarding usage discussed thus far has been about prompting the user to provide new information. Connect Onboarding also supports user-initiated updates to the information they’ve already provided in the type parameter of the Account Link. type accepts one of two values: accountonboarding or accountupdate.\n`type``type``accountonboarding``accountupdate`#### accountonboarding\nThis value for type provides a form for inputting outstanding requirements. Use it when you’re onboarding a new user, or when an existing user has new requirements; such as when a user had already provided enough information, but you requested a new capability that needs additional info. Send the user to the form in this mode to just collect the new information you need.\n`type`#### accountupdate\nThis value for type displays the attributes that are already populated on the account object and allows your user to edit previously provided information. Provide an access point in your platform website to a type=accountupdate Account Link for users to make updates themselves (for example, when their address changes). Consider framing the link as “edit my profile” or “update my verification information.”\n`type``type=account_update`## Supported browsers\nHosted onboarding supports the same set of browsers that the Stripe Dashboard currently supports:\n• The last 20 major versions of Chrome and Firefox\n• The last two major versions of Safari and Edge\n• The last two major versions of mobile Safari on iOS\nHosted onboarding isn’t supported when embedded through webviews. It’s only supported in standalone browsers.\n#See also\n• Identity verification"}, {"path": "connect\\custom\\onboarding.md", "url": "https://docs.stripe.com/connect/custom/onboarding", "content": "#Onboarding solutions for Custom accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/custom/onboarding\n\n#Onboarding solutions for Custom accounts\n#Choose the onboarding method for Custom accounts that suits your business.\nStripe offers several ways to onboard Custom connected accounts. You can choose the best onboarding method for your business.\n#Note\nWe recommend using Stripe-hosted onboarding or embedded onboarding components. Both automatically update to handle changing requirements when they apply to a connected account. With embedded components, you can match them to your branding and control which policies and terms are shown.\n Method | Pros | Cons \n --- | --- | --- \n Stripe-hosted onboarding | Lowest effort integration | Stripe-branded with limited platform brandingLimited control over the flow logicConnected accounts redirect to Stripe instead of completing the process without leaving your site \n Embedded onboarding | Highly themeableLimited or no Stripe brandingConnected accounts remain in the flow of your siteLow effort integration | Limited control over the flow logic \n API-based onboarding | Exercise full control over your own UI | Expensive and time-consuming to buildContinuing high maintenance, especially to keep in compliance with changing global requirementsCan’t resolve Stripe risk reviews \n• Lowest effort integration\n• Stripe-branded with limited platform branding\n• Limited control over the flow logic\n• Connected accounts redirect to Stripe instead of completing the process without leaving your site\n• Highly themeable\n• Limited or no Stripe branding\n• Connected accounts remain in the flow of your site\n• Low effort integration\n• Limited control over the flow logic\n• Exercise full control over your own UI\n• Expensive and time-consuming to build\n• Continuing high maintenance, especially to keep in compliance with changing global requirements\n• Can’t resolve Stripe risk reviews\n#Stripe hosted onboarding\nStripe hosted onboarding allows you to redirect your user to Stripe to complete the onboarding process in a co-branded interface. Create an Account Link and direct your user to the hosted onboarding flow. The returnurl allows Stripe to return the user to your application and allow you to progress the connected account accordingly.\nTo integrate Stripe hosted onboarding, follow our Stripe hosted onboarding guide.\n#Embedded onboarding\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Connected account users interact with the embedded component without ever leaving your application. Embedded onboarding uses the Accounts API to read the requirements and generate an onboarding form that is localized for all Stripe-supported countries and has robust data validation. In addition, embedded onboarding handles all:\n• Business types\n• Configurations of company representatives\n• Verification document uploading\n• Identify verification and statuses\n• International bank accounts\n• Error states\nYou can integrate embedded onboarding with a few lines of code, whereas API-based onboarding requires you to construct custom logic. To integrate embedded onboarding, follow our embedded components guide and integrate the Account onboarding embedded component.\n#API-based onboarding\nAPI-based onboarding involves building out each aspect of your site’s onboarding user interface to call the corresponding Stripe APIs. Your integration must satisfy all of Stripe’s onboarding requirements.\n#Establish Requirements\nThe following factors affect the onboarding requirements for your connected accounts:\n• The origin country of the connected accounts\n• The service agreement type applicable to the connected accounts\n• The capabilities requested for the connected accounts\n• The business type (for example, individual or company) and company.structure (for example, public corporation or private partnership)\nUse the interactive form to see how changing these factors affects the requirements.\n#Requirements form\n#Create forms to collect information\nAs a best practice, organize the required parameters into logical groupings or forms in your onboarding flow. You might wish to encode a mapping between the Stripe parameters and the logical groupings. Suggested logical groupings for parameters are shown in the first column of the example requirements table.\nAfter you encode the required parameters into your application, generate UIs for the parameters corresponding to these requirements. For each parameter, design a UI form that includes:\n• Parameter label, localized to each supported country and language\n• Parameter description, localized to each supported country and language\n• Parameter input fields with data validation logic and document uploading where required\nIt’s important to architect your application logic to account for the possibility of additional parameters in the future. For example, Stripe might introduce new parameters, new verifications, or new thresholds that you must incorporate into your onboarding flows over time.\nChanging any of the factors that determine your connected accounts requirements means you must also adjust your collection forms. Country and service agreement type are immutable, while capabilities and business type are mutable.\n• To change an immutable field such as country or service agreement type, create a new connected account with the new values. Doing so produces new requirements for you to incorporate in your collection flows.\n• To change a mutable field such as capabilities or business type, update the connected account. Doing so produces new requirements for you to incorporate in your collection flows.\n#Include Stripe Terms of Service Agreement\nYour connected accounts must accept Stripe terms of service before they can be activated. You can wrap Stripe terms of service in your own terms of service.\n#Create the Connected Account\nUse the Create Account API to create a connected account with country, service type agreement, desired capabilities, business type, and any other information matching your requirements. At a minimum, you must specify capabilities and type. If you don’t specify other parameters, they’re assigned the following default values:\n`capabilities``type`- The service type agreement (tosacceptance.serviceagreement) defaults to full.\n• The country defaults to the same country as your platform.\n`tosacceptance.serviceagreement``full``country`The following code sample creates a Custom connected account with cardpayments and transfers capabilities under a full service agreement for an individual.\n`cardpayments``transfers`#### Note\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as address and websiteurl, see the Create Account API reference.\n`address``websiteurl`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d type=custom \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d country=US \\\n  -d type=custom \\\n  -d \"capabilities[cardpayments][requested]\"=true \\\n  -d \"capabilities[transfers][requested]\"=true`### Take your account through the onboarding flow\nYou can enable connected accounts in either of two ways:\n• Incremental onboarding strategy: Collect the minimum required information up front and the rest later\n• Upfront onboarding strategy: Collect all information up front\nThe incremental onboarding strategy speeds up initial onboarding but requires additional information collection later on. The upfront onboarding strategy minimizes enablement disruption throughout the connected account’s lifecycle at the expense of a lengthier application process. You can decide which strategy better suits your use case.\nTo implement your onboarding strategy, inspect the requirements hash of the connected account you created. The requirements hash provides a complete list of parameters you must collect to activate the connected account.\n• If you choose the incremental onboarding strategy, inspect the currentlydue field in the requirements hash and build an onboarding flow that only collects for the listed parameters.\n• If you choose the upfront onboarding strategy, inspect the eventuallydue field in the requirements hash and build an onboarding flow that collects for all the listed parameters.\n`currentlydue``eventuallydue`{\n  ...\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"disabledreason\": \"requirements.pastdue\",\n    \"errors\": [],\n    \"eventuallydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}\n`{\n  ...\n  \"requirements\": {\n    \"alternatives\": [],\n    \"currentdeadline\": null,\n    \"currentlydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"disabledreason\": \"requirements.pastdue\",\n    \"errors\": [],\n    \"eventuallydue\": [\n      \"businessprofile.productdescription\",\n      \"businessprofile.supportphone\",\n      \"businessprofile.url\",\n      \"externalaccount\",\n      \"tosacceptance.date\",\n      \"tosacceptance.ip\"\n    ],\n    \"pastdue\": [],\n    \"pendingverification\": []\n  },\n  ...\n}`### Update the connected account\nUpdate the connected account object with new information as it progresses through your onboarding flow. Perform an Update Account call, identifying the connected account by the id value you stored earlier.\n`id`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode \"businessprofile[url]\"=\"https://furever.dev\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  --data-urlencode \"businessprofile[url]\"=\"https://furever.dev\" \\\n  -d \"tosacceptance[date]\"=1609798905 \\\n  -d \"tosacceptance[ip]\"=\"8.8.8.8\"`Stripe validates every update to a connected account. Update the account at each step in onboarding to allow Stripe to validate information as soon as it’s added, while your users continue through the onboarding flow. After Stripe confirms acceptance of our terms of service, any changes to the connected account trigger reverification. For example, if you change the connected account’s name and ID number, Stripe reruns verifications.\nWhen updating a connected account, you must handle any verification errors or HTTP error codes returned by the Accounts API.\n#Verification handling\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have a pending status.\n#Review status\nYou can retrieve the status of your connected account’s capabilities by:\n• Inspecting the Account object’s capabilities hash for the relevant capability.\n• Requesting capabilities directly from the Capabilities API and inspecting the status of the relevant capability.\n• Listening for account.updated events in your webhook endpoint and inspecting the capabilities hash for the relevant capability.\n`account.updated``capabilities`After verifications are complete, the capability becomes active and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of active. Listen for account.updated events to detect changes to capability states.\n`active``active``account.updated`Confirm that your Connect integration is compliant and operational by checking that the account’s chargesenabled and payoutsenabled are both true. You can use the API or listen for account.updated events. For details on other relevant fields, check the account’s requirements hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n`chargesenabled``payoutsenabled``account.updated`- chargesenabled confirms that your full charge path including the charge and transfer works correctly and evaluates if either cardpayments or transfers capabilities are active.\n• payoutsenabled evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You must eventually enable payouts to pay your connected accounts.\n`cardpayments``transfers`You can use the following logic as a starting point for defining a summary status to display to your connected account.\n#Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\ndef accountstate(account)\n  reqs = account.requirements\n  if reqs.disabledreason && reqs.disabledreason.include?(\"rejected\")\n    \"rejected\"\n  elsif account.payoutsenabled && account.chargesenabled\n    if reqs.pendingverification\n      \"pending enablement\"\n    elsif !reqs.disabledreason && !reqs.currentlydue\n      if !reqs.eventuallydue\n        \"complete\"\n      else\n        \"enabled\"\n      end\n    else\n      \"restricted\"\n    end\n  elsif !account.payoutsenabled && account.chargesenabled\n    \"restricted (payouts disabled)\"\n  elsif !account.chargesenabled && account.payoutsenabled\n    \"restricted (charges disabled)\"\n  elsif reqs.pastdue\n    \"restricted (past due)\"\n  elsif reqs.pendingverification\n    \"pending (disabled)\"\n  else\n    \"restricted\"\n  end\nend\naccounts = Stripe::Account.list(limit: 10)\naccounts.each do |account|\n    puts \"#{account.id} has state: #{accountstate(account)}\"\nend\n`# Set your secret key. Remember to switch to your live secret key in production.\n#See your keys here: https://dashboard.stripe.com/apikeys\nStripe.apikey = 'sktestY17KokhC3SRYCQTLYiU5ZCD2'\ndef accountstate(account)\n  reqs = account.requirements\n  if reqs.disabledreason && reqs.disabledreason.include?(\"rejected\")\n    \"rejected\"\n  elsif account.payoutsenabled && account.chargesenabled\n    if reqs.pendingverification\n      \"pending enablement\"\n    elsif !reqs.disabledreason && !reqs.currentlydue\n      if !reqs.eventuallydue\n        \"complete\"\n      else\n        \"enabled\"\n      end\n    else\n      \"restricted\"\n    end\n  elsif !account.payoutsenabled && account.chargesenabled\n    \"restricted (payouts disabled)\"\n  elsif !account.chargesenabled && account.payoutsenabled\n    \"restricted (charges disabled)\"\n  elsif reqs.pastdue\n    \"restricted (past due)\"\n  elsif reqs.pendingverification\n    \"pending (disabled)\"\n  else\n    \"restricted\"\n  end\nend\naccounts = Stripe::Account.list(limit: 10)\naccounts.each do |account|\n    puts \"#{account.id} has state: #{accountstate(account)}\"\nend`### Handle verification errors\nHandle verification failures differently depending on your onboarding flow.\n#Note\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\nListen to the account.updated event. If the account contains any currentlydue fields when the currentdeadline arrives, the corresponding functionality is disabled and those fields are added to pastdue.\n`currentlydue``currentdeadline``past_due`Create a form with clear instructions that the account can use to correct the information. Notify the account, then submit the corrected information using the Accounts API.\nIf you plan to create custom flows to handle all your verification errors:\n• Review the details regarding all possible verification errors and how to handle them.\n• Test verification states.\n#See also\nLearn more about working with Custom accounts.\n• Handle verification updates\n• Updating Accounts\n• Identity Verification"}, {"path": "connect\\dashboard\\managing-individual-accounts.md", "url": "https://docs.stripe.com/connect/dashboard/managing-individual-accounts", "content": "#Manage individual accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/dashboard/managing-individual-accounts\n\n#Manage individual accounts\n#Use the Stripe Dashboard to manage connected accounts.\nYou can use the Stripe Dashboard to inspect, support, and better understand your platform’s connected accounts.\n#Create accounts\n#Regional considerationsFrance\nPlatforms in France can’t create connected accounts in the Dashboard. Due to French regulations, you can only create connected accounts using Stripe-hosted onboarding.\nThis feature allows you to onboard connected accounts without writing code and to test before integrating. The user creating the account must be an Administrator or Developer, and the account must have a completed platform profile.\nTo create a new account, click the + Create button on the Connected accounts page, then select the account type and country.\nFor Stripe Dashboard access, select Express or Standard to generate a one-time link for the account holder to complete the onboarding flow. After the account successfully connects, Stripe notifies you by email. Select None to create the account immediately, then complete onboarding it on the Account details page.\nCreate an account in the Dashboard\n#Find accounts\nTo find a specific connected account, you can search in the Dashboard using criteria such as its name, email, or metadata. Alternatively, you can view a list of accounts on the Connected accounts page and click an account to open its Account details page.\nThe Activity section at the top of the Account details page can include an Actions required list. If the list appears, then you or the connected account must take action to prevent or remove restrictions on the account’s capabilities. Such restrictions can result from open onboarding, verification, or risk requirements.\n#Note\nStripe puts some verifications on hold for accounts that haven’t had activity in the last 540 days. Learn more about reviewing inactive accounts.\n#View the Dashboard as a connected account\nView the Dashboard as a connected account\nTo view the Stripe Dashboard from the perspective of the connected account, click the overflow menu () and select View Dashboard As. For connected accounts that don’t access the full Stripe Dashboard, such as Express and Custom accounts, you still see the full Stripe Dashboard. In those cases, what you see isn’t an exact representation of what the connected account sees. This feature works by passing the connected account ID as the stripe-account-header on requests made from the Stripe Dashboard, similar to making API calls on behalf of connected accounts.\n#View and unblock support cases\nView support cases your connected accounts have opened with Stripe and help unblock those cases by providing additional context.\nThe Activity section of a connected account’s details page contains a list of support cases raised by the connected account.\nYou can view support cases from the last 90 days created from any connected account with access to either the full Stripe Dashboard or Express Dashboard. Connected accounts with Stripe Dashboard access who have the following exceptions are not included:\n• Connected accounts who are or have been connected to multiple platforms\n• Connected accounts who are also platform accounts\n• Connected accounts who have opted out of sharing their cases.\nClick on any conversation in the Support Cases section to open the support case details page containing the detailed conversation between the connected account and Stripe.\nYou can use the Send Stripe Support an email functionality for an existing support case to privately add any additional context that would help Stripe resolve the issue. These messages aren’t visible to the connected account.\n#Identify and remediate issues with required actions\nIf the account requires any action to prevent or remove restrictions, the action appears in the Actions required list at the top of the Account details page. Each list entry corresponds to a requirement, futurerequirement, or information request from Stripe, and displays its due date and any capabilities it can affect.\nThe Due Date is the current deadline of the corresponding requirement. The following table describes the action statuses.\nWhen the list contains multiple actions, it orders them by priority. For example, a past due requirement appears before a currently due requirement.\n Requirement | Issue status \n --- | --- \n Information request from Stripe | Various \n requirement in pastdue | Past due \n requirement in currentlydue | Currently due \n futurerequirement | Future requirement \n requirement in eventuallydue | Due later \n`requirement``pastdue``requirement``currentlydue``futurerequirement``requirement``eventually_due`Clicking a requirement opens a requirement detail page with more information about the requirement, including any errors and possible remediation paths. To take action, click one of the paths.\nAvailable paths depend on the requirement and the account type. They can include submitting information on behalf of the account, sending the account a link that they can use to submit information, or contacting Stripe Support.\n#Submit the information\nDepending on the issue type, this path opens a dialog or form where you can enter and submit the required information.\n#Send a remediation link\nThis path generates an account-specific remediation link that you can copy and send to the account. The link takes them to a page where they can submit the required information.\nFor more information about remediation links, see the remediation link process walkthrough.\n#Contact Support\nTo remediate some issues, you must contact Stripe. This path opens a pre-filled form that you can use to submit a ticket to Stripe Support.\n#Update account information\nThe capabilities of connected accounts change over time depending on their verification status. If your platform is responsible for collecting updated information from a connected account (including Custom accounts) when requirements change, you can:\n• Update its account information, contact information, and business details in the Profile section of the Account details page.\n• Update its payout schedule in the Overview tab of the Activity section under Account balances.\n#Change the account representative\nYou can call the Accounts API to change the account representative. For more information, see the required verification information page.\n#Managing business owners\nYou can add, edit, and remove business owners on the Account details page. To add a new owner, click + Add owner. To edit an existing owner, click the overflow menu ().\n#Update capabilities\nYou can manage an account’s capabilities by clicking Edit in the Capabilities section.\nManage connected account capabilities\n#Send funds\nFunds sent to connected accounts come from your platform’s balance. You can add additional funds to your balance by clicking Add to balance in the Balances section.\nTo execute the transfer, go to your Balances section and click the Transfers tab. Click New to open the dialog for sending funds to connected accounts.\nFor accounts where your platform is liable for negative balances (including Custom and Express accounts), you can send money directly to a connected account’s bank or debit card. To send funds, a user must have at least Administrator privileges.\n#Pull funds\n#Private preview\nPulling funds is a US-exclusive preview feature. Both the platform’s country and the connected account’s country must be US.\n`US`You can pull funds from connected accounts using the Pull funds button in the Account balances section.\nPull funds from a connected account\nFor accounts where your platform is liable for negative balances (including Custom and Express accounts), you can pull money from a connected account’s Stripe balance directly to your platform balance. Pulling funds is restricted to users with at least Administrator privileges.\n#Remove accounts\nRemove a connected account\nYou can remove and disconnect any connected account with access to the full Stripe Dashboard from your platform. A removed account no longer appears in your connected accounts list, and you can’t process payments or make API calls for it. You also lose any platform-controlled settings on the removed account, and they aren’t reinstated if the account reconnects later.\nRemoving an account only disconnects it from your platform. It still functions as a normal Stripe account."}, {"path": "connect\\dashboard\\remediation-links.md", "url": "https://docs.stripe.com/connect/dashboard/remediation-links", "content": "#Remediation link process walkthrough | Stripe Documentation\nURL: https://docs.stripe.com/connect/dashboard/remediation-links\n\n#Remediation link process walkthrough\n#Learn how to use remediation links to collect verification information from your connected accounts.\nRemediation links allow platform users to collect verification information from their existing connected accounts. You generate account-specific remediation links in the Dashboard, then send them to connected accounts through any communication channels, such as email, chat, in-app notifications, or support interactions. When a connected account clicks a remediation link, it takes them to a Stripe-hosted page where they can provide updated information directly to Stripe.\n#Note\nIf your connected accounts access Stripe-hosted Dashboards or an interface built with Connect embedded components, use remediation links to address updated requirements. Otherwise, configure your integration to address updated requirements using account links.\nRemediation links are active for 90 days, and an account can access the same link multiple times. Before generating a link, make sure that it goes to the right individual by verifying that the account owner is set correctly. If a link expires, you can generate a new one.\nOnly the following user roles have permission to generate remediation links:\n• Administrator\n• Connect Onboarding Analyst\n• Developer\n• Data Migration Specialist\n• Support Associate\n• Support Specialist\n#Note\nYou can only generate remediation links in the Dashboard, not using the API. To use the API to direct connected accounts to onboarding, create Account links, which are temporary and can only be used once.\nThe page that a remediation link opens depends on the account’s configuration:\n Connected account has access to: | Remediation link opens: \n --- | --- \n A Stripe embedded onboarding component and embedded notification banner | A platform website page that contains the notification banner; configured in the platform Dashboard \n The full Stripe Dashboard and no embedded onboarding or notification banner (including Standard accounts) | The Account Status page in the Stripe Dashboard \n The Express Dashboard and no embedded onboarding or notification banner (including Express accounts) | The Stripe Express onboarding flow \n No Stripe Dashboard and no embedded onboarding or notification banner (including Custom accounts) | Stripe-hosted onboarding; the account holder must create a Stripe login and verify their information as the primary account owner or representative \nThis page walks through the process of generating and sending remediation links and describes the experience of a connected account when they use a link.\n#Generate remediation links\nYou can generate a remediation link for an individual account or export a list of remediation links for multiple accounts.\n#Generate a link for an individual account\nAn account might have requirements that you can generate links for. For such accounts, go to the Actions required list in the Activity section of the Account details page. Click an issue to go to the details page for that requirement.\nActions required list\nPossible remediation paths, if available, appear as a button or dropdown menu. Generate the link by clicking Request from account.\nRequest information from the connected account\nThe remediation link appears in a dialog.\n#Export links for multiple accounts\nOn the Accounts to review page of your Dashboard, filter the view to include the accounts that you want to generate remediation links for, then click Export. In the export dialog, select All columns or Custom, and then select Remediation link as well as any other desired fields, then export the list of accounts.\nExport a list of accounts\n#Note\nIf a Remediation Link couldn’t be generated, we don’t have enough information to verify the account. Make sure that the account data in Stripe includes a primary account representative, with their full name and date of birth, and an external payout account.\n#Send remediation links to connected accounts\nYou can send remediation links by any communication channel. Because they direct accounts to a Stripe-hosted page, we recommend that when you send a link, you inform the account that you partner with Stripe for payments. That explains why your link takes them to a Stripe-hosted page.\nHere’s an example of an email that a platform might use to send a remediation link:\nRemediation link email\n#Understand what a connected account sees when they click a remediation link\nThe following example scenarios help you and your support team understand remediation links from the perspective of a connected account. Select the Dashboard that’s applicable to your connected accounts.\n#Note\nThe screenshots are representative examples that might not match the actual screens presented to your connected accounts.\nFor connected accounts that used hosted onboarding and have access to the Notification banner embedded component, remediation links point to the platform website page that hosts the notification banner. The banner includes information and links for the connected account to address any open issues.\n#Note\nIf the platform’s Connect settings don’t include the URL of the Notification banner component, a remediation link takes the connected account to hosted onboarding. The behavior is the same as it is for other accounts that don’t have Stripe Dashboard access.\n# The account reviews the notification banner\nClicking the link opens the page containing the notification banner. In some cases, the account might need to log in.\nThe notification banner displays any outstanding tasks.\n#Note\nThe notification banner appears only if there are outstanding tasks or other notifications.\nEmbedded notification banner\n# The account addresses open tasks\nThe account can address a task by clicking the button in the notification. In this example, clicking Add information opens a dialog where they can enter the required information.\nInformation collection dialog\n#Handle an unverified account owner\nIf a connected account owner fails to verify their identity, we tell them to contact their platform.\nIdentity verification failure\nIf verification fails, verify that the account information is correct and complete. Then, reset the remediation link through the banner at the top of the connected account details page.\nVerification failure banner\n Failure reason | Platform action \n --- | --- \n The account owner or representative has entered the wrong information four times. | The banner at the top of the connected account details page requires you to acknowledge a security check before you can reset the link. Acknowledging the check allows you to reset the link four more times. \n A person not listed as the account representative is trying to enter account information. | Update the account representative’s name, date of birth, and last 4 digits of the SSN, and ask them to try the link again. To instead let the representative update their information directly, use the API to create and share an account link. \n We don’t have enough account information (such as the bank account number or last four digits of the SSN). | Add more account details, including date of birth and last 4 digits of the SSN, then ask the connected account to try the link again. To instead let the representative update their information directly, use the API to create and share an account link."}, {"path": "connect\\dashboard\\review-actionable-accounts.md", "url": "https://docs.stripe.com/connect/dashboard/review-actionable-accounts", "content": "#Review actionable accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/dashboard/review-actionable-accounts\n\n#Review actionable accounts\n#View connected accounts with open risk, onboarding, and compliance requirements.\nThe Accounts to review page in your Dashboard helps you monitor the risk and onboarding status of all of your connected accounts. From there, you can:\n• Proactively monitor your accounts: Monitor the status of your accounts with any open risk, onboarding, or verification requirements. View any risk or onboarding restrictions that impact your accounts or that will impact them in the future.\n• Identify the exact requirements needed: Understand an account status quickly, without needing to look through webhook logs. View clear instructions on how to resolve open requirements and take action.\n• Export a list of accounts: Download a CSV list of accounts, including remediation links that your accounts with open requirements can use to submit information and resolve issues.\n#View all accounts\nThe Accounts to review page in your Dashboard provides a list of all your connected accounts with open risk, verification, and onboarding requirements.\nTo view the accounts in a particular status, select the corresponding tab:\n Tab | Description \n --- | --- \n Actions required | Active accounts with open risk, onboarding, or verification requirements from Stripe or from your platform. \n In review | Active accounts that Stripe is reviewing submitted information for or is conducting an account review of, regardless of whether any account capabilities are restricted. \n Rejected | All accounts that have been rejected by Stripe or by your platform. \nIn the Actions required and In review tabs, you can toggle the Restrictions column between restrictions and information needed by clicking the gear  in its heading.\n#Note\nStripe puts some verifications on hold for accounts that haven’t had activity in the last 540 days. Learn more about reviewing inactive accounts.\nWithin each tab, you can customize the filters to narrow the list of connected accounts that are most relevant to you. You can filter by:\n• Payments capability status\n• Payouts capability status\n• Issuing capability status\n• Account status\n• Volume\n• Information needed\n• Last payout date\n• Connected date\n• Due date\nYou can see all accounts in the currently selected status by removing the default filters.\nYou can sort the accounts list by total volume, due date, or connected date. In the Rejected tab, you can also sort by accounts with any ongoing appeals.\n#Note\nThe Total volume column displays “Unavailable” for connected accounts with Stripe Dashboard access where you don’t have platform controls enabled. Filtering by volume always excludes them. You can identify these accounts by filtering the list by platform controls.\nDepending on a connected account’s configuration, you can take action on it in the Action required list or In review list by clicking the account’s overflow menu . You can take the following actions:\n• View Actions required list on the Account details page.\n• Reject the account.\n• Pause or resume payouts for the account.\n• Pause or resume payments for the account.\n• Generate a remediation link that the account can use to take required actions.\n#Filter for accounts requiring additional information on business model review\nTo enable Stripe’s services, your business must comply with Stripe’s Terms of Service regarding supported business types, products, and industries. Stripe might require additional information to determine if your business is supported. If so, that requirement appears in the Actions required section of the connected account detail page.\nTo filter for accounts requiring additional information for business model review:\n# Navigate to Accounts to review.\n# Select More filters, then Information needed.\n# In the Filter by information needed search box, type verification.\n# Select the following items, then click Apply.Additional info request (Verification)Rejection appeal (Verification)URL (verification)\n• Additional info request (Verification)\n• Rejection appeal (Verification)\n• URL (verification)\n#Export a list of accounts\nYou can download a CSV list of all accounts in the current view by clicking Export in the top-right corner of the page. It opens a dialog that lets you select the fields to include:\n• Account ID\n• Business name\n• Representative email\n• Account status\n• Earliest due date\n• Connected date\n• Last activity\n• Payment capability status\n• Payout capability status\n• Issuing capability status\n• Treasury (Evolve) capability status\n• Treasury (Fifth-third) capability status\n• Verification requirement\n• Information needed\n• Remediation link\n• Total volume (USD) (in minor units)\n• Last payout date\nYou can import the list into another system or use it to send remediation links to your connected accounts. A connected account can use a remediation link to submit information for open requirements.\n#Use Stripe Sigma to identify accounts with open requirements\nIf you use Stripe Sigma, it can identify accounts that have open requirements or futurerequirements. For information about querying for Connect information with Sigma, see Query Connect data.\n`requirements``futurerequirements`## Review individual accounts\nTo investigate the open requirements for an account on the Accounts to review page, click the account. That opens the Account details page with an Actions required list at the top, where you can identify specific requirements and take action. This list doesn’t appear if there aren’t any actionable requirements on the account.\n#Review and appeal unsupported connected accounts\nIf Stripe can’t support your connected account or requires more information, you can review or submit an appeal from the Dashboard.\n# To find a specific connected account, search in the Dashboard or view a list of accounts on the Accounts to review page.\n# Click the row on the Actions required list tagged as Supportability and labeled Pending account closure to enter the requirement details page.\n# Depending on the exact information required, you can do one or more of the following with the update button:Send a remediation link to your connected account so they can submit the information.Submit the information yourself on behalf of your connected account.\n# If you choose to submit the information on behalf of your connected account, complete the Appeal your Stripe account closure form.\n• Send a remediation link to your connected account so they can submit the information.\n• Submit the information yourself on behalf of your connected account."}, {"path": "connect\\dashboard\\understand-your-connect-business.md", "url": "https://docs.stripe.com/connect/dashboard/understand-your-connect-business", "content": "#Understand your Connect business | Stripe Documentation\nURL: https://docs.stripe.com/connect/dashboard/understand-your-connect-business\n\n#Understand your Connect business\n#Use the Connect overview page to gain insight into your payments business and manage platform tasks.\nUse the Connect overview page in your Dashboard to understand and manage your Connect payments business. It includes three modules:\n• Business insights\n• Tasks\n• Resources\n#Business insights\nThe main section of the page displays high-level metrics that you can use to better understand the health of your payments business, including:\n#Top grossing accounts list\nA list of your five highest grossing accounts and their total lifetime gross amounts.\n#Account status chart\nA snapshot of the current numbers of your connected accounts in Active, Restricted soon, and Restricted statuses.\n#Tasks\nThe tasks section of the page displays cards representing platform tasks that you must complete. The tasks depend on the types of connected accounts that your platform supports. Each card links to a details page that explains how to complete that task.\nIf you have no open tasks to complete, you don’t see the Tasks section.\n#Task details page\nA task details page contains specific information required for you to complete the task. It can include actions, deadlines, and links to relevant resources.\nA task can have one of the following statuses:\n• Not started\n• In progress\n• Complete\nWhen you complete a task, you can mark it complete by clicking Complete.\nHere’s an example of the details page for the Modify your onboarding task:\n#Resources\nThe Resources section of the overview page contains cards representing additional Connect resources. Each card links to a Stripe resource where you can learn more about a particular topic."}, {"path": "connect\\dashboard\\viewing-all-accounts.md", "url": "https://docs.stripe.com/connect/dashboard/viewing-all-accounts", "content": "#View all accounts | Stripe Documentation\nURL: https://docs.stripe.com/connect/dashboard/viewing-all-accounts\n\n#View all accounts\n#Learn how to view all of your connected accounts, and filter them by verification status, balance, volume, and other attributes.\nThe accounts overview page provides multiple ways to view your connected accounts. By default, the All accounts tab is selected. However, the other tabs organize accounts according to their status. Each tab includes the number of accounts with that status. When you select a tab, the results in your accounts list update automatically. You can then narrow these results further by using the filter feature on each tab.\n#Status tabs and workflows\nSelecting different status tabs on the account overview page automatically updates the filters and columns displayed. The interactive table below provides an overview and description of the columns associated with each tab. You can sort many of the columns listed below can also by clicking on the column heading in the Dashboard.\nThis tab is displayed by default, and is commonly used to see a high-level view of all your connected accounts.\n Column | Description \n --- | --- \n Accounts | The name of the account. \n Status | The account status. \n Balance | The total of pending and available balances, converted to your platform’s default currency. \n Volume | The total gross volume on the account, converted to your platform’s default currency. This is only displayed for connected accounts that don’t have access to the full Stripe Dashboard (including Custom and Express accounts) and connected accounts with platform controls. \n Type | Account type (Standard, Express, Custom, or None). \n Country (icon) | An icon representing the account’s country. \n Connected | The date the account connected to your platform. \n#Filters\nEach tab provides a list of accounts based on a shared status, but you can use filters to narrow the results further. When you apply a new filter, the account list updates automatically.\nFilter accounts by country"}, {"path": "connect\\onboarding\\quickstart.md", "url": "https://docs.stripe.com/connect/onboarding/quickstart", "content": "#Build a Connect integration | Stripe Documentation\nURL: https://docs.stripe.com/connect/onboarding/quickstart"}, {"path": "connect\\platform-pricing-tools\\card-product-codes.md", "url": "https://docs.stripe.com/connect/platform-pricing-tools/card-product-codes", "content": "#Card product codes in platform pricing tools | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-pricing-tools/card-product-codes\n\n#Card product codes in platform pricing tools\n#Use card product codes with reference and test card numbers.\nProduct codes exist as a way to identify the specific program or product associated with a credit card. Conditional fees in pricing schemes can depend on the product code of a card. The following tables contain examples of card product codes and test card numbers.\n#Product codes\nThe following table lists product code values for each card brand:\n Product code | Product description |  \n --- | --- | --- \n A | Traditional \n B | Traditional Rewards \n C | Signature \n D | Signature Preferred \n DS | Distribution \n F | Classic \n F2 | Visa Flexible Credential \n F3 | Visa Flexible Credential Standard \n G | Business \n G1 | Signature Business \n G3 | Platinum Business \n G4 | Infinite Business \n G5 | Business Rewards \n GV | Government Disbursement \n I | Infinite \n I1 | Infinite Privilege \n I2 | UHNW \n J3 | Healthcare \n K | Corporate \n K1 | Government Corporate \n L | Electron \n N | Platinum \n N1 | Rewards \n N2 | Select \n P | Gold \n PP | Payroll \n Q | Private Label \n Q2 | Private Label Basic \n Q3 | Private Label Standard \n Q4 | Private Label Enhanced \n Q5 | Private Label Specialized \n Q6 | Private Label Premium \n R | Proprietary \n S | Purchasing \n S1 | Purchasing With Fleet \n S2 | Government Purchasing \n S3 | Government Purchasing With Fleet \n S4 | Commercial Agriculture \n S5 | Commercial Transport \n S6 | Commercial Marketplace \n S7 | Distribution \n U | Travel Money \n V | V Pay \n X | Visa Commercial Choice Travel \n X1 | Visa Commercial Choice Omni \n#Testing\nWhile in test mode, use the following test cards to simulate purchases made with specific card product codes, which are returned in the brandproduct field. Each test card takes any future date as the expiration, any three-digit value as the CVV, and any postal code.\n`brandproduct`| Description | Number | Product code |\n --- | --- | --- \n Mastercard Standard Debit | 5555050360000007 | MDS \n Mastercard Platinum Debit | 5555050360000015 | MDP \n Mastercard World Credit | 5200000360000076 | MCW \n Mastercard World Elite Credit | 5200000360000068 | MWE \n Mastercard World Elite for Business Credit | 5200500000100004 | MAB"}, {"path": "connect\\platform-pricing-tools\\complex-pricing-rule-conditions.md", "url": "https://docs.stripe.com/connect/platform-pricing-tools/complex-pricing-rule-conditions", "content": "#Complex pricing rule conditions | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-pricing-tools/complex-pricing-rule-conditions\n\n#Complex pricing rule conditions\n#Create pricing rule conditions based on complex data sources.\nMost pricing rules are based on simple logical conditions, such as segmenting pricing by payment method. You can also write rule conditions based on complex variables, such as your custom metadata values. This guide explains the additional steps required for these cases.\n#Payment Metadata\nAs a platform, you can add custom metadata to payments and reference it in your pricing rules. First, add a metadata key-value pair to your PaymentIntent or Charge. Then, create pricing rules referencing this metadata value.\nPricing rule conditions based on payment metadata observe the following behavior:\n• Pricing rule conditions can evaluate metadata defined in both PaymentIntents and Charges.\n• A rule condition can only evaluate one key-value pair from the metadata parameter.\n• If you include multiple metadata key-value conditions, the pricing tool only evaluates the first key-value condition.\n• The pricing tool only evaluates metadata that’s available before payment is captured. Make sure you apply any updates before this point for accurate fee calculation.\n• Use the API to update metadata in the PaymentIntent or Charge. The pricing tool can’t evaluate updates made through the Dashboard.\n#See also\nComplete list of supported pricing rule conditions"}, {"path": "connect\\platform-pricing-tools\\pricing-groups.md", "url": "https://docs.stripe.com/connect/platform-pricing-tools/pricing-groups", "content": "#Create pricing groups | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-pricing-tools/pricing-groups\n\n#Create pricing groups\n#Define separate pricing schemes for different connected account groups.\nYou can define pricing groups to assign specific pricing schemes to multiple connected accounts simultaneously. This can save time over manually adding or updating the same fee override to each connected account individually.\nYou can create up to 50 groups across all pricing schemes.\n#Assign groups to a pricing scheme\nYou can define up to 50 pricing schemes per product (such as Payments or Instant Payouts) and apply each to one or more groups of eligible connected accounts. You can enable only one pricing scheme to a connected account.\nTo create a new schema and define a pricing group:\n# From the Payments tab of the Platform pricing page in your Stripe Dashboard (Settings > Connect > Platform pricing), click + Add scheme.\n# Select Create a new scheme or Start from an existing scheme.\n# Name your scheme.\n# Define your scheme with pricing rules, fallback rules and fee modifiers using the instructions in create a pricing scheme.\n# Assign a group to your scheme.Type a name and click + Add to create a new group. After you save the scheme, you can add accounts to your new group.Alternatively, click Reassign a group to choose an existing group, then click + Reassign\n# Click Save and enable and review the details of your schema, including its assigned groups and the number of accounts in each group. Click Confirm to submit the changes.\n# Click the overflow menu () of a scheme, then click Edit to make changes.\n• Type a name and click + Add to create a new group. After you save the scheme, you can add accounts to your new group.\n• Alternatively, click Reassign a group to choose an existing group, then click + Reassign\n#Add accounts to groups\nYou can add connected accounts to existing groups using the following methods:\n• CSV import: Takes effect immediately, but group counts in the UI take a few minutes to update.\n• API: Takes effect immediately.\nRecent group assignment changes take up to 24 hours to reflect in CSV exports.\n#CSV Import\nUse the Dashboard to import a CSV file defining the connected accounts to add to a group.\n# Copy the GroupID of the group you want to add accounts to.\n# Click the overflow menu () of the group’s pricing scheme, then select Add accounts.\n# Download the pre-configured CSV for the group (or create your own).\n# Populate the following two columns for each connected account to add.connectedaccount: account id of a connected account to assign to this group.accountgroup: group id of the group to add the account to.\n# Click Upload CSV and select your completed file.\n# Stripe validates the file and returns the number of connected accounts in your platform not included in the file. This helps you make sure you didn’t unintentionally omit any users.\n# Click Confirm to complete the import.\n• connectedaccount: account id of a connected account to assign to this group.\n• accountgroup: group id of the group to add the account to.\n`account id``group id`### API\nBefore assigning a connected account into a pricing group, obtain the group ID (acctgrpxxx) from the Platform Pricing page in your Dashboard.\n`acctgrpxxx`#### Assign a group to an existing account\n# Populate the groups.paymentspricing parameter of the Update an account call with the ID of the group to assign the account to.\n# Expand the groups object to request the groups parameter in the response.\n`groups.paymentspricing``ID``groups``groups`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"groups[paymentspricing]\"=acctgrpNrikrzNEvHZ4go \\\n  -d \"expand[]\"=groups\n`curl https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"groups[paymentspricing]\"=acctgrpNrikrzNEvHZ4go \\\n  -d \"expand[]\"=groups`The response returns the connected account object with the expanded groups parameter.\n`groups`{\n  // ...\n  \"groups\": {\n    \"paymentspricing\": \"acctgrpNrikrzNEvHZ4go\"\n  }\n}\n`{\n  // ...\n  \"groups\": {\n    \"paymentspricing\": \"acctgrpNrikrzNEvHZ4go\"\n  }\n}`#### Assign a group when creating a new account\n# Populate the groups parameter of the Create an account call with the name and ID of the group to assign it to the account.Alternatively, omit the groups parameter during account creation to automatically assign the account to the default group. All eligible connected accounts without a specific group designation belong to the default group.\n# Expand the groups object to request the groups parameter in the response.\nPopulate the groups parameter of the Create an account call with the name and ID of the group to assign it to the account.\n`groups``name``ID`Alternatively, omit the groups parameter during account creation to automatically assign the account to the default group. All eligible connected accounts without a specific group designation belong to the default group.\n`groups`Expand the groups object to request the groups parameter in the response.\n`groups``groups`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"groups[paymentspricing]\"=acctgrpNrikrzNEvHZ4go \\\n  -d \"expand[]\"=groups\n`curl https://api.stripe.com/v1/accounts \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"groups[paymentspricing]\"=acctgrpNrikrzNEvHZ4go \\\n  -d \"expand[]\"=groups`The response returns the new connected account object with the expanded groups parameter.\n`groups`{\n  // ...\n  \"groups\": {\n    \"paymentspricing\": \"acctgrpNrikrzNEvHZ4go\"\n  }\n}\n`{\n  // ...\n  \"groups\": {\n    \"paymentspricing\": \"acctgrpNrikrzNEvHZ4go\"\n  }\n}`#### Retrieve the group of an account\nExpand the groups parameter in the Accounts lookup call to see the account’s pricing group. If the paymentspricing group has a null value, the connected account has a pricing override.\n`groups``paymentspricing`curl -G https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"expand[]\"=groups\n`curl -G https://api.stripe.com/v1/accounts/{{CONNECTEDACCOUNTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d \"expand[]\"=groups`The response returns the new connected account object with the expanded groups parameter.\n`groups`{\n  // ...\n  \"groups\": {\n    \"paymentspricing\": \"acctgrpNrikrzNEvHZ4go\"\n  }\n}\ngated=[\"groups\"]\n`{\n  // ...\n  \"groups\": {\n    \"paymentspricing\": \"acctgrpNrikrzNEvHZ4go\"\n  }\n}\ngated=[\"groups\"]`## Unassign a pricing group from a pricing scheme\nTo disassociate a group and it’s connected accounts from a pricing scheme:\n# Click the overflow menu () of the pricing scheme, then select Edit.\n# In the Assign groups section, click the overflow menu () of the intended group, then select Unassign.\n# Click Save and Enable, then Confirm.\nThis doesn’t delete the pricing group with its associated connected accounts. It reassigns the pricing group to the default pricing scheme. You can still reassign the pricing group to a different scheme.\n#Delete a pricing group\nYou can delete a pricing group and reassign its connected accounts to the pricing group associated with the default pricing scheme. You can only delete a pricing group from the Dashboard.\n#Caution\nDeleting a pricing group that you still reference in your API calls can break your integration.\n# Click the overflow menu () of the pricing scheme, then select Edit.\n# In the Assign groups section, click the overflow menu () of the intended group, then select Delete.\n# Click Save and Enable, then Confirm.\nAny connected accounts in a deleted pricing group get reassigned to the pricing group of the default pricing scheme.\n#View accounts assigned to a payments pricing scheme\nYou can download a CSV list of connected accounts and their assigned groups for a pricing scheme. From the Platform Pricing page of your Dashboard, click the overflow menu () of the pricing scheme, then select Export accounts.\nYou can also download a CSV list of all connected accounts and their assigned schemes by clicking Export accounts at the top of the Platform Pricing page."}, {"path": "connect\\platform-pricing-tools\\pricing-schemes.md", "url": "https://docs.stripe.com/connect/platform-pricing-tools/pricing-schemes", "content": "#Create a pricing scheme | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-pricing-tools/pricing-schemes\n\n#Create a pricing scheme\n#Define custom pricing strategies to assess your connected accounts.\nA pricing scheme is a list of conditional fees. For each applicable transaction, Stripe evaluates the list in the order you specify and applies the first matching conditional fee. If no conditional fees match the transaction, Stripe applies your default fee. Stripe calculates the fee in the specified currency, and then converts it to the settlement currency of the payment, if needed.\nTo create a pricing scheme:\n# From the Platform pricing page in your Stripe Dashboard (Settings > Connect > Platform pricing), click Get Started.\n# In the Set a default payment pricing scheme editor, click Add pricing rule.\n# Define the rule.Condition: Use the dropdown menus to write one or more conditions based on a transaction property, an operator, and a value.Fee type: Specify how to calculate the fee.Fixed: Charge a specific amount, such as 1.10 USD, for every payment.Variable: Charge a percentage, such as .45%, of the total amount of the payment.Minimum (optional): Specify a minimum amount to charge, even if the percentage calculation is less.Maximum (optional): Specify a maximum amount to charge, even if the percentage calculation is more.Blended: Charge a percentage of the total payment, plus a fixed amount.Maximum (optional): Specify a maximum amount to charge, even if the calculated fee is more.\n• Condition: Use the dropdown menus to write one or more conditions based on a transaction property, an operator, and a value.\n• Fee type: Specify how to calculate the fee.Fixed: Charge a specific amount, such as 1.10 USD, for every payment.Variable: Charge a percentage, such as .45%, of the total amount of the payment.Minimum (optional): Specify a minimum amount to charge, even if the percentage calculation is less.Maximum (optional): Specify a maximum amount to charge, even if the percentage calculation is more.Blended: Charge a percentage of the total payment, plus a fixed amount.Maximum (optional): Specify a maximum amount to charge, even if the calculated fee is more.\n• Fixed: Charge a specific amount, such as 1.10 USD, for every payment.\n• Variable: Charge a percentage, such as .45%, of the total amount of the payment.Minimum (optional): Specify a minimum amount to charge, even if the percentage calculation is less.Maximum (optional): Specify a maximum amount to charge, even if the percentage calculation is more.\n• Blended: Charge a percentage of the total payment, plus a fixed amount.Maximum (optional): Specify a maximum amount to charge, even if the calculated fee is more.\n• Minimum (optional): Specify a minimum amount to charge, even if the percentage calculation is less.\n• Maximum (optional): Specify a maximum amount to charge, even if the percentage calculation is more.\n• Maximum (optional): Specify a maximum amount to charge, even if the calculated fee is more.\n# Add up to 125 rules for the scheme in the order to evaluate them. Stripe applies the first rule that matches the payment and discontinues the evaluation.\n# After you define all your pricing rules, Set fallback rule lets you define the fee to apply when a transaction doesn’t match any of the scheme rules. Set a variable amount, fixed amount, or both.If you set a zero amount fallback rule fee, you won’t recoup your processing cost for any transactions that don’t match any of the scheme rules.\n# (Optional) Click Add modifier to increase or decrease the calculated application fee by a specified percentage (0-100).\n# Click Save and enable or close the editor without saving to cancel.\n• Set a variable amount, fixed amount, or both.\n• If you set a zero amount fallback rule fee, you won’t recoup your processing cost for any transactions that don’t match any of the scheme rules.\n#Explicit application fees override pricing scheme\nEnabled pricing tools apply fees to all eligible payments, unless overridden by an explicit applicationfee or transferdata[amount] parameter on the payment. Remove these parameters from your payment integration to apply your pricing scheme configuration.\n`applicationfee``transferdata[amount]`Saving the pricing scheme applies it to all eligible connected accounts. You can view the progress of this update on your Platform Pricing page. The time to complete depends on the number of connected accounts on your platform.\nReview Stripe’s Pricing page for guidance in defining your pricing schemes. Factors to consider include, but aren’t limited to:\n• Which countries you support connected accounts in\n• Whether any connected accounts support cross-border transactions\n• Which payment methods you support\n• How much Stripe charges you based on your contract\n#Override a specific account\nAfter you set up a pricing scheme, you can override the rules for connected accounts if the fee payer is the platform.\n# Select the account from the Connected accounts page in your Dashboard.\n# In the Account Pricing section, click the Payment pricing default overflow menu () and select Customize pricing to create a new override, or click Edit to update an existing override, if one exists.\n# For a new override scheme, choose:Create a new scheme: define the override rules from scratch.Copy from default platform pricing scheme: define the override rules by editing your default platform scheme.\n# Create the override scheme for the connected account using the same steps for creating the default platform scheme in the previous section.\n# Click Save or close the editor without saving to cancel.\n• Create a new scheme: define the override rules from scratch.\n• Copy from default platform pricing scheme: define the override rules by editing your default platform scheme.\n#Revert overridden pricing schemes\nAfter you create an override scheme, any updates to your platform pricing scheme don’t affect the pricing scheme of overridden connected accounts. To reapply your platform pricing scheme to an overridden connected account:\n# Select the account from the Connected accounts page in your Dashboard.\n# In the Account Pricing section, click the Custom scheme overflow menu () and select Revert to platform pricing.\n#Export pricing schemes\nYou can export all pricing schemes as CSV files. To export your platform pricing scheme:\n# From the Platform pricing page in your Stripe Dashboard (Settings > Connect > Platform pricing), click Get Started.\n# Navigate to the overflow menu () next to a scheme. Under Scheme actions, select Export pricing.\n# When you export pricing, it downloads a file with the name pricing--.csv\n`pricing--.csv`To export an override scheme:\n# Select the account from the Connected accounts page in your Dashboard.\n# In the Account Pricing section, click the Custom scheme overflow menu () and select Export pricing.\n# When you export pricing, it downloads a file with the name pricing---.csv\n`pricing---.csv`### Available columns\n Column name | Description \n --- | --- \n Rule # | This is the rule number as shown in the pricing scheme. \n Fee modifier # | If present, the “Rule #” column is empty. This indicates configured markups or discounts and their order of application. \n Fixed amount | The specific amount charged with this rule. \n Minimum | The minimum amount this rule charges. \n Maximum | The maximum amount this rule charges. \n Variable rate percent | The percentage of the payment amount charged with this rule. \n Condition | Configured conditions expressed as a semicolon delimited list. \n Rule type | One of conditional, default, markup, or discount:conditional: Indicates that the rule is chosen when all conditions are met.default: Indicates that the rule is chosen if no other rules have their conditions met.markup: Indicates that the collected application fee is marked up by this percentage, regardless of the rule chosen.discount: Indicates that the collected application fee is discounted by this percentage, regardless of the rule chosen. \nRule type\nOne of conditional, default, markup, or discount:\n`conditional``default``markup``discount`conditional: Indicates that the rule is chosen when all conditions are met.\n`conditional`default: Indicates that the rule is chosen if no other rules have their conditions met.\n`default`markup: Indicates that the collected application fee is marked up by this percentage, regardless of the rule chosen.\n`markup`discount: Indicates that the collected application fee is discounted by this percentage, regardless of the rule chosen.\n`discount`## Supported rule conditions by payment type\nThe following table describes some of the properties you can use to define a pricing schedule rule condition, and the types of payments they apply to.\n Condition property | Relevant payment type | Description \n --- | --- | --- \n Payment method | All payments | The payment method used, for example card, usbankaccount, or boleto. \n Presentment currency | All payments | The currency that the customer paid in. \n Settlement merchant country | All payments | The country of the payment settlement merchant. \n Card brand | Card payments | The card network provider, such as Visa or Mastercard. \n Card present | Card payments | Whether or not the payment is in-person \n Card country | Card payments | The issuing country of the card that the customer paid with. \n Card product code | Card payments | The product code of the card that the customer paid with. \n Card type | Card payments | Funding source of the card, such as a credit card or debit card. \n Card product category | Card payments | Card class classification, such as a Standard or Premium card. \n Card border | Card payments | Whether the card used is a domestic or international card. \n Manually entered | Card payments | Whether a business entered card details into the Stripe Dashboard to process the payment rather than using an online payment form or terminal. \n UK or European Economic Area card charge | Card payments | Whether the merchant and the card country are both within the European Economic Area or the United Kingdom. \n UK and European Economic Area cross border charge | Card payments | Whether the merchant is in the European Economic Area or the UK, and the card holder is in the other. \n Klarna payment category | Klarna payments | The Klarna payment category used on a Klarna payment. \n Klarna customer country | Klarna payments | The country of the customer making the Klarna payment. \n US Bank Account availability | US Bank Account payments | The settlement timing of the ACH Direct Debit payment. \n Payment metadata | All payments | Custom key-value metadata that you include on the captured charge. You can create pricing rules based on this metadata. \n Payout currency | All Instant Payouts | The currency of the Instant Payout. \n#Fee modifier\nYou can use a fee modifier to adjust the application fee calculated by the conditional and fallback rules:\n• Markup increases the fee amount by the specified percentage.\n• Discount decreases the fee amount by the specified percentage.\nFee modifiers compound based on their sequence in the scheme definition. For example, adding a 5% discount followed by a 10% markup adjusts a 1.00 USD fee to a 1.05 USD fee (1.00 USD × 0.95 x 1.1 = 1.05 USD).\n#View platform pricing details\nSelect an applied fee from Collected Fees on the Payments page in your Dashboard. The Platform pricing details section shows the following details about how Stripe calculated the application fee from the pricing scheme:\n• Matched rules: Shows which rule conditions matched the payment and were used to calculate the fee based on the captured payment and fee type.\n• Additional markups applied: Shows whether the final calculation included any markups or discount adjustments.\n• Historical pricing scheme: Shows a snapshot of the pricing scheme in place at the time of payment processing and fee calculation.\nFor example, assume a purchase of 500 USD. The payment matched a rule with the following conditions of the pricing scheme:\n• The payment method is cards.\nThe pricing scheme also applied the following fee modifiers:\n• 4% markup\n• 3% discount\nFor this case, the platform pricing details show:\n• The 2.9% + 0.30 USD rule applies because the payment method is a card. The calculation against the 500 USD payment equals a fee subtotal of 14.80 USD.\n• The scheme also defines a 4% markup and a 3% discount. This calculates 14.8 × 1.04 × 0.97 = 14.93024, rounding to a total fee charged to the connected account of 14.93 USD."}, {"path": "connect\\platform-pricing-tools\\testing.md", "url": "https://docs.stripe.com/connect/platform-pricing-tools/testing", "content": "#Test pricing schemes | Stripe Documentation\nURL: https://docs.stripe.com/connect/platform-pricing-tools/testing\n\n#Test pricing schemes\n#Simulate application fees on payments to test the effects of your pricing scheme.\nYou can test your pricing scheme configurations before enabling it for your live accounts using either of the methods described in this guide.\n#Test mode\nIn test mode, you can use all of the functionality of pricing tools without making actual charges to connected accounts. Within test mode you can construct payments matching any of the supported conditions on test businesses, allowing you to make sure your integration works correctly. This feature helps you identify any errors or margin loss in your pricing configuration before you go live.\n#Test in a sandbox\nYou can use Sandboxes to test pricing changes in an isolated environment. To access sandboxes, click Sandboxes in the Dashboard account picker.\nEach new sandbox copies the live mode pricing tools configuration to a new test instance. A new sandbox assigns all groups to the default scheme, allowing you to configure different defaults and test different grouping strategies.\n#Platform pricing testing tool\nBefore rolling out a pricing change using pricing tools, you can simulate the impact of a pricing change on historical charges (a before and after simulation) where you paid the fees.\n# From the Platform Pricing page of your Dashboard, click the overflow menu () of the pricing scheme, then select Test.\n# Enter the ID of a historic charge, then click Add. You can add up to 50 charges to simulate.\n# Select the charges to compare (or select all), then click Test transactions.\nThe simulation returns the following information for each transaction:\n Property | Description \n --- | --- \n Transaction amount | The amount on the historical charge. \n Original application fee | The application fee you collected for this charge. \n Recalculated application fee | The application fee collected for the same charge according to the pricing scheme changes that you’re testing. \n Original matched rule | The conditions of the rule used to calculate the original application fee if a pricing scheme computed it. \n Recalculated matched rule | The conditions of the rule used to calculate the alternate application fee based on the changes that you’re testing. \nYou can only test charges where your platform paid the Stripe fees. Testing against a historic charge where you didn’t pay the Stripe fees fails.\nIf you’re satisfied with the test, return to the pricing scheme page and either submit your pricing changes or continue to experiment."}, {"path": "connect\\required-updates\\accounts-arguments.md", "url": "https://docs.stripe.com/connect/required-updates/accounts-arguments", "content": "#Accounts API Argument Changes | Stripe Documentation\nN/A\n\n#Accounts API Argument Changes\n#This page maps old Accounts API arguments to the new argument names.\nIndividuals and companies used to share many of the same arguments. With the new Persons API and other changes, many of these arguments now have new names specific to individuals and companies. Existing Account arguments that have not changed are not listed on this page.\n#Individuals\n Old argument | New argument \n --- | --- \n businessname | businessprofile.name \n businessurl | businessprofile.url \n debitnegativebalances | settings.payouts.debitnegativebalances \n declinechargeon | settings.cardpayments.declineon \n keys | Authenticate using the Stripe-Account header. \n legalentity | businesstype \n legalentity.additionalowners | Argument removed. \n legalentity.address | individual.addressindividual.addresskana (Japan) individual.addresskanji (Japan) \n legalentity.dob | individual.dob \n legalentity.firstname | individual.firstname \n legalentity.lastname | individual.lastname \n legalentity.personaladdress | individual.address \n legalentity.personalphonenumber | individual.phone \n legalentity.personalidnumber | individual.idnumber \n legalentity.personalidnumberprovided | individual.idnumberprovided \n legalentity.ssnlast4 | individual.ssnlast4 \n legalentity.ssnlast4provided | individual.ssnlast4provided \n legalentity.type | businesstype \n legalentity.verification | individual.verification \n mcc | businessprofile.mcc \n payoutschedule | settings.payouts.schedule \n payoutstatementdescriptor | settings.payouts.statementdescriptor \n productdescription | businessprofile.productdescription \n statementdescriptor | settings.payments.statementdescriptor \n supportemail | businessprofile.supportemail \n supportphone | businessprofile.supportphone \n supportaddress | businessprofile.supportaddress \n verification.disabledreason | requirements.disabledreason \n verification.dueby | requirements.currentdeadline \n verification.fieldsneeded | requirements.pastdue, requirements.currentlydue, requirements.eventuallydue \n`businessname``businessprofile.name``businessurl``businessprofile.url``debitnegativebalances``settings.payouts.debitnegativebalances``declinechargeon``settings.cardpayments.declineon``keys``legalentity``businesstype``legalentity.additionalowners`legalentity.address\n`legalentity.address`individual.address\n`individual.address`individual.addresskana (Japan) individual.addresskanji (Japan)\n`individual.addresskana``individual.addresskanji``legalentity.dob``individual.dob``legalentity.firstname``individual.firstname``legalentity.lastname``individual.lastname``legalentity.personaladdress``individual.address``legalentity.personalphonenumber``individual.phone``legalentity.personalidnumber``individual.idnumber``legalentity.personalidnumberprovided``individual.idnumberprovided``legalentity.ssnlast4``individual.ssnlast4``legalentity.ssnlast4provided``individual.ssnlast4provided``legalentity.type``businesstype``legalentity.verification``individual.verification``mcc``businessprofile.mcc``payoutschedule``settings.payouts.schedule``payoutstatementdescriptor``settings.payouts.statementdescriptor``productdescription``businessprofile.productdescription``statementdescriptor``settings.payments.statementdescriptor``supportemail``businessprofile.supportemail``supportphone``businessprofile.supportphone``supportaddress``businessprofile.supportaddress``verification.disabledreason``requirements.disabledreason``verification.dueby``requirements.currentdeadline``verification.fieldsneeded``requirements.pastdue, requirements.currentlydue, requirements.eventuallydue`## Companies\n Old argument | New argument \n --- | --- \n businessname | businessprofile.name \n businessurl | businessprofile.url \n debitnegativebalances | settings.payouts.debitnegativebalances \n declinechargeon | settings.cardpayments.declineon \n keys | Authenticate using the Stripe-Account header. \n legalentity | Argument removed and replaced with company. \n legalentity.additionalowners | Argument removed. \n legalentity.address | company.addresscompany.addresskana (Japan) company.addresskanji (Japan) \n legalentity.businessname | company.namecompany.namekana (Japan)company.namekanji (Japan) \n legalentity.businesstaxid | company.taxid \n legalentity.businesstaxidprovided | company.taxidprovided \n legalentity.dob | Now managed with the Persons object. \n legalentity.firstname | Now managed with the Persons object. \n legalentity.lastname | Now managed with the Persons object. \n legalentity.personaladdress | Now managed with the Persons object. \n legalentity.phonenumber | company.phone \n legalentity.personalidnumber | Now managed with the Persons object. \n legalentity.personalidnumberprovided | Now managed with the Persons object. \n legalentity.ssnlast4 | Now managed with the Persons object. \n legalentity.ssnlast4provided | Now managed with the Persons object. \n legalentity.type | businesstype \n legalentity.verification | Now managed with the Persons object. \n mcc | businessprofile.mcc \n payoutschedule | settings.payouts.schedule \n payoutstatementdescriptor | settings.payouts.statementdescriptor \n productdescription | businessprofile.productdescription \n statementdescriptor | settings.payments.statementdescriptor \n supportemail | businessprofile.supportemail \n supportphone | businessprofile.supportphone \n supportaddress | businessprofile.supportaddress \n verification.disabledreason | requirements.disabledreason \n verification.dueby | requirements.currentdeadline \n verification.fieldsneeded | requirements.pastdue, requirements.currentlydue, requirements.eventuallydue \n`businessname``businessprofile.name``businessurl``businessprofile.url``debitnegativebalances``settings.payouts.debitnegativebalances``declinechargeon``settings.cardpayments.declineon``keys``legalentity``company``legalentity.additionalowners`legalentity.address\n`legalentity.address`company.address\n`company.address`company.addresskana (Japan) company.addresskanji (Japan)\n`company.addresskana``company.addresskanji`legalentity.businessname\n`legalentity.businessname`company.name\n`company.name`company.namekana (Japan)\n`company.namekana`company.namekanji (Japan)\n`company.namekanji``legalentity.businesstaxid``company.taxid``legalentity.businesstaxidprovided``company.taxidprovided``legalentity.dob``legalentity.firstname``legalentity.lastname``legalentity.personaladdress``legalentity.phonenumber``company.phone``legalentity.personalidnumber``legalentity.personalidnumberprovided``legalentity.ssnlast4``legalentity.ssnlast4provided``legalentity.type``businesstype``legalentity.verification``mcc``businessprofile.mcc``payoutschedule``settings.payouts.schedule``payoutstatementdescriptor``settings.payouts.statementdescriptor``productdescription``businessprofile.productdescription``statementdescriptor``settings.payments.statementdescriptor``supportemail``businessprofile.supportemail``supportphone``businessprofile.supportphone``supportaddress``businessprofile.supportaddress``verification.disabledreason``requirements.disabledreason``verification.dueby``requirements.currentdeadline``verification.fieldsneeded``requirements.pastdue, requirements.currentlydue, requirements.eventuallydue`"}, {"path": "connect\\required-updates\\standard-accounts-guide.md", "url": "https://docs.stripe.com/connect/required-updates/standard-accounts-guide", "content": "#Standard accounts guide | Stripe Documentation\nN/A\n\n#Standard accounts guide\n#Learn about the changes to Connect onboarding requirements, and how your connected accounts will be affected in Australia, Europe, New Zealand, and the United States.\nTo adapt to changes in financial regulations, Stripe has made important updates to Connect that affect the information collection requirements. Many of these requirements relate to gathering information to verify companies and individuals. Stripe already manages this information collection for Standard accounts. Stripe will start collecting updated requirements from new businesses when they sign up for your platform. If you have existing users that are affected by these changes, Stripe will contact them to collect updated information. You don’t need to take action.\n#Updated requirement: beneficial owners\nInformation about the beneficial owners of a business is required for accounts in Australia, Europe, New Zealand, and the United States.\n• Owner: Any individual who owns a significant percentage of the company (often 25% or more).\n• Executive (sometimes referred to as a controller): Any individual who exercises significant control over your company. Individuals considered to exercise significant control over the company are those responsible for managing and directing the business and may include executive officers or senior managers such as CEO, CFO, COO, Managing Member, General Partner, President, Vice President, or Treasurer.\n• Representative: The individual responsible for creating and maintaining the account. This is typically the end user who is interacting with your platform on behalf of the business.\nFor detailed information about the required information that Stripe collects from your Standard accounts, see Required Verification Information.\n#Impact to your connected accounts\nStripe has updated the Dashboard to collect the required information for your new connected accounts.\nExisting accounts that need to update their information will be contacted by Stripe later this year. They’ll receive emails and Stripe Dashboard notifications that will guide them through the information collection process.\n#Recommended actions\nIf you have any customer-facing documentation that references onboarding onto Stripe, you might want to update it to reflect the updated information requirements.\nTo provide a better user experience, it’s a best practice to identify accounts that can’t process payments. An account can be unable to process payments because of verification issues or missing information. Stripe works to resolve these cases directly with your customers, but you should also monitor your connected accounts and tell customers who can’t process payments to log into their Stripe account to resolve the issue. To determine whether or not an account can process payments, check the chargesenabled attribute on the Account object.\n`chargesenabled`For more information about requirements, see the company ownership and beneficial owners support articles."}, {"path": "connect\\risk-management\\best-practices.md", "url": "https://docs.stripe.com/connect/risk-management/best-practices", "content": "#Best practices for risk management | Stripe Documentation\nURL: https://docs.stripe.com/connect/risk-management/best-practices\n\n#Best practices for risk management\n#Protect your integration by implementing best practices for preventing, mitigating, and responding to payments risk.\nThese best practices for protecting your Connect integration are based on what we’ve learned from thousands of platforms, extensions, and plug-ins.\n#Decide your approach to negative balance liability\nBecause your choice of negative balance liability can significantly impact your platform and connected accounts, consider it carefully before onboarding any accounts. We advise that new platforms have Stripe take responsibility for negative balances on connected accounts. Only consider taking responsibility as the platform if you’re confident in your ability to manage merchant risk.\n#Best practices for both approaches\n#Prevent fraudulent transactions by enabling Radar\nWhen you enable Radar, payment risk scoring is on by default at the user level, preventing transactions with high fraud risk. For information on using Radar with connected accounts, see Using Radar with Connect.\n#Manage notifications and communications with Stripe\n#Webhook notifications\nStripe uses webhooks to notify you of your connected accounts’ activities. Set up Connect webhooks so you can avoid delays in fund transfers by promptly responding to connected account updates and Stripe requests.\nStripe requests additional information if the provided user information fails verification. An incorrect date of birth or last name might be the result of a data entry error. You can help your connected accounts respond to failed verifications by directing them to Stripe-hosted onboarding or Embedded onboarding, or request the data yourself if you use API onboarding.\nWhen a user updates their account information (for example, bank account), Stripe sends you a notification of the change.\n#Accounts to review\nThe Accounts to Review tab in your Connect Dashboard helps you monitor the risk and onboarding status of all of your connected accounts. This tab allows you to view any risk or onboarding restrictions that impact your accounts or that will impact them in the future. It also provides clear instructions on how to resolve open requirements.\n#Support transparency\nYou can use your Connect dashboard to view support cases that your connected accounts have opened with Stripe and help unblock them by providing additional context. Specifically, you can view a list of support cases, review conversations between connected accounts and Stripe, and send private messages to Stripe Support with information to help resolve issues.\n#Concerns about sanctions\nAs a US company, Stripe complies with all sanctions programs administered by the US Office of Foreign Assets Control (OFAC), along with a number of other national and international sanctions regimes. That includes prohibitions against interactions with certain individuals and entities, as well as comprehensive bans on business dealings involving certain countries or regions targeted by sanctions regimes.\nStripe screens all accounts, including connected accounts, in compliance with our own obligations under sanctions regimes. If a connected account is flagged as a possible sanctions concern, Stripe pauses payouts from that account and emails the platform to request additional information. If you have a preferred email address for receiving sanctions-related requests, contact Stripe Support.\nPayouts from the connected account remain paused until the review has been cleared. Disregarding or violating sanctions can lead to fines, regulatory action, and loss of licensing for both Stripe and our users.\n#Best practices for platform negative balance liability connected accounts\n#Core considerations\nPlatforms can bring merchant risk management in-house and further tailor their connected accounts’ experiences using risk tooling that Stripe provides. For additional details on strategy and approach to risk management, see our guide on risk management for software platforms. Starting a risk management solution involves several investments. Some of the core considerations include:\n• Screening and detection: Risk screening infrastructure to understand the risk profile of connected accounts and prevent or reduce fraud and credit risk. This includes building detection mechanisms to identify risky connected accounts.\n• Monitoring and mitigation: Systems to monitor risk signals and take action (such as pausing payouts, pay-ins, and so on) to mitigate exposure in response to changes in risk signals over time. Building workflows in your product to make sure that users have resolution paths in response to actions, such as uploading identity documents, verifying legal entity information or providing additional risk related information.\n• Risk specialists: Risk operations teams can monitor risk exposure and intervene in response to signals. Make sure that your operations teams can support connected account owners with questions about risk actions taken on their account.\n#Reduce the risk of fraudulent merchants using your platform\nBefore going live, establish best practices for preventing fraud and managing risk. There’s no foolproof method to detect bad actors. Mitigate fraud risk by following risk management best practices to assess an account’s holistic risk profile. The more you understand your connected account and their business, the better the risk assessment. Stripe recommends that you:\n• Verify your connected accounts before they can do business through your platform.\n• Examine an account’s online presence through social or professional profiles such as Facebook, X (formerly Twitter), or LinkedIn.\n• Closely review the account’s website, including considering whether it’s appropriate for them to have one.\n• Collect any appropriate licenses for their business.\n• Confirm their email address if it’s linked to their business domain. For example, send an email to an address at that domain and require a response from it.\n• Collect and verify platform-appropriate information such as a physical address, inventory list, or selling history.\n• Monitor activity on your platform to get a sense of typical behavior, which you can use to identify future suspicious behavior.\n• Pause payments or payouts when suspicious behavior is detected.\n• Use the built-in fraud tools to identify and prevent fraud on individual charge attempts. For information on how Radar works with Connect, see Using Radar with Connect.\n• Add additional verifications to Connect onboarding and disable payouts or payments until the checks pass.\nIf you suspect that a connected account is committing fraud, Stripe recommends rejecting that account. That reduces losses by preventing the account from receiving more funds and helps improve Stripe’s fraud detection systems.\n#Prevent account take-overs\nBad actors can target your connected accounts and compromise them, an attack known as account takeover (ATO). Attackers commonly obtain account credentials using methods like phishing, data breaches, and guessable passwords. They use the credentials to create unauthorized transactions and other fraudulent activities on the account. To help prevent account takeovers, it’s good practice to:\n• Require two-factor authentication when your connected account users log in\n• Educate your connected accounts about phishing and other vulnerabilities\n• Enforce unique password policies\n• Monitor anomalous login activity, especially when it involves new device identifiers or IP addresses\n• Monitor changes to sensitive account data such as passwords, email addresses, and bank account information that originates from new devices\n• Use identity checks to assist in two-factor authentication recovery or in response to suspicious activity\n#Mitigate credit risks\nManaging disputes and chargebacks are a normal part of doing business when accepting card payments. To build an effective strategy for preventing disputes, employ a number of different methods. The following subsections contain some recommendations to help you manage your exposure, protect your business, and support your accounts.\n#Account monitoring\nMonitor your accounts. The more you understand your connected account and their business, the better you can assess their risk.\n• Examine connected account balances through the API or the Dashboard. In the Dashboard’s accounts overview, use filters to investigate accounts that might require you to take action, such as accounts with negative balances.\n• Review financial activity on an account. When viewing the account in the Dashboard, click View financial reports in the Activity card.\n• Create alerts to monitor riskier accounts so you can quickly adjust your strategies. Riskier accounts have higher dispute rates (dispute activity above 0.75% is generally considered excessive), sharply reduced volume, or negative balances.\n#Riskier accounts\nFor newer sellers or service providers that might be riskier, consider delaying or holding payouts until goods or services are delivered. Learn more about account balances and payout scheduling.\nFor platforms with users on manual payouts, you can update your payout creation logic to defer or slow down payouts for riskier accounts.\nFor connected accounts that receive automatic payouts, you can slow them by extending the payout schedule on a per-account basis in the Dashboard or by setting settings.payouts.schedule in the API. When viewing the account in the Dashboard, click Edit payout schedule in the Balance card’s overflow menu :\n#Impact from chargebacks and negative balances\nConsider product or service refunds instead of having to manage chargebacks and negative balances. It might be better for the customer and also less expensive for you. Your options include:\n• Issue refunds. You can check whether the connected account’s balance can cover the refund using the Dashboard or by retrieving it using the API. If their balance can’t cover the refund, you can reverse the transfer without issuing the refund, which results in a negative balance on the account.\n• Issue refunds based on certain parameters. For example, you can wait until the account’s balance is no longer negative to issue refunds or immediately issue the refund knowing that future payments can cover the amount.\n• Proactively cancel and refund charges that are likely to be disputed. The loss on the transaction might be better for the account than getting a chargeback. In addition, there are costs that come with chargebacks and the potential scrutiny from card networks.\n• Permit your team to handle refunds by adding them to your platform account.\n• Pause collection of recurring payments for subscriptions that are at high risk for chargebacks. That gives you more control over when to resume the subscription. For example, if your platform offers classes that have been canceled for the next few months, you can pause collection of payments for those classes.\n• Protect your platform from negative balances by adding funds to your platform balance.\n• If you have access to Stripe Sigma, use it to generate a report of each account’s negative balance over time.\n#Negative balances on accounts  Australia Canada Europe (SEPA, UK) New Zealand US\nIf your connected accounts are in Australia, Canada, Europe (SEPA countries, including the UK), New Zealand, or the US, you can allow Stripe to cover negative balances by automatically debiting their external accounts. In New Zealand, automatic debiting is only supported for connected accounts where Stripe is responsible for collecting updated information when requirements are due or change (including Standard and Express accounts). Otherwise, connected accounts can cover negative balances with future payment volume.\nBy default, automatic debiting is set to false for connected accounts where the platform is responsible for collecting updated information when requirements are due or change (including Custom accounts). You can toggle the automatic debits setting on an account using the Dashboard or by setting debitnegativebalances using the API.\nFrom the Dashboard, select an account and open the Balance card’s overflow menu (). You can view all connected accounts that have the automatic debits setting turned off by using the Debit negative balances filter:\n#Use Stripe’s tools to manage merchant risks\nStripe provides platforms with several tools to monitor and manage risk.\nLoss prevention tools\n• Debit Negative Balances: For connected accounts in certain countries, you can allow Stripe to automatically debit their external accounts to cover negative balances. Otherwise, negative balances can be covered by future payment volume. You can toggle the automatic debits setting on an account using the Dashboard or by setting debitnegativebalances using the Accounts API.\n• Set payout timing: You can set default delaydays for payouts to connected accounts that are considered risky or are located in countries with higher fraud rates.\nDebit Negative Balances: For connected accounts in certain countries, you can allow Stripe to automatically debit their external accounts to cover negative balances. Otherwise, negative balances can be covered by future payment volume. You can toggle the automatic debits setting on an account using the Dashboard or by setting debitnegativebalances using the Accounts API.\nSet payout timing: You can set default delaydays for payouts to connected accounts that are considered risky or are located in countries with higher fraud rates.\nAdditional risk signals\n• Identity: Streamline risk processes by providing ID verification during onboarding or prior to enabling payouts.\n• Financial Connections: Minimize fraud by matching bank account ownership with the identity of a connected account user before accepting payments or payouts. Fully underwrite accounts with a deep understanding of balance and transaction data.\nActioning\n• Pause payouts: In the Dashboard, you can pause payouts as a first line of defense after you identify suspicious activity. Pausing payouts stops a connected account from completing payouts to their bank account.\n• Pause payments: In the Dashboard, you can pause payments as a second line of defense. Pausing payments on a suspicious connected account limits your exposure by stopping it from collecting payments through your platform.\n• Reject account: You can use the API or Dashboard to remove fraudulent or risky connected accounts from your platform. Rejecting an account is permanent and should only be used as the last line of defense."}, {"path": "connect\\risk-management\\managed-risk.md", "url": "https://docs.stripe.com/connect/risk-management/managed-risk", "content": "#Stripe Managed Risk | Stripe Documentation\nURL: https://docs.stripe.com/connect/risk-management/managed-risk\n\n#Stripe Managed Risk\n#Let Stripe protect your platform from losses that result from negative balances on your connected accounts.\nStripe Managed Risk is an end-to-end business risk management solution for platforms that includes ongoing monitoring and mitigation for credit and fraud risk. In addition, Stripe assumes risk of loss in the event of unrecoverable negative balances on connected accounts.\nWhen Stripe manages risk for connected accounts, we monitor risk signals, apply risk interventions in response to observed signals, and seek to recover negative balances. You aren’t liable for unrecoverable negative balances on your connected accounts.\n#Components of Stripe Managed Risk\nStripe Managed Risk has three core components:\n• Screening and detection\n• Monitoring and mitigation\n• Stripe negative balance liability\n#Screening and detection\nWhen you onboard new connected accounts to your platform, Stripe conducts a number of up-front risk-based onboarding checks. These checks verify adherence to our compliance and regulatory standards and help identify fraud and credit risk signals.\nYou can implement additional onboarding verifications to meet relevant regulations for products or services offered by your platform or connected accounts.\n#Monitoring and mitigation\nStripe performs ongoing monitoring of risk signals (KYC, transaction data, and so on) to identify connected accounts that might pose credit or fraud risks. We use automated processes, such as machine learning models and Stripe risk team manual reviews. Stripe automates interventions against risky businesses to reduce fraud and risk of loss. For example, Stripe processes might flag a risky connected account in response to a number of signals such as elevated losses, spikes in chargeback rates, or refunds. In response, Stripe might take targeted action on that account using any of a large number of interventions to reduce risk exposure. Some of the Stripe key risk interventions include:\n• Changes to capabilities: In response to risk signals, Stripe might slow or pause payouts, or pause a connected account’s ability to process charges.\n• Reserves: In response to risk signals, Stripe might hold a reserve on the connected account balance. It can be a fixed amount or a percentage of transaction amounts.\n• Offboarding: In the extreme case that a business poses significant risk to Stripe or your platform (ToS violations, fraud, and so on), Stripe might deactivate the connected account.\n#Stripe negative balance liability\nWhen you use Stripe negative balance liability for connected accounts, Stripe assumes the risk of losses from unrecoverable negative balances on those connected accounts. In particular, Stripe doesn’t deduct unrecoverable negative connected account balances from your platform account.\n#Requirements to use Stripe Managed Risk\nStripe Managed Risk has these requirements:\n• Radar: You must use Radar on connected account transactions. (For users who pay Stripe’s listed prices for payments processing, Radar is included at no additional cost.)\n• Charge type: You must use direct charges.\n• Connected account onboarding: When onboarding connected accounts, you must use either Stripe-hosted onboarding or the embedded onboarding component. Connected accounts where Stripe is liable for negative balances, including Standard accounts, can’t complete onboarding in any other way.\n• Connected account dashboard: Connected accounts where Stripe is liable for negative balances must have access to a Stripe-hosted dashboard, or your platform’s interface must include both the Notifications Banner and Account Management embedded components. Some Stripe risk interventions require them to allow connected accounts to update their business information.\n• Connected account capability and service agreement: When creating connected accounts, you must request the card_payment capability and the full Stripe Service Agreement type.\n#Stripe Managed Risk for connected accounts\nYou define how your connected accounts interact with Stripe Managed Risk by configuring their onboarding flow and their dashboard or other platform interface.\n#Connected account onboarding flow\nWhen Stripe is liable for negative balances, you can onboard connected accounts using Stripe-hosted onboarding or the embedded onboarding component. With either option, Stripe collects the required information for risk management and prompts the connected account to accept the Stripe terms of service. You can prefill any information that you have previously collected in your onboarding flow using the Accounts API.\n#Connected account dashboard or platform interface\nMost connected accounts are likely to have few, if any, interactions with Stripe risk management. However, in the event that Stripe requires additional risk-related information from one of your connected accounts, Stripe notifies your connected account and provides a pathway for them to respond to and resolve the intervention.\nTo resolve an intervention, a connected account owner might provide additional KYC information, complete a form, or provide other documentation. Stripe reviews their response to assess whether to lift, revise, or continue the intervention.\n#Connected accounts with access to the full Stripe Dashboard\n#Connected accounts with access only to embedded components\n#Fees for Stripe Managed Risk\nThe fees for Stripe Managed Risk depend on the economic model:\n• Revenue share: For connected accounts where the platform uses a revenue share economic model for payments processing, including Standard accounts, we include Stripe Managed Risk at no additional cost.\n• Buy rate: For connected accounts where the platform uses a buy-rate economic model, Stripe Managed Risk fees depend on the pricing arrangements:Listed pricing: For platforms that pay listed pricing for payments processing and Connect fees, we include Stripe Managed Risk at no additional cost.Negotiated pricing: For platforms with negotiated pricing for either payments processing or Connect fees, Stripe Managed Risk incurs additional fees. For more information, contact Stripe Sales.\n• Listed pricing: For platforms that pay listed pricing for payments processing and Connect fees, we include Stripe Managed Risk at no additional cost.\n• Negotiated pricing: For platforms with negotiated pricing for either payments processing or Connect fees, Stripe Managed Risk incurs additional fees. For more information, contact Stripe Sales."}, {"path": "connect\\risk-management\\risk-tooling.md", "url": "https://docs.stripe.com/connect/risk-management/risk-tooling", "content": "#Merchant risk tooling | Stripe Documentation\nURL: https://docs.stripe.com/connect/risk-management/risk-tooling\n\n#Merchant risk toolingPrivate preview\n#Use Stripe tools to prevent and manage merchant risk.\nIf you decide to manage merchant risk yourself, Stripe offers tools to help you:\n• Identify a potentially fraudulent connected account using a fraud risk score.\n• Investigate a connected account by reviewing risk metrics and fraud indicators.\n• Gather additional information about a connected account through document verification and a selfie check.\n• Take action against a connected account by pausing payouts, pausing payments, rejecting the account, or blocking its external payout account.\n#Identify potentially fraudulent connected accounts\nStripe provides a fraud risk score for each connected account based on the risk-related signals that we collect. In your Dashboard, you can filter the accounts overview based on the fraud risk score. The Home page also alerts you to potentially fraudulent connected accounts.\n#Investigate a connected account\nIn your Dashboard, you can view the following information in the connected account details page:\n• The fraud risk score of the connected account\n• Potential fraud indicators, which provide you with suggestions for potential areas to investigate further\n• Risk-related metrics, such as declines, disputes, and refunds, specific to that connected account\n#Gather additional information\nTo gather more information on the connected account, you can ask to verify a government-issued ID document and, optionally, a selfie. When you do so, you also set an enforcement that automatically occurs if the connected account doesn’t successfully complete the verification. This enforcement can either be to pause payouts only, or to pause both payouts and payments. This enforcement can occur either after a certain period of time or after a certain total lifetime volume.\n#Take action\nYou can pause payments, pause payouts, or reject a connected account using the API or the Dashboard.\n#Request early access"}, {"path": "connect\\supported-embedded-components\\account-management.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/account-management", "content": "#Account management | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/account-management\n\n#Account management\n#Show account details and allow them to be edited.\nAccount management renders a UI component for connected accounts to view and manage their account details. Connected accounts can view and edit account information such as personal or business information, public information, and bank accounts they use for payouts.\n#Requirements collection options\nWhen a connected account has outstanding requirements, embedded account management prompts the connected account to update their information. You can control the collection of currentlydue or eventuallydue requirements, and whether to include future requirements, using the collectionOptions attribute.\n`currentlydue``eventuallydue``collectionOptions`## The details submitted attribute\nThe account management component renders only for accounts where the detailssubmitted attribute is true. If an account hasn’t gone through onboarding, the account management component fails to render. In this scenario, we recommend using the account onboarding component.\n`true`## Displayed fields\nThe fields that the account management component displays depend on how you configured the connected account—specifically on the connected account country, business type, capabilities and service agreement type. This works similarly to how the onboarding component only collects the information that’s required for how the connected account is configured.\n#External account collection\nUse the externalaccountcollection feature to control whether the component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When externalaccountcollection is enabled, user authentication is required. You can opt out of Stripe user authentication with the disablestripeuserauthentication parameter.\n`externalaccountcollection`## Disable Stripe user authentication\nUse the disablestripeuserauthentication feature to control whether the component requires Stripe user authentication. The default value is the opposite of the externalaccountcollection value. For example, if you don’t set externalaccountcollection, it defaults to true and disablestripeuserauthentication defaults to false. This value can only be true for accounts where controller.requirementcollection is application.\n`externalaccountcollection``disablestripeuserauthentication``controller.requirementcollection``application`We recommend implementing 2FA or equivalent security measures as a best practice. For account configurations that support this feature, such as Custom accounts, you assume liability for connected accounts if they can’t pay back negative balances.\n#Create an Account Session\nWhen creating an Account Session, enable account management by specifying accountmanagement in the components parameter.\n`accountmanagement``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountmanagement][enabled]\"=true \\\n  -d \"components[accountmanagement][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountmanagement][enabled]\"=true \\\n  -d \"components[accountmanagement][features][externalaccountcollection]\"=true`### Render the account management component\n// Include this element in your HTML\nconst accountManagement = stripeConnectInstance.create('account-management');\ncontainer.appendChild(accountManagement);\n// Optional:\n// accountManagement.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n`// Include this element in your HTML\nconst accountManagement = stripeConnectInstance.create('account-management');\ncontainer.appendChild(accountManagement);\n// Optional:\n// accountManagement.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setCollectionOptions | { fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' } | Customizes collecting currentlydue or eventuallydue requirements and controls whether to include future requirements. Specifying eventuallydue collects both eventuallydue and currentlydue requirements. | {fields: 'currentlydue', futureRequirements: 'omit'} |  \n`setCollectionOptions``{ fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' }``currentlydue``eventuallydue``eventuallydue``eventuallydue``currentlydue``{fields: 'currently_due', futureRequirements: 'omit'}`"}, {"path": "connect\\supported-embedded-components\\account-onboarding.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/account-onboarding", "content": "#Account onboarding | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/account-onboarding\n\n#Account onboarding\n#Use the Account onboarding Connect embedded component.\nThe Account onboarding component uses the Accounts API to read requirements and generate an onboarding form that’s localized for all Stripe-supported countries and that validates data. In addition, Embedded onboarding handles all business types, various configurations of company representatives, document uploads, identity verification, and verification statuses. For more information, see Embedded onboarding.\n#Requirements collection options\nWith embedded onboarding, you can control the collection of currentlydue or eventuallydue requirements, along with the inclusion of future requirements. You can customize this behavior by using the collectionOptions attribute when integrating the account onboarding component.\n`currentlydue``eventuallydue``collectionOptions`## External account collection\nUse the externalaccountcollection feature to control whether the component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When externalaccountcollection is enabled, user authentication is required. You can opt out of Stripe user authentication with the disablestripeuserauthentication parameter.\n`externalaccountcollection`## Disable Stripe user authentication\nUse the disablestripeuserauthentication feature to control whether the component requires Stripe user authentication. The default value is the opposite of the externalaccountcollection value. For example, if you don’t set externalaccountcollection, it defaults to true and disablestripeuserauthentication defaults to false. This value can only be true for accounts where controller.requirementcollection is application.\n`externalaccountcollection``disablestripeuserauthentication``controller.requirementcollection``application`We recommend implementing 2FA or equivalent security measures as a best practice. For account configurations that support this feature, such as Custom accounts, you assume liability for connected accounts if they can’t pay back negative balances.\n#Customize policies shown to your users\nConnected accounts see Stripe’s service agreement and Privacy Policy during embedded onboarding. Connected account users who haven’t accepted Stripe’s services agreement must accept it on the final onboarding screen. Embedded onboarding also has a footer with links to Stripe’s service agreement and Privacy Policy.\nFor connected accounts where the platform is responsible for requirement collection, you have additional options to customize the onboarding flow, as outlined below.\n#Handle service agreement acceptance on your own\nIf you’re a platform onboarding connected accounts where you’re responsible for requirement collection, you can collect Terms of Service acceptance using your own process instead of using the embedded account onboarding component. If using your own process, the final onboarding screen only asks your connected accounts to confirm the information they entered, and you must secure their acceptance of Stripe’s service agreement.\nEmbedded onboarding still has links to the terms of service (for example, in the footer) that you can replace by linking to your own agreements and privacy policy.\n#Link to your agreements and privacy policy\nConnected accounts see the Stripe service agreement and Privacy Policy throughout embedded onboarding. For the connected accounts where you’re responsible for requirement collection, you can replace the links with your own agreements and policy. Follow the instructions to incorporate the Stripe services agreement and link to the Stripe Privacy Policy.\n#Create an Account Session\nWhen creating an Account Session, enable account onboarding by specifying accountonboarding in the components parameter.\n`accountonboarding``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountonboarding][enabled]\"=true \\\n  -d \"components[accountonboarding][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[accountonboarding][enabled]\"=true \\\n  -d \"components[accountonboarding][features][externalaccountcollection]\"=true`After creating the Account Session and initializing ConnectJS, you can render the Account onboarding component in the front end:\n// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n  console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);\n// Optional: make sure to follow our policy instructions above\n// accountOnboarding.setFullTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setPrivacyPolicyUrl('{{URL}}')\n// accountOnboarding.setSkipTermsOfServiceCollection(false)\n// accountOnboarding.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n// accountOnboarding.setOnStepChange((stepChange) => {\n//   console.log(`User entered: ${stepChange.step}`);\n// });\n`// Include this element in your HTML\nconst accountOnboarding = stripeConnectInstance.create('account-onboarding');\naccountOnboarding.setOnExit(() => {\n  console.log('User exited the onboarding flow');\n});\ncontainer.appendChild(accountOnboarding);\n// Optional: make sure to follow our policy instructions above\n// accountOnboarding.setFullTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}')\n// accountOnboarding.setPrivacyPolicyUrl('{{URL}}')\n// accountOnboarding.setSkipTermsOfServiceCollection(false)\n// accountOnboarding.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n// accountOnboarding.setOnStepChange((stepChange) => {\n//   console.log(`User entered: ${stepChange.step}`);\n// });`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setFullTermsOfServiceUrl | string | Absolute URL to your full terms of service agreement. | Stripe’s full service agreement \n setRecipientTermsOfServiceUrl | string | Absolute URL to your recipient terms of service agreement. | Stripe’s recipient service agreement \n setPrivacyPolicyUrl | string | Absolute URL to your privacy policy. | Stripe’s privacy policy \n setSkipTermsOfServiceCollection | string | If true, embedded onboarding skips terms of service collection and you must collect terms acceptance yourself. | false \n setCollectionOptions | { fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' } | Customizes collecting currentlydue or eventuallydue requirements and controls whether to include future requirements. Specifying eventuallydue collects both eventuallydue and currentlydue requirements. | {fields: 'currentlydue', futureRequirements: 'omit'} \n setOnExit | () => void | The connected account has exited the onboarding process |  \n setOnStepChange | ({step}: StepChange) => void | The connected account has navigated from one step to another within the onboarding process. See the step change object for a full reference and restrictions. |  \n`setFullTermsOfServiceUrl``string``setRecipientTermsOfServiceUrl``string``setPrivacyPolicyUrl``string``setSkipTermsOfServiceCollection``string``setCollectionOptions``{ fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' }``currentlydue``eventuallydue``eventuallydue``eventuallydue``currentlydue``{fields: 'currentlydue', futureRequirements: 'omit'}``setOnExit``() => void``setOnStepChange``({step}: StepChange) => void`To use this component to set up new accounts:\n# Create a connected account. You can prefill information on the account object in this API call.\n# Initialize Connect embedded components using the ID of the connected account.\n# Include the account-onboarding element to show the onboarding flow to the connected account.\n# Listen for the exit event emitted from this component. Stripe sends this event when the connected account exits the onboarding process.\n# When exit triggers, retrieve account details to check the status of detailssubmitted, chargesenabled, payoutsenabled, and other capabilities. If all required capabilities are enabled, you can take the account to the next step of your flow.\n`account-onboarding``exit``exit`#### The stepchange object\n`stepchange`Every time the connected account navigates from one step to another in the onboarding process, a stepchange object is passed to the step change handler with the following properties.\n`stepchange`| Name | Type | Example value |\n step | string See the possible step values | businesstype \n The unique reference to an onboarding step. \n`step``string``businesstype`##### Restrictions\n• The stepchange object is only for analytics.\n• Steps can appear in any order and can be repeated.\n• Possible step values can change at any time.\n`stepchange``step`#### Step Values\nEach page in onboarding has a unique step name. This step is an exhaustive list of pages the user could see in the onboarding process. These values can change at any time without notice.\n`step`| Steps | Description |\n --- | --- \n stripeuserauthentication | User authentication includes a popup to a Stripe-owned window. The connected account must authenticate before they can continue their workflow. \n riskintervention | Guides the connected account to resolve risk-related requirements. \n legalentitysharing | Connected accounts can optionally reuse existing information when onboarding new accounts. \n businesstype | Sets the business type of the connected account. In certain cases the connected account can also set their country. \n businessdetails | Collects information related to the connected account’s business. \n businessverification | Collects a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation. Or allows users to correct wrongly entered information related to the entity. \n businessbankaccountownershipverification | Collects documents needed to verify that bank account information, such as the legal owner’s name and account number, match the information on the user’s Stripe account. \n businessdocuments | Collects other documents and verification requirements related to the business. \n representativedetails | Collects information about the account representative. \n representativedocument | Collects a government-issued ID verifying the existence of the account representative. \n representativeadditionaldocument | Collects an additional document to verifying the details of the account representative. \n legalguardiandetails | Collects the legal guardians consent for accounts opened by minors. \n owners | Collects information about the beneficial owners of a company. \n directors | Collects information about the directors of a company. \n executives | Collects information about the executives of a company. \n confirmowners | Allows connected accounts to attest that the beneficial owner information provided to Stripe is both current and correct. \n risacompliancesurvey | Answers questions concerning the Revised Installment Sales Act. (only for Japan) \n treasuryandcardissuingtermsofservice | Collects Treasury and Card Issuing terms of service when requesting those capabilities. \n externalaccount | Collects the external account of the connected account. \n supportdetails | Collects information that helps customers recognize the connected accounts business. This support information may be visible in payment statements, invoices, and receipts. \n climate | Allows a connected account to opt into Stripe Climate. \n tax | Allows a connected account to opt into Stripe Tax. \n summary | Final review step of onboarding. The connected account can update entered information from this step. The terms of service and privacy URL is displayed in this screen. \n summaryrisk | From the summary step, a connected account can update information related to risk requirements. \n summarybusinesstype | From the summary step, a connected account can update information related to their business type. \n summarybusiness | From the summary step, a connected account can update information related to their business. \n summarysupport | From the summary step, a connected account can update information related to their businesses public facing information. \n summarypersons | From the summary step, a connected account can update information about each person on their account. \n summaryexternalaccount | From the summary step, a connected account can update information related to their external account. \n summarytax | From the summary step, a connected account can update information related to their Stripe Tax integration. \n summarytaxidentificationform | From the summary step, a connected account can update information related to their W8/W9 certified tax information. This is shown when Stripe must collect W8/W9 information. \n summaryclimate | From the summary step, a connected account can update information related to their Stripe Climate integration. \n`stripeuserauthentication``riskintervention``legalentitysharing``businesstype``businessdetails``businessverification``businessbankaccountownershipverification``businessdocuments``representativedetails``representativedocument``representativeadditionaldocument``legalguardiandetails``owners``directors``executives``confirmowners``risacompliancesurvey``treasuryandcardissuingtermsofservice``externalaccount``supportdetails``climate``tax``summary``summaryrisk``summarybusinesstype``summarybusiness``summarysupport``summarypersons``summaryexternalaccount``summarytax``summarytaxidentificationform``summary_climate`"}, {"path": "connect\\supported-embedded-components\\app-install.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/app-install", "content": "#App install | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/app-install\n\n#App installPrivate preview\n#Show a button to install an app.\nApp install renders a component that enables your connected account to install an app.\nFor full integration details, see the Embedded Stripe Apps integration guide.\n#Create an Account Session\nWhen creating an Account Session, enable the App install component by specifying appinstall in the components parameter. You must enable the app you want to install by specifying the features parameter under allowedapps.\n`appinstall``components``features``allowedapps`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[appinstall][enabled]\"=true \\\n  -d \"components[appinstall][features][allowedapps][]\"=APPID\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[appinstall][enabled]\"=true \\\n  -d \"components[appinstall][features][allowedapps][]\"=APPID`After creating the account session and initializing ConnectJS, you can render the App install component in the front end:\nconst appInstall = stripeConnectInstance.create('app-install');\nappInstall.setApp('{{APPID}}');\ncontainer.appendChild(appInstall);\n`const appInstall = stripeConnectInstance.create('app-install');\nappInstall.setApp('{{APPID}}');\ncontainer.appendChild(appInstall);`This embedded component supports the following parameters:\n Method | Type | Description \n --- | --- | --- \n setApp | string | Sets the ID of the App your connected account can install. See the list of available apps. \n`setApp``string`You can configure custom behavior based on the current or updated state of an install.\n// index.html\n// index.js\n// Do something when install state fetched on render\nconst handleAppInstallFetched = (response) => {\n  console.log(`Install state fetched for app  ${response.appId} to ${response.state}`);\n};\n// Do something when install state changes\nconst handleAppInstallChanged = (response) => {\n  console.log(`Install state changed for app  ${response.appId} to ${response.state}`);\n};\nconst container = document.getElementById('app-install-container');\nconst appInstall = stripeConnectInstance.create('app-install');\nappInstall.setApp('{{APPID}}');\nappInstall.setOnAppInstallStateFetched(handleAppInstallFetched);\nappInstall.setOnAppInstallStateChanged(handleAppInstallChanged);\ncontainer.appendChild(appInstall);\n`// index.html\n// index.js\n// Do something when install state fetched on render\nconst handleAppInstallFetched = (response) => {\n  console.log(`Install state fetched for app  ${response.appId} to ${response.state}`);\n};\n// Do something when install state changes\nconst handleAppInstallChanged = (response) => {\n  console.log(`Install state changed for app  ${response.appId} to ${response.state}`);\n};\nconst container = document.getElementById('app-install-container');\nconst appInstall = stripeConnectInstance.create('app-install');\nappInstall.setApp('{{APPID}}');\nappInstall.setOnAppInstallStateFetched(handleAppInstallFetched);\nappInstall.setOnAppInstallStateChanged(handleAppInstallChanged);\ncontainer.appendChild(appInstall);`| Method | Description | Variables |\n --- | --- | --- \n setOnAppInstallStateFetched | Allows users to specify custom behavior in a callback function on install fetch. | response.appId: The app installedresponse.state: The state of the install INSTALLED | UNINSTALLED \n setOnAppInstallStateChanged | Allows users to specify custom behavior in a callback function when the install state has changed. | response.appId: The app installedresponse.state: The state of the install INSTALLED | UNINSTALLED \n`setOnAppInstallStateFetched`- response.appId: The app installed\n• response.state: The state of the install INSTALLED | UNINSTALLED\n`response.appId``response.state``INSTALLED | UNINSTALLED``setOnAppInstallStateChanged`- response.appId: The app installed\n• response.state: The state of the install INSTALLED | UNINSTALLED\n`response.appId``response.state``INSTALLED | UNINSTALLED`You can integrate our sample app (set APPID to stripe.app-explorer), which we’ve pre-approved for embedding on your platform.\n`APPID``stripe.app-explorer`## Request early access  Private preview\nSign in to request access to this Connect embedded component in preview.\nIf you don’t have a Stripe account, you can register now."}, {"path": "connect\\supported-embedded-components\\app-viewport.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/app-viewport", "content": "#App viewport | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/app-viewport\n\n#App viewportPrivate preview\n#Show a view from an installed App.\nApp viewport renders a view from an installed app.\nFor full integration details, see the Embedded Stripe Apps integration guide.\n#Create an Account Session\nWhen creating an Account Session, enable the App install component by specifying appviewport in the components parameter. You must enable the app you want to render by specifying the features parameter under allowedapps.\n`appviewport``components``features``allowedapps`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[appviewport][enabled]\"=true \\\n  -d \"components[appviewport][features][allowedapps][]\"=APPID\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[appviewport][enabled]\"=true \\\n  -d \"components[appviewport][features][allowedapps][]\"=APPID`After creating the account session and initializing ConnectJS, you can render the App viewport component in the front end. The view doesn’t render if the app isn’t installed:\nconst appViewport = stripeConnectInstance.create('app-viewport');\nappViewport.setApp('{{APPID}}');\nappViewport.setAppData({userId: '{{PLATFORMUSERID}}'});\ncontainer.appendChild(appViewport);\n`const appViewport = stripeConnectInstance.create('app-viewport');\nappViewport.setApp('{{APPID}}');\nappViewport.setAppData({userId: '{{PLATFORMUSERID}}'});\ncontainer.appendChild(appViewport);`This embedded component supports the following parameters:\n Method | Type | Description \n --- | --- | --- \n setApp | string | Sets the ID of the App your connected account can render. See available apps in the  Embedded Stripe Apps integration guide. \n setAppData | Record | Sets data pertaining to your platform consumed by the App. \n`setApp``string``setAppData``Record`You can integrate our sample app (set APPID to stripe.app-explorer), which we’ve pre-approved for embedding on your platform.\n`APPID``stripe.app-explorer`Read more about App install .\n#Request early access  Private preview\nSign in to request access to this Connect embedded component in preview.\nIf you don’t have a Stripe account, you can register now."}, {"path": "connect\\supported-embedded-components\\balances.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/balances", "content": "#Balances | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/balances\n\n#Balances\n#Show balance information and allow your connected accounts to perform payouts.\nBalances renders the balance summary and the payout schedule. It can also allow the connected account to perform instant or manual payouts.\n#Note\nThis component is part of the payouts component.\nWhen creating an Account Session, enable balances by specifying balances in the components parameter. You can enable or disable individual features of the balances component by specifying the features parameter under balances:\n`balances``components``features``balances`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[balances][enabled]\"=true \\\n  -d \"components[balances][features][instantpayouts]\"=true \\\n  -d \"components[balances][features][standardpayouts]\"=true \\\n  -d \"components[balances][features][editpayoutschedule]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[balances][enabled]\"=true \\\n  -d \"components[balances][features][instantpayouts]\"=true \\\n  -d \"components[balances][features][standardpayouts]\"=true \\\n  -d \"components[balances][features][editpayoutschedule]\"=true`After creating the account session and initializing ConnectJS, you can render the balances component in the front end:\n// Include this element in your HTML\nconst balances = stripeConnectInstance.create('balances');\ncontainer.appendChild(balances);\n`// Include this element in your HTML\nconst balances = stripeConnectInstance.create('balances');\ncontainer.appendChild(balances);`Enabling Instant Payouts might require additional steps:\n• If your platform collects fees for a connected account, you must set up Instant Payout monetization in the Dashboard.\n• If your platform is liable for a connected account’s negative balances, your platform must be in a supported country and the account must be in the same country as the platform and must be in the local currency.\n• If Stripe is liable for a connected account’s negative balances, Stripe controls eligibility for the account.\n#Note\nTo use standard manual payouts, the connected account needs to have their payout schedule set to manual. You can enable payout schedule editing in the payouts component by setting the editpayoutschedule feature to true.\n`manual``editpayoutschedule``true`"}, {"path": "connect\\supported-embedded-components\\capital-financing-application.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/capital-financing-application", "content": "#Capital financing application | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/capital-financing-application\n\n#Capital financing applicationPrivate preview\n#Show an end-to-end application flow for Capital financing.\nRender a UI component for connected accounts to complete a financing application. Connected accounts can select their offer amount and terms, view contractual details, and submit their application.\nThis component is functionally similar to the Capital financing promotion component, but it invokes the application directly without including educational or promotional content. Use it to provide a different application entry point than the Capital financing promotion component.\n#Component lifecycle\n#Determining when to render the component\nTo determine whether a connected account has an eligible financing offer, call the Capital list Financing Offers endpoint and pass the connected account ID in the connectedaccount parameter.\n`connectedaccount`If an account has no eligible financing offer, then the Capital financing application component renders as null.\n#Post-submission\nIf a connected account has already submitted their financing application, the Capital financing application component renders an empty screen. We recommend that you listen to the onApplicationSubmitted event to display a confirmation screen.\n`onApplicationSubmitted`## Create an Account Session\nWhen creating an Account Session, enable the financing application component by specifying capitalfinancingapplication in the components parameter.\n`capitalfinancingapplication``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[capitalfinancingapplication][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[capitalfinancingapplication][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the Capital financing application component in the front end:\n// Include this element in your HTML\nconst capitalFinancingApplication = stripeConnectInstance.create('capital-financing-application');\ncontainer.appendChild(capitalFinancingApplication);\n`// Include this element in your HTML\nconst capitalFinancingApplication = stripeConnectInstance.create('capital-financing-application');\ncontainer.appendChild(capitalFinancingApplication);`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setOnApplicationSubmitted | () => void | The connected account has successfully submitted their application for financing. |  \n setPrivacyPolicyUrl | string | Absolute URL of a page containing your privacy policy. | https://stripe.com/privacy \n setHowCapitalWorksUrl | string | Absolute URL of a page with information about the Capital program. | https://docs.stripe.com/capital/how-stripe-capital-works \n`setOnApplicationSubmitted``() => void``setPrivacyPolicyUrl``string``https://stripe.com/privacy``setHowCapitalWorksUrl``string``https://docs.stripe.com/capital/how-stripe-capital-works`"}, {"path": "connect\\supported-embedded-components\\capital-financing-promotion.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/capital-financing-promotion", "content": "#Capital financing promotion | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/capital-financing-promotion\n\n#Capital financing promotionPrivate preview\n#Show promotional content about a connected account's Capital financing offer and launch a Capital application.\nRender a UI component for connected accounts to view their Capital Financing Offer, along with educational and promotional content explaining the program’s functionality. They can open the application flow in a dialog by clicking Start application.\n#No-offer states\nIf the connected account doesn’t have a current financing offer, the component renders differently depending on their financing status:\n• If the account has active financing in progress or under review, the component renders as null.\n• If the connected account doesn’t have active financing, the component displays generic information about eligibility and the lending program.\n#Create an Account Session\nWhen creating an Account Session, enable the Capital financing promotion component by specifying capitalfinancingpromotion in the components parameter.\n`capitalfinancingpromotion``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[capitalfinancingpromotion][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[capitalfinancingpromotion][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the Capital financing promotion component in the front end:\n// Include this element in your HTML\nconst capitalFinancingPromotion = stripeConnectInstance.create('capital-financing-promotion');\ncontainer.appendChild(capitalFinancingPromotion);\n`// Include this element in your HTML\nconst capitalFinancingPromotion = stripeConnectInstance.create('capital-financing-promotion');\ncontainer.appendChild(capitalFinancingPromotion);`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setOnApplicationSubmitted | () => void | The connected account has successfully submitted their application for financing. |  \n setLayout | full | banner | Controls the layout of the component. banner mode greatly reduces the vertical size of the component, which is useful when stacking the component with other content on the page. | full \n setOnEligibleFinancingOfferLoaded | ({productType: standard | refill | none}) => void | The connected account’s financing offer has been loaded. The productType field corresponds to the producttype field on the Financing Offer object. |  \n setPrivacyPolicyUrl | string | Absolute URL of a page containing your privacy policy. | https://stripe.com/privacy \n setHowCapitalWorksUrl | string | Absolute URL of a page with information about the Capital program. | https://docs.stripe.com/capital/how-stripe-capital-works \n setEligiblityCriteriaUrl | string | Absolute URL of a page with information about eligibility criteria for the Capital program. | https://docs.stripe.com/capital/eligibility \n`setOnApplicationSubmitted``() => void``setLayout``full | banner``banner``full``setOnEligibleFinancingOfferLoaded``({productType: standard | refill | none}) => void``productType``producttype``setPrivacyPolicyUrl``string``https://stripe.com/privacy``setHowCapitalWorksUrl``string``https://docs.stripe.com/capital/how-stripe-capital-works``setEligiblityCriteriaUrl``string``https://docs.stripe.com/capital/eligibility`"}, {"path": "connect\\supported-embedded-components\\capital-financing.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/capital-financing", "content": "#Capital financing | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/capital-financing\n\n#Capital financingPrivate preview\n#Allow a connected account to view and manage their active Capital financing.\nThe Capital financing component allows connected accounts to view and manage their financing. Connected accounts can monitor repayment progress, review transaction history, and make payments.\n#Component lifecycle\n#No financing\nFor connected accounts without any financing history, the Capital financing component displays a “No financing” message. We recommend listening to the onFinancingsLoaded event to render a custom message or hide the component for accounts with no history.\n`onFinancingsLoaded`### In-review financing\nWhen a connected account has recently submitted a financing application, the Capital financing component shows an application tracker view. It informs the connected account of their application status.\nAfter an account first submits their application, you must reload this component for it to render the application tracker.\n#Create an Account Session\nWhen creating an Account Session, enable the Capital financing component by specifying capitalfinancing in the components parameter.\n`capitalfinancing``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[capitalfinancing][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[capitalfinancing][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the Capital financing component in the front end:\n// Include this element in your HTML\nconst capitalFinancing = stripeConnectInstance.create('capital-financing');\ncontainer.appendChild(capitalFinancing);\n`// Include this element in your HTML\nconst capitalFinancing = stripeConnectInstance.create('capital-financing');\ncontainer.appendChild(capitalFinancing);`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setDefaultFinancingOffer | string | Financing Offer ID to render on initial load of the component. By default, the component displays the active or most recent financing. |  \n setShowFinancingSelector | boolean | If true, render the financing dropdown selector to allow the connected account to change the displayed financing. | true \n setOnFinancingsLoaded | ({total: number}) => void | The component loaded the connected account’s financing history. |  \n setSupportUrl | string | Absolute URL of your support site. | https://support.stripe.com/ \n setHowCapitalWorksUrl | string | Absolute URL of a page with information about the Capital program. | https://docs.stripe.com/capital/how-stripe-capital-works \n`setDefaultFinancingOffer``string``setShowFinancingSelector``boolean``true``setOnFinancingsLoaded``({total: number}) => void``setSupportUrl``string``https://support.stripe.com/``setHowCapitalWorksUrl``string``https://docs.stripe.com/capital/how-stripe-capital-works`"}, {"path": "connect\\supported-embedded-components\\documents.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/documents", "content": "#Documents | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/documents\n\n#Documents\n#Show a list of documents available for download.\nDocuments renders a list of tax invoices available for download for the connected account.\nWhen creating an Account Session, enable documents by specifying documents in the components parameter.\n`documents``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[documents][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[documents][enabled]\"=true`After creating the account session, you can initialize ConnectJS and render the documents component in the front end:\n// Include this element in your HTML\nconst documents = stripeConnectInstance.create('documents');\ncontainer.appendChild(documents);\n`// Include this element in your HTML\nconst documents = stripeConnectInstance.create('documents');\ncontainer.appendChild(documents);`"}, {"path": "connect\\supported-embedded-components\\financial-account-transactions.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/financial-account-transactions", "content": "#Financial account transactions | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/financial-account-transactions\n\n#Financial account transactions\n#Show a table of all transactions for a financial account.\nFinancial account transactions renders the view of a list of transactions associated with a financial account for your connected accounts.\nThe permission boundary for this component is at the connected account level, not at the individual financial account level. This UI should be shown to users that have access to all financial accounts, not to users that have restricted access to a single financial account.\nWhen creating an Account Session, enable the financial account transactions component by specifying financialaccounttransactions in the components parameter. You can enable or disable individual features of the financial account component by specifying the features parameter under financialaccounttransactions.\n`financialaccounttransactions``components``features``financialaccounttransactions`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[financialaccounttransactions][enabled]\"=true \\\n  -d \"components[financialaccounttransactions][features][cardspenddisputemanagement]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[financialaccounttransactions][enabled]\"=true \\\n  -d \"components[financialaccounttransactions][features][cardspenddisputemanagement]\"=true`After creating the account session and initializing ConnectJS, you can render the financial account transactions component in the frontend:\n// Include this element in your HTML\nconst financialAccountTransactions = stripeConnectInstance.create('financial-account-transactions');\nfinancialAccountTransactions.setFinancialAccount('{{FINANCIALACCOUNTID')\ncontainer.appendChild(financialAccountTransactions);\n`// Include this element in your HTML\nconst financialAccountTransactions = stripeConnectInstance.create('financial-account-transactions');\nfinancialAccountTransactions.setFinancialAccount('{{FINANCIALACCOUNTID')\ncontainer.appendChild(financialAccountTransactions);`This embedded component supports the following parameters:\n Method | Type | Description |  \n --- | --- | --- | --- \n setFinancialAccount | string | The ID of the financial account which you want to display a list of transactions for | required \n`setFinancialAccount``string`"}, {"path": "connect\\supported-embedded-components\\financial-account.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/financial-account", "content": "#Financial Account | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/financial-account\n\n#Financial Account\n#Show the details of a Financial Account.\nFinancial Account renders the view of an individual Financial Account for your connected accounts.\nThe permission boundary for this component is at the connected account level, not at the individual financial account level. This UI should be shown to users that have access to all financial accounts, not to users that have restricted access to a single financial account.\n#External account collection\nUse the externalaccountcollection feature to control whether the component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When externalaccountcollection is enabled, user authentication is required. You can opt out of Stripe user authentication with the disablestripeuserauthentication parameter.\n`externalaccountcollection`## Disable Stripe user authentication\nUse the disablestripeuserauthentication feature to control whether the component requires Stripe user authentication. The default value is the opposite of the externalaccountcollection value. For example, if you don’t set externalaccountcollection, it defaults to true and disablestripeuserauthentication defaults to false. This value can only be true for accounts where controller.requirementcollection is application.\n`externalaccountcollection``disablestripeuserauthentication``controller.requirementcollection``application`We recommend implementing 2FA or equivalent security measures as a best practice. For account configurations that support this feature, such as Custom accounts, you assume liability for connected accounts if they can’t pay back negative balances.\n#Create an Account Session\nWhen creating an Account Session, enable the financial account component by specifying financialaccount in the components parameter. You can enable or disable individual features of the financial account component by specifying the features parameter under financialaccount.\n`financialaccount``components``features``financialaccount`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[financialaccount][enabled]\"=true \\\n  -d \"components[financialaccount][features][sendmoney]\"=true \\\n  -d \"components[financialaccount][features][transferbalance]\"=true \\\n  -d \"components[financialaccount][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[financialaccount][enabled]\"=true \\\n  -d \"components[financialaccount][features][sendmoney]\"=true \\\n  -d \"components[financialaccount][features][transferbalance]\"=true \\\n  -d \"components[financialaccount][features][externalaccountcollection]\"=true`After creating the account session and initializing ConnectJS, you can render the financial account component in the frontend:\n// Include this element in your HTML\nconst financialAccount = stripeConnectInstance.create('financial-account');\nfinancialAccount.setFinancialAccount('{{FINANCIALACCOUNTID')\ncontainer.appendChild(financialAccount);\n`// Include this element in your HTML\nconst financialAccount = stripeConnectInstance.create('financial-account');\nfinancialAccount.setFinancialAccount('{{FINANCIALACCOUNTID')\ncontainer.appendChild(financialAccount);`This embedded component supports the following parameters:\n Method | Type | Description | Default \n --- | --- | --- | --- \n setFinancialAccount | string | The ID of the Financial Account to display. | required \n`setFinancialAccount``string`"}, {"path": "connect\\supported-embedded-components\\issuing-card.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/issuing-card", "content": "#Issuing card | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/issuing-card\n\n#Issuing card\n#Show an individual issued card.\nIssuing card renders the details of an individual card issued to your connected accounts.\nThe permission boundary for this component is at the connected account level, not at the individual card level. This UI should be shown to users that have access to all cards, not to users that have restricted access to a single card.\nWhen creating an Account Session, enable the Issuing card component by specifying issuingcard in the components parameter.\n`issuingcard``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcard][enabled]\"=true \\\n  -d \"components[issuingcard][features][cardmanagement]\"=true \\\n  -d \"components[issuingcard][features][cardholdermanagement]\"=true \\\n  -d \"components[issuingcard][features][cardspenddisputemanagement]\"=true \\\n  -d \"components[issuingcard][features][spendcontrolmanagement]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcard][enabled]\"=true \\\n  -d \"components[issuingcard][features][cardmanagement]\"=true \\\n  -d \"components[issuingcard][features][cardholdermanagement]\"=true \\\n  -d \"components[issuingcard][features][cardspenddisputemanagement]\"=true \\\n  -d \"components[issuingcard][features][spendcontrolmanagement]\"=true`After creating the account session and initializing ConnectJS, you can render the Issuing card component in the front end:\n// Include this element in your HTML\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nissuingCard.setDefaultCard('{{ISSUINGCARDIDID');\nissuingCard.setShowSpendControls(true);\ncontainer.appendChild(issuingCard);\n`// Include this element in your HTML\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nissuingCard.setDefaultCard('{{ISSUINGCARDIDID');\nissuingCard.setShowSpendControls(true);\ncontainer.appendChild(issuingCard);`This embedded component supports the following attributes:\n Setter | Type | Description \n --- | --- | --- \n setDefaultCard | (string) => void | Sets the Issuing Card ID to display upon initial load. \n setCardSwitching | (boolean) => void | Sets whether to render the card dropdown selector. Defaults to true. \n setFetchEphemeralKey | (function) => void | Sets the callback that fetches the ephemeral key for the card. See sensitive data display. \n`setDefaultCard``(string) => void``setCardSwitching``(boolean) => void``setFetchEphemeralKey``(function) => void`## Set spending controls\nYou can use Issuing Connect embedded components to view and, optionally, edit spending controls on your cards by turning on the Issuing component’s showSpendControls attribute.\n`showSpendControls`const issuingCard = stripeConnectInstance.create('issuing-card');\nissuingCard.setShowSpendControls(true);\ndocument.body.appendChild(issuingCard);\n`const issuingCard = stripeConnectInstance.create('issuing-card');\nissuingCard.setShowSpendControls(true);\ndocument.body.appendChild(issuingCard);`To enable editing spend controls in the component, pass spendcontrolmanagement: true as a feature when you create an AccountSession.\n`spendcontrolmanagement: true`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcard][enabled]\"=true \\\n  -d \"components[issuingcard][features][spendcontrolmanagement]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcard][enabled]\"=true \\\n  -d \"components[issuingcard][features][spendcontrolmanagement]\"=true`## Sensitive data display\nIssuing Connect embedded components integrate with Issuing Elements to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\nTo enable this functionality you must:\n# Set up an ephemeral key exchange on your server.\n# Pass an asynchronous callback to the components.\nStripe generates a nonce from the Card ID in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a Show numbers button if the ephemeral key is valid.\n`nonce``Show numbers`### Ephemeral key exchange\nYour server-side endpoint needs to accept a Card ID and a nonce. It can then create an ephemeral key using Stripe.\n`nonce`Here’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n// This example sets up an endpoint using the Express framework.\n// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst stripe = require('stripe')('sktestY17KokhC3SRYCQTLYiU5ZCD2');\napp.post('/ephemeral-keys', async (request, response) => {\n  const { cardid, nonce } = request.body;\n  const ephemeralKey = await stripe.ephemeralKeys.create({\n    nonce: nonce,\n    issuingcard: cardid,\n  }, {\n    apiVersion: '2025-02-24.acacia',\n    stripeAccount: '{{CONNECTEDACCOUNTID}}',\n  });\n  response.json({\n    ephemeralKeySecret: ephemeralKey.secret,\n    nonce: nonce,\n    issuingCard: cardid,\n  });\n});\n`// This example sets up an endpoint using the Express framework.\n// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst stripe = require('stripe')('sktestY17KokhC3SRYCQTLYiU5ZCD2');\napp.post('/ephemeral-keys', async (request, response) => {\n  const { cardid, nonce } = request.body;\n  const ephemeralKey = await stripe.ephemeralKeys.create({\n    nonce: nonce,\n    issuingcard: cardid,\n  }, {\n    apiVersion: '2025-02-24.acacia',\n    stripeAccount: '{{CONNECTEDACCOUNTID}}',\n  });\n  response.json({\n    ephemeralKeySecret: ephemeralKey.secret,\n    nonce: nonce,\n    issuingCard: cardid,\n  });\n});`### Asynchronous callback\nYou must define an asynchronous function that accepts a named argument with property issuingCard which is a Card ID and additionally, a nonce property. This function must return an Object with properties issuingCard, nonce, and ephemeralKeySecret which are retrieved from the endpoint you set up in the previous step.\n`issuingCard``nonce``Object``issuingCard``nonce``ephemeralKeySecret`Here’s how you might implement this callback:\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nconst fetchEphemeralKey = async (fetchParams) =>  {\n  const { issuingCard, nonce } = fetchParams;\n  // This may vary greatly based on your implementation\n  const response = await myServer.getEphemeralKey({issuingCard, nonce})\n  return {\n    issuingCard: response.issuingCard,\n    nonce: response.nonce,\n    ephemeralKeySecret: response.ephemeralKeySecret\n  }\n}\nissuingCard.setFetchEphemeralKey(fetchEphemeralKey);\ndocument.body.appendChild(issuingCard);\n`const issuingCard = stripeConnectInstance.create('issuing-card');\nconst fetchEphemeralKey = async (fetchParams) =>  {\n  const { issuingCard, nonce } = fetchParams;\n  // This may vary greatly based on your implementation\n  const response = await myServer.getEphemeralKey({issuingCard, nonce})\n  return {\n    issuingCard: response.issuingCard,\n    nonce: response.nonce,\n    ephemeralKeySecret: response.ephemeralKeySecret\n  }\n}\nissuingCard.setFetchEphemeralKey(fetchEphemeralKey);\ndocument.body.appendChild(issuingCard);`"}, {"path": "connect\\supported-embedded-components\\issuing-cards-list.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list", "content": "#Issuing cards list | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list\n\n#Issuing cards list\n#Show a table of all issued cards.\nIssuing cards list renders a table view of all the cards issued to your connected accounts.\nThe permission boundary for this component is at the connected account level, not at the individual card level. This UI should be shown to users that have access to all cards, not to users that have restricted access to a single card.\nWhen creating an Account Session, enable the Issuing cards list component by specifying issuingcardslist in the components parameter. You can enable or disable individual features of the Issuing cards list component by specifying the features parameter under issuingcardslist.\n`issuingcardslist``components``features``issuingcardslist`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcardslist][enabled]\"=true \\\n  -d \"components[issuingcardslist][features][cardmanagement]\"=true \\\n  -d \"components[issuingcardslist][features][cardholdermanagement]\"=true \\\n  -d \"components[issuingcardslist][features][cardspenddisputemanagement]\"=true \\\n  -d \"components[issuingcardslist][features][spendcontrolmanagement]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcardslist][enabled]\"=true \\\n  -d \"components[issuingcardslist][features][cardmanagement]\"=true \\\n  -d \"components[issuingcardslist][features][cardholdermanagement]\"=true \\\n  -d \"components[issuingcardslist][features][cardspenddisputemanagement]\"=true \\\n  -d \"components[issuingcardslist][features][spendcontrolmanagement]\"=true`After creating the account session and initializing ConnectJS, you can render the Issuing cards list component in the front end:\n// Include this element in your HTML\nconst issuingCardsList = stripeConnectInstance.create('issuing-cards-list');\nissuingCardsList.setShowSpendControls(true);\ncontainer.appendChild(issuingCardsList);\n`// Include this element in your HTML\nconst issuingCardsList = stripeConnectInstance.create('issuing-cards-list');\nissuingCardsList.setShowSpendControls(true);\ncontainer.appendChild(issuingCardsList);`## Disable Stripe user authentication\nUse the disablestripeuserauthentication feature to control whether the component requires Stripe user authentication. By default, this parameter is false. This value can only be true for accounts where controller.requirementcollection is application.\n`controller.requirementcollection``application`We recommend implementing 2FA or equivalent security measures as a best practice. For account configurations that support this feature, such as Custom accounts, you assume liability for connected accounts if they can’t pay back negative balances.\n#Set spending controls\nYou can use Issuing Connect embedded components to view and, optionally, edit spending controls on your cards by turning on the Issuing component’s showSpendControls attribute.\n`showSpendControls`const issuingCardsList = stripeConnectInstance.create('issuing-cards-list');\nissuingCardsList.setShowSpendControls(true);\ndocument.body.appendChild(issuingCardsList);\n`const issuingCardsList = stripeConnectInstance.create('issuing-cards-list');\nissuingCardsList.setShowSpendControls(true);\ndocument.body.appendChild(issuingCardsList);`To enable editing spend controls in the component, pass spendcontrolmanagement: true as a feature when you create an AccountSession.\n`spendcontrolmanagement: true`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcardslist][enabled]\"=true \\\n  -d \"components[issuingcardslist][features][spendcontrolmanagement]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[issuingcardslist][enabled]\"=true \\\n  -d \"components[issuingcardslist][features][spendcontrolmanagement]\"=true`## Sensitive data display\nIssuing Connect embedded components integrate with Issuing Elements to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\nTo enable this functionality you must:\n# Set up an ephemeral key exchange on your server.\n# Pass an asynchronous callback to the components.\nStripe generates a nonce from the Card ID in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a Show numbers button if the ephemeral key is valid.\n`nonce``Show numbers`### Ephemeral key exchange\nYour server-side endpoint needs to accept a Card ID and a nonce. It can then create an ephemeral key using Stripe.\n`nonce`Here’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n// This example sets up an endpoint using the Express framework.\n// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst stripe = require('stripe')('sktestY17KokhC3SRYCQTLYiU5ZCD2');\napp.post('/ephemeral-keys', async (request, response) => {\n  const { cardid, nonce } = request.body;\n  const ephemeralKey = await stripe.ephemeralKeys.create({\n    nonce: nonce,\n    issuingcard: cardid,\n  }, {\n    apiVersion: '2025-02-24.acacia',\n    stripeAccount: '{{CONNECTEDACCOUNTID}}',\n  });\n  response.json({\n    ephemeralKeySecret: ephemeralKey.secret,\n    nonce: nonce,\n    issuingCard: cardid,\n  });\n});\n`// This example sets up an endpoint using the Express framework.\n// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nconst stripe = require('stripe')('sktestY17KokhC3SRYCQTLYiU5ZCD2');\napp.post('/ephemeral-keys', async (request, response) => {\n  const { cardid, nonce } = request.body;\n  const ephemeralKey = await stripe.ephemeralKeys.create({\n    nonce: nonce,\n    issuingcard: cardid,\n  }, {\n    apiVersion: '2025-02-24.acacia',\n    stripeAccount: '{{CONNECTEDACCOUNTID}}',\n  });\n  response.json({\n    ephemeralKeySecret: ephemeralKey.secret,\n    nonce: nonce,\n    issuingCard: card_id,\n  });\n});`### Asynchronous callback\nYou must define an asynchronous function that accepts a named argument with property issuingCard which is a Card ID and additionally, a nonce property. This function must return an Object with properties issuingCard, nonce, and ephemeralKeySecret which are retrieved from the endpoint you set up in the previous step.\n`issuingCard``nonce``Object``issuingCard``nonce``ephemeralKeySecret`Here’s how you might implement this callback:\nconst issuingCard = stripeConnectInstance.create('issuing-card');\nconst fetchEphemeralKey = async (fetchParams) =>  {\n  const { issuingCard, nonce } = fetchParams;\n  // This may vary greatly based on your implementation\n  const response = await myServer.getEphemeralKey({issuingCard, nonce})\n  return {\n    issuingCard: response.issuingCard,\n    nonce: response.nonce,\n    ephemeralKeySecret: response.ephemeralKeySecret\n  }\n}\nissuingCard.setFetchEphemeralKey(fetchEphemeralKey);\ndocument.body.appendChild(issuingCard);\n`const issuingCard = stripeConnectInstance.create('issuing-card');\nconst fetchEphemeralKey = async (fetchParams) =>  {\n  const { issuingCard, nonce } = fetchParams;\n  // This may vary greatly based on your implementation\n  const response = await myServer.getEphemeralKey({issuingCard, nonce})\n  return {\n    issuingCard: response.issuingCard,\n    nonce: response.nonce,\n    ephemeralKeySecret: response.ephemeralKeySecret\n  }\n}\nissuingCard.setFetchEphemeralKey(fetchEphemeralKey);\ndocument.body.appendChild(issuingCard);`"}, {"path": "connect\\supported-embedded-components\\notification-banner.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/notification-banner", "content": "#Notification banner | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/notification-banner\n\n#Notification banner\n#Show a banner that lists required actions for risk interventions and onboarding requirements.\nRenders a notification banner that lists open tasks that can affect a connected account’s status or capabilities. Tasks can involve risk interventions or outstanding requirements for account capabilities, such as accepting payments and payouts. The banner renders only when the connected account must respond to risk interventions or provide currently due requirements after initial onboarding.\n#Requirements collection options\nYou can control the collection of currentlydue or eventuallydue requirements and the inclusion of future requirements by using the collectionOptions attribute when you integrate the notification banner component.\n`currentlydue``eventuallydue``collectionOptions`## External account collection\nUse the externalaccountcollection feature to control whether the component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When externalaccountcollection is enabled, user authentication is required. You can opt out of Stripe user authentication with the disablestripeuserauthentication parameter.\n`externalaccountcollection`## Disable Stripe user authentication\nUse the disablestripeuserauthentication feature to control whether the component requires Stripe user authentication. The default value is the opposite of the externalaccountcollection value. For example, if you don’t set externalaccountcollection, it defaults to true and disablestripeuserauthentication defaults to false. This value can only be true for accounts where controller.requirementcollection is application.\n`externalaccountcollection``disablestripeuserauthentication``controller.requirementcollection``application`We recommend implementing 2FA or equivalent security measures as a best practice. For account configurations that support this feature, such as Custom accounts, you assume liability for connected accounts if they can’t pay back negative balances.\n#Create an Account Session\nWhen creating an Account Session, enable notification banner by specifying notificationbanner in the components parameter.\n`notificationbanner``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[notificationbanner][enabled]\"=true \\\n  -d \"components[notificationbanner][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[notificationbanner][enabled]\"=true \\\n  -d \"components[notificationbanner][features][externalaccountcollection]\"=true`### Render the notification banner component\n// Include this element in your HTML\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\ncontainer.appendChild(notificationBanner);\n// Optional:\n// notificationBanner.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })\n`// Include this element in your HTML\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\ncontainer.appendChild(notificationBanner);\n// Optional:\n// notificationBanner.setCollectionOptions({\n//   fields: 'eventuallydue',\n//   futureRequirements: 'include',\n// })`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setCollectionOptions | { fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' } | Customizes collecting currentlydue or eventuallydue requirements and controls whether to include future requirements. Specifying eventuallydue collects both eventuallydue and currentlydue requirements. | {fields: 'currentlydue', futureRequirements: 'omit'} |  \n`setCollectionOptions``{ fields: 'currentlydue' | 'eventuallydue', futurerequirements: 'omit' | 'include' }``currentlydue``eventuallydue``eventuallydue``eventuallydue``currentlydue``{fields: 'currentlydue', futureRequirements: 'omit'}`## Configure custom banner behavior\nYou can configure custom behavior, such as different margins, for when the banner includes any notifications or when the notifications require any action. To do so, set a custom callback function using onNotificationsChange.\n`onNotificationsChange`// index.html\n// index.js\nconst handleNotificationsChange = (response) => {\n  const warning = document.getElementById(\"notification-banner-action-warning\");\n  if (response.actionRequired > 0) {\n    // Do something related to required actions, such as adding margins to the banner container or tracking the current number of notifications.\n    warning.style.display = \"block\";\n    warning.textContent =\n      \"You must resolve the notifications on this page before proceeding.\";\n  } else if (response.total > 0) {\n    // Do something related to notifications that don't require action.\n    warning.style.display = \"block\";\n    warning.textContent = \"The items below are in review.\";\n  } else {\n    warning.style.display = \"none\";\n  }\n};\nconst container = document.getElementById('notification-banner-container');\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\nnotificationBanner.setOnNotificationsChange(handleNotificationsChange);\ncontainer.appendChild(notificationBanner);\n`// index.html\n// index.js\nconst handleNotificationsChange = (response) => {\n  const warning = document.getElementById(\"notification-banner-action-warning\");\n  if (response.actionRequired > 0) {\n    // Do something related to required actions, such as adding margins to the banner container or tracking the current number of notifications.\n    warning.style.display = \"block\";\n    warning.textContent =\n      \"You must resolve the notifications on this page before proceeding.\";\n  } else if (response.total > 0) {\n    // Do something related to notifications that don't require action.\n    warning.style.display = \"block\";\n    warning.textContent = \"The items below are in review.\";\n  } else {\n    warning.style.display = \"none\";\n  }\n};\nconst container = document.getElementById('notification-banner-container');\nconst notificationBanner = stripeConnectInstance.create('notification-banner');\nnotificationBanner.setOnNotificationsChange(handleNotificationsChange);\ncontainer.appendChild(notificationBanner);`| Method | Description | Variables |\n --- | --- | --- \n setOnNotificationsChange | Allows users to specify an optional custom behavior in a callback function. | response.total: The total number of notifications in the bannerresponse.actionRequired: The number of notifications that require user action \n`setOnNotificationsChange`- response.total: The total number of notifications in the banner\n• response.actionRequired: The number of notifications that require user action\n`response.total``response.actionRequired`## Testing\nTo test this component in a sandbox, specify different test inputs for fields that fail verifications or generate requirements on the account. For example, you can use the account management component to enter addressnomatch in line1 of an individual’s address to trigger an address mismatch. In production, it can be difficult to verify that this component is working as expected because it’s hidden when an account has no banner items. To validate your integration is working, you can:\n`addressnomatch``line1`- Set a callback using onNotificationsChange that verifies response.total is zero\n• Confirm the component is being displayed with no content using a loader start handler\n`onNotificationsChange``response.total`## Account onboarding\nUse the notification banner after the account goes through account onboarding and has detailssubmitted. The banner won’t render any UI if the account is missing detailssubmitted.\n`details_submitted`"}, {"path": "connect\\supported-embedded-components\\payment-details.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/payment-details", "content": "#Payment details | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/payment-details\n\n#Payment details\n#Show details of a given payment and allow users to manage disputes and perform refunds.\nThis component is a subset of payments, which provides the detail overlay of a given payment. The UI rendered by the payment details component is equivalent to the overlay that the payments component renders when the user clicks on a payment row.\n`payments``payments`Use the payment-details component to invoke the payment details overlay without the need to inline the entirety of the payments list in your website. This allows you to invoke the payment detail overlay from your existing UI (for example, your payments list) and integrate with our detail view to enable your customers to view payment details, issue refunds, and manage disputed payments.\n`payment-details``payments`By default, the embedded components offer limited information for destination charges and separate charges and transfers. They don’t provide access to customer information, payment methods, and some charge amount details. The destinationonbehalfofchargemanagement feature allows a connected account to see additional information with destination charges, as well as perform refunds and manage disputes.\nWhen creating an Account Session, enable payment details by specifying paymentdetails in the components parameter. You can turn on or off an individual feature of the payment details component by specifying the features parameter under paymentdetails:\n`paymentdetails``components``features``paymentdetails`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[paymentdetails][enabled]\"=true \\\n  -d \"components[paymentdetails][features][refundmanagement]\"=true \\\n  -d \"components[paymentdetails][features][disputemanagement]\"=true \\\n  -d \"components[paymentdetails][features][capturepayments]\"=true \\\n  -d \"components[paymentdetails][features][destinationonbehalfofchargemanagement]\"=false\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[paymentdetails][enabled]\"=true \\\n  -d \"components[paymentdetails][features][refundmanagement]\"=true \\\n  -d \"components[paymentdetails][features][disputemanagement]\"=true \\\n  -d \"components[paymentdetails][features][capturepayments]\"=true \\\n  -d \"components[paymentdetails][features][destinationonbehalfofchargemanagement]\"=false`After creating the account session and initializing ConnectJS, you can render the payment details component in the frontend:\n// Include this element in your HTML\nconst paymentDetails = stripeConnectInstance.create('payment-details');\npaymentDetails.setPayment('{{PAYMENTINTENTORCHARGEID}}');\n// use setOnClose to set a callback function to close payment-details\npaymentDetails.setOnClose(() => {\n  paymentDetails.remove();\n});\ncontainer.appendChild(paymentDetails);\n`// Include this element in your HTML\nconst paymentDetails = stripeConnectInstance.create('payment-details');\npaymentDetails.setPayment('{{PAYMENTINTENTORCHARGEID}}');\n// use setOnClose to set a callback function to close payment-details\npaymentDetails.setOnClose(() => {\n  paymentDetails.remove();\n});\ncontainer.appendChild(paymentDetails);`#### Note\nFor destination charges and separate charges and transfers, the PaymentIntent doesn’t exist on the connected account. Instead, pass the associated charge ID that belongs to the connected account.\nThe payment details component shows different information and supports different features for different charge types:\n• For direct charges, your connected accounts can view the complete set of information. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n• For destination charges and separate charges and transfers, your connected accounts can only see the transfer object associated with the selected charge, which contains limited information.\n• For destination charges with the onbehalfof attribute, your connected accounts can view the complete set of information when the destinationonbehalfofchargemanagement feature is enabled. When this feature is turned on, you can also enable refund and disputes management by enabling the corresponding features.\n`destinationonbehalfofchargemanagement`### Allow your connected accounts to manage destination charges\nWhen you set the destinationonbehalfofchargemanagement feature to true, your connected accounts can use the payments component to view and manage destination charges that have the onbehalfof attribute. If you also turn on the disputemanagement feature, your connected accounts can participate directly in handling their disputes.\n`destinationonbehalfofchargemanagement``true``disputemanagement`Enabling the destinationonbehalfofchargemanagement feature has the following limitations:\n`destinationonbehalfofchargemanagement`1. You can’t filter by charge status or payment methods.\n# You can’t export certain data columns.\n#Dispute management for destination charges\nFor destination charges, with or without onbehalfof, Stripe debits dispute amounts and fees from your platform account.\n`onbehalfof`We recommend setting up a webhook to listen to dispute created events. When that happens, you can attempt to recover funds from the connected account by reversing the transfer through the Dashboard or by creating a transfer reversal.\nIf the connected account has a negative balance, Stripe attempts to debit its external account if debitnegativebalances is set to true.\n`debitnegativebalances``true`If you challenge the dispute and win, you can transfer the funds that you previously reversed back to the connected account. If your platform has an insufficient balance, the transfer fails. Prevent insufficient balance errors by adding funds to your Stripe balance.\n#Common mistake\nRetransferring a previous reversal is subject to cross-border transfer restrictions, meaning you might have no means to repay your connected account. Instead, wait to recover disputed cross-border payment transfers for destination charges with onbehalfof until after a dispute is lost.\n`onbehalfof`When both disputemanagement and destinationonbehalfofchargemanagement are enabled, the connected accounts can update and modify dispute evidence, counter disputes, and accept disputes for destination charges with the onbehalfof attribute set to the connected account.\n`disputemanagement``destinationonbehalfofchargemanagement``onbehalf_of`## Supported parameters\nThis embedded component supports the following parameters:\n Method | Type | Description |  \n --- | --- | --- | --- \n setPayment | string | The ID of the payment, charge, or PaymentIntent that displays in the overlay. This should be an ID of the payment, charge, or PaymentIntent on the connected account. If this attribute isn’t defined, the embedded component renders nothing. To obtain this ID, query the charges API or use a payment ID that you’ve created or stored in your integration. | required \n setOnClose | () => void | We send this event when the user closes the overlay. |  \n`setPayment``string``setOnClose``() => void`To enable the dismiss behavior of this component, listen to the close event by calling setOnClose.\n`close``setOnClose`"}, {"path": "connect\\supported-embedded-components\\payment-method-settings.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings", "content": "#Payment method settings | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings\n\n#Payment method settingsPrivate preview\n#Display a configurable list of payment methods that connected accounts can offer during checkout.\nRender a connected account’s Payment Method Configuration to enable customization of payment methods displayed at checkout. Connected accounts can customize their checkout payment methods and provide the necessary compliance details for their usage.\n#Private preview\nThis Connect embedded component is in private preview. Request access below.\n#Note\nWe support the following payment methods in the embedded component:\nAffirm, Afterpay Clearpay, Amazon Pay, Apple Pay, Bancontact, BLIK, Cards, EPS, Google Pay, iDEAL, Klarna, Link, P24, Sofort, and Zip.\nThe embedded payment method settings uses the Payment Method Configurations and Account Capabilities APIs to display a list of customizable payment methods to your connected accounts. If a connected account requires additional compliance data prior to requesting the payment method capability, the component indicates this and collects the necessary information in advance.\n#Requirements\nYour integration must use dynamic payment methods to automatically apply the connected account’s preferences during checkout. In prebuilt payment UIs such as Payment Element and Checkout, Stripe handles the logic for displaying eligible payment methods for each transaction.\nInstall a beta version of the Stripe SDKs to create account sessions for private preview components:\n• Ruby >=13.4.0-beta.4\n• Python >=11.5.0b3\n• PHP >=16.5.0-beta.3\n• Node >=17.6.0-beta.3\n• .NET >=47.3.0-beta.3\n• Java >=28.3.0-beta.3\n• Go >=81.3.0-beta.3\n`>=13.4.0-beta.4``>=11.5.0b3``>=16.5.0-beta.3``>=17.6.0-beta.3``>=47.3.0-beta.3``>=28.3.0-beta.3``>=81.3.0-beta.3`Use the beta version of the Stripe’s client-side libraries to render private preview components:\nInstall the library:\n`npm install --save @stripe/connect-js@preview`If you’re using React in your application:\n`npm install --save @stripe/react-connect-js@preview`## Integrate the component\nWhen creating an Account Session, enable payment method settings by specifying paymentmethodsettings in the components parameter.\n`paymentmethodsettings``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[paymentmethodsettings][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Version: 2025-02-24.acacia; embeddedconnectbeta=v2;\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[paymentmethodsettings][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the payment method settings component in the frontend:\n// Include this element in your HTML\nconst paymentMethodSettings = stripeConnectInstance.create('payment-method-settings');\ncontainer.appendChild(paymentMethodSettings);\n`// Include this element in your HTML\nconst paymentMethodSettings = stripeConnectInstance.create('payment-method-settings');\ncontainer.appendChild(paymentMethodSettings);`### Platform-level controls\nThe embedded payment method settings component respects the platform-level defaults that you configure in the Dashboard or the Payment Method Configurations API.\nFor payment methods that you configure as On by default or Off by default, the connected account can override that preference in the component. If you have set a payment method to Blocked, it’s completely hidden in the component.\n#Multiple payment method configurations\nWith default settings, the embedded payment method settings component shows the connected account’s default payment method configuration. During the preview, the component supports multiple configurations with the payment-method-configuration attribute.\n`payment-method-configuration`### Supported parameters\nThis embedded component supports the following parameters:\n Method | Type | Description |  \n --- | --- | --- | --- \n setPaymentMethodConfiguration | string | Set the payment method configuration ID to appear in the component. You can pass any payment method configuration that the connected account owns. If you don’t set this parameter, the embedded component shows the connected account’s default payment method configuration that inherits from your platform’s settings. For more information, see Payment method configurations or List payment method configurations. | optional |  \n`setPaymentMethodConfiguration``string`## Request early access  Private preview\nSign in to request access to this Connect embedded component in preview.\nIf you don’t have a Stripe account, you can register here.\n#See also\n• Connect integration guide\n• Upgrading to dynamic payment methods\n• Payment Method Configurations API\n• Account Capabilities API"}, {"path": "connect\\supported-embedded-components\\payments.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/payments", "content": "#Payments | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/payments\n\n#Payments\n#Show a list of payments with export, refund, and dispute capabilities.\nPayments renders a transaction list for direct charges, destination charges, and separate charges and transfers on the connected account.\nBy default, the embedded components offer limited information for destination charges and separate charges and transfers. They don’t provide access to customer information, payment methods, and some charge amount details. The destinationonbehalfofchargemanagement feature allows a connected account to see additional information with destination charges, as well as perform refunds and manage disputes.\n#Create an Account Session\nWhen creating an Account Session, enable the payments embedded component by specifying payments in the components parameter. You can turn on or off an individual feature of the payments component by specifying the features parameter under payments:\n`payments``components``features``payments`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payments][enabled]\"=true \\\n  -d \"components[payments][features][refundmanagement]\"=true \\\n  -d \"components[payments][features][disputemanagement]\"=true \\\n  -d \"components[payments][features][capturepayments]\"=true \\\n  -d \"components[payments][features][destinationonbehalfofchargemanagement]\"=false\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payments][enabled]\"=true \\\n  -d \"components[payments][features][refundmanagement]\"=true \\\n  -d \"components[payments][features][disputemanagement]\"=true \\\n  -d \"components[payments][features][capturepayments]\"=true \\\n  -d \"components[payments][features][destinationonbehalfofchargemanagement]\"=false`The payments component shows different information and supports different features for different charge types:\n• For direct charges, your connected accounts can view the complete set of information. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n• For destination charges and separate charges and transfers, your connected accounts can only see the transfer object associated with the selected charge, which contains limited information.\n• For destination charges with the onbehalfof attribute, your connected accounts can view the complete set of information when the destinationonbehalfofchargemanagement feature is enabled. When this feature is turned on, you can also enable refund and disputes management by enabling the corresponding features.\n`destinationonbehalfofchargemanagement`### Allow your connected accounts to manage destination charges\nWhen you set the destinationonbehalfofchargemanagement feature to true, your connected accounts can use the payments component to view and manage destination charges that have the onbehalfof attribute. If you also turn on the disputemanagement feature, your connected accounts can participate directly in handling their disputes.\n`destinationonbehalfofchargemanagement``true``disputemanagement`Enabling the destinationonbehalfofchargemanagement feature has the following limitations:\n`destinationonbehalfofchargemanagement`1. You can’t filter by charge status or payment methods.\n# You can’t export certain data columns.\n#Render the payments component\nAfter creating the account session and initializing ConnectJS, you can render the payments component in the front end:\n// Include this element in your HTML\nconst payments = stripeConnectInstance.create('payments');\ncontainer.appendChild(payments);\n// Optional: specify filters to apply on load\n// payments.setDefaultFilters({\n//   amount: {greaterThan: 100},\n//   date: {before: new Date(2024, 0, 1)},\n//   status: ['partiallyrefunded', 'refundpending', 'refunded'],\n//   paymentMethod: 'card',});\n`// Include this element in your HTML\nconst payments = stripeConnectInstance.create('payments');\ncontainer.appendChild(payments);\n// Optional: specify filters to apply on load\n// payments.setDefaultFilters({\n//   amount: {greaterThan: 100},\n//   date: {before: new Date(2024, 0, 1)},\n//   status: ['partiallyrefunded', 'refundpending', 'refunded'],\n//   paymentMethod: 'card',});`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setDefaultFilters | PaymentsListDefaultFilters | On load, show the payments matching the filter criteria. See the possible PaymentsListDefaultFilters properties. | none \n`setDefaultFilters``PaymentsListDefaultFilters`#### Setting default filters\nSetting default filters for the payments list is optional. If set, it applies any valid filters and ignores invalid filters. If the destinationonbehalfofchargemanagement feature is enabled, then you can’t filter by status or payment method so it ignores these filters automatically.\n`destinationonbehalfofchargemanagement`You can specify any combination of payment filters of your choice using the PaymentsListDefaultFilters object.\n`PaymentsListDefaultFilters`#### The PaymentsListDefaultFilters object\n`PaymentsListDefaultFilters`If you want to specify default filters, pass a PaymentsListDefaultFilters object into the setDefaultFilters setter. The object has the following properties. All properties are optional.\n`PaymentsListDefaultFilters``setDefaultFilters`| Name | Type | Description | Example value |\n --- | --- | --- | --- \n amount | {equals: number} | {greaterThan: number} | {lessThan: number} | {between: {lowerBound: number, upperBound: number}} | Filter by the payment amount (to the nearest hundredth). | {greaterThan: 100} \n date | {before: Date} | {after: Date} | {between: {start: Date; end: Date} | Provide Date objects to filter by date. It accepts any date format allowed by a JavaScript Date object. Only the year, month, and day are taken into consideration. | {before: new Date(2024, 0, 1)} \n status | Status[] | Provide one or more statuses. The valid status options are:'blocked' | 'canceled' | 'disputed' | 'earlyfraudwarning' | 'failed' | 'incomplete' | 'partiallyrefunded' | 'pending' | 'refundpending' | 'refunded' | 'successful' | 'uncaptured'This filter is ignored if the destinationonbehalfofchargemanagement feature is enabled. | ['disputed', 'canceled'] \n paymentMethod | PaymentMethod | The full list of payment methods is available under the type enum for the PaymentMethod object. To see which payment methods are available to you, check your payment method settings.This filter is ignored if the destinationonbehalfofchargemanagement feature is enabled. | 'card' \n`amount``{equals: number} | {greaterThan: number} | {lessThan: number} | {between: {lowerBound: number, upperBound: number}}``{greaterThan: 100}``date``{before: Date} | {after: Date} | {between: {start: Date; end: Date}``Date``Date``{before: new Date(2024, 0, 1)}`status\n`status`Status[]\n`Status[]`Provide one or more statuses. The valid status options are:\n'blocked' | 'canceled' | 'disputed' | 'earlyfraudwarning' | 'failed' | 'incomplete' | 'partiallyrefunded' | 'pending' | 'refundpending' | 'refunded' | 'successful' | 'uncaptured'\n`'blocked' | 'canceled' | 'disputed' | 'earlyfraudwarning' | 'failed' | 'incomplete' | 'partiallyrefunded' | 'pending' | 'refundpending' | 'refunded' | 'successful' | 'uncaptured'`This filter is ignored if the destinationonbehalfofchargemanagement feature is enabled.\n`destinationonbehalfofchargemanagement`['disputed', 'canceled']\n`['disputed', 'canceled']`paymentMethod\n`paymentMethod`PaymentMethod\n`PaymentMethod`The full list of payment methods is available under the type enum for the PaymentMethod object. To see which payment methods are available to you, check your payment method settings.\nThis filter is ignored if the destinationonbehalfofchargemanagement feature is enabled.\n`destinationonbehalfofchargemanagement`'card'\n`'card'`## Dispute management for destination charges\nFor destination charges, with or without onbehalfof, Stripe debits dispute amounts and fees from your platform account.\n`onbehalfof`We recommend setting up a webhook to listen to dispute created events. When that happens, you can attempt to recover funds from the connected account by reversing the transfer through the Dashboard or by creating a transfer reversal.\nIf the connected account has a negative balance, Stripe attempts to debit its external account if debitnegativebalances is set to true.\n`debitnegativebalances``true`If you challenge the dispute and win, you can transfer the funds that you previously reversed back to the connected account. If your platform has an insufficient balance, the transfer fails. Prevent insufficient balance errors by adding funds to your Stripe balance.\n#Common mistake\nRetransferring a previous reversal is subject to cross-border transfer restrictions, meaning you might have no means to repay your connected account. Instead, wait to recover disputed cross-border payment transfers for destination charges with onbehalfof until after a dispute is lost.\n`onbehalfof`When both disputemanagement and destinationonbehalfofchargemanagement are enabled, the connected accounts can update and modify dispute evidence, counter disputes, and accept disputes for destination charges with the onbehalfof attribute set to the connected account.\n`disputemanagement``destinationonbehalfofchargemanagement``onbehalfof`## Customize the description\nIf you’re using the destinationonbehalfofchargemanagement option, the payment information (including the description) shown for destination charges with the onbehalfof attribute corresponds to the original created payment. To display a custom description within the payment detail view for destination charges and separate charges and transfers when this feature is off, follow these steps:\n`onbehalfof`### Destination charges\nTo update the description on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to all platforms that use destination charges.\n# Find the existing transfer object you created for an account by finding the latest charge created on the PaymentIntent.\n# Use the charge object to find the transfer object associated with the charge.\n# Use the transfer object to find the destinationpayment ID that exists on the transfer.\n# Call the Update Charge API to update the description on the destination payment using the destinationpayment ID.\n`destinationpayment`#### Note\nThe destinationpayment object belongs to the connected account, so you’ll need to set the Stripe-Account header to the connected account’s ID to make this call.\ncurl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"\n`curl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"`This description becomes visible on the charge after you’ve written this field.\nLearn more about creating destination charges on your platform.\n#Separate charges and transfers\nTo update the description on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to platforms that use separate charges and transfers.\n# Use the transfer object to find the destinationpayment ID that exists on the transfer.\n# Call the Update Charge API to update the description on the destination payment using the destinationpayment ID found in the previous step.\n`destinationpayment`#### Note\nThe destinationpayment object belongs to the connected account, so you’ll need to set the Stripe-Account header to the connected account’s ID to make this call.\ncurl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"\n`curl https://api.stripe.com/v1/charges/{{PAYMENTID}} \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -H \"Stripe-Account: {{CONNECTEDACCOUNTID}}\" \\\n  -d description=\"My custom description\"`This description becomes visible on the charge after you’ve written this field.\nLearn more about creating separate charges and transfers."}, {"path": "connect\\supported-embedded-components\\payouts-list.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/payouts-list", "content": "#Payouts list | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/payouts-list\n\n#Payouts list\n#Show a filterable list of payouts.\nPayouts list renders a list of payouts for the connected account.\n#Note\nThis component is part of the payouts component.\nWhen creating an Account Session, enable payouts list by specifying payoutslist in the components parameter.\n`payoutslist``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payoutslist][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payoutslist][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the payouts list component in the front end:\n// Include this element in your HTML\nconst payoutsList = stripeConnectInstance.create('payouts-list');\ncontainer.appendChild(payoutsList);\n`// Include this element in your HTML\nconst payoutsList = stripeConnectInstance.create('payouts-list');\ncontainer.appendChild(payoutsList);`"}, {"path": "connect\\supported-embedded-components\\payouts.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/payouts", "content": "#Payouts | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/payouts\n\n#Payouts\n#Show payout information and allow your users to perform payouts.\nPayouts renders the balance summary, the payout schedule, and a list of payouts for the connected account. It can also allow the user to perform instant or manual payouts.\nWhen creating an Account Session, enable the payouts embedded component by specifying payouts in the components parameter. You can enable or disable individual features of the payouts component by specifying the features parameter under payouts:\n`payouts``components``features``payouts`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payouts][enabled]\"=true \\\n  -d \"components[payouts][features][instantpayouts]\"=true \\\n  -d \"components[payouts][features][standardpayouts]\"=true \\\n  -d \"components[payouts][features][editpayoutschedule]\"=true \\\n  -d \"components[payouts][features][externalaccountcollection]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[payouts][enabled]\"=true \\\n  -d \"components[payouts][features][instantpayouts]\"=true \\\n  -d \"components[payouts][features][standardpayouts]\"=true \\\n  -d \"components[payouts][features][editpayoutschedule]\"=true \\\n  -d \"components[payouts][features][externalaccountcollection]\"=true`After creating the account session and initializing ConnectJS, you can render the payouts component in the front end:\n// Include this element in your HTML\nconst payouts = stripeConnectInstance.create('payouts');\ncontainer.appendChild(payouts);\n`// Include this element in your HTML\nconst payouts = stripeConnectInstance.create('payouts');\ncontainer.appendChild(payouts);`Enabling Instant Payouts might require additional steps:\n• If your platform collects fees for a connected account, you must set up Instant Payout monetization in the Dashboard.\n• If your platform is liable for a connected account’s negative balances, your platform must be in a supported country and the account must be in the same country as the platform and must be in the local currency.\n• If Stripe is liable for a connected account’s negative balances, Stripe controls eligibility for the account.\n#Note\nTo use standard manual payouts, the connected account needs to have their payout schedule set to manual. You can enable payout schedule editing in the payouts component by setting the editpayoutschedule feature to true.\n`manual``editpayoutschedule``true`"}, {"path": "connect\\supported-embedded-components\\reporting-chart.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/reporting-chart", "content": "#Reporting chart | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/reporting-chart\n\n#Reporting chartPrivate preview\n#Show charts to your connected accounts.\nReporting chart renders a UI component for connected accounts to view charts similar to those on the Stripe Dashboard, such as the Net Volume and Gross Volume charts.\n#Create an Account Session\nWhen creating an Account Session, enable Reporting chart by specifying reportingchart in the components parameter.\n`reportingchart``components`#### Note\nThe Reporting chart component is in private preview, so the Stripe SDKs don’t include it yet. To enable it when creating an account session, use this code snippet with the Stripe beta SDK:\nStripe.apikey = '{{skINSERTYOURSECRETKEY}}'\nStripe.apiversion = '2023-10-16; embeddedconnectbeta=v2;'\naccountsession = Stripe::AccountSession.create({\n  account: '{{CONNECTEDACCOUNTID}}',\n  components: {\n    reportingchart: {enabled: true}\n  }\n})\n`Stripe.apikey = '{{skINSERTYOURSECRETKEY}}'\nStripe.apiversion = '2023-10-16; embeddedconnectbeta=v2;'\naccountsession = Stripe::AccountSession.create({\n  account: '{{CONNECTEDACCOUNTID}}',\n  components: {\n    reportingchart: {enabled: true}\n  }\n})`After creating the account session and initializing ConnectJS, you can render the Reporting chart component in the frontend:\n#Render the component\n// Include this element in your HTML\nconst container = document.getElementById(\"container\");\nconst reportingChart = stripeConnectInstance.create(\"reporting-chart\");\nreportingChart.setReportName(\"netvolume\");\nreportingChart.setIntervalStart(new Date(2023, 11, 17));\nreportingChart.setIntervalEnd(new Date(2024, 08, 18));\nreportingChart.setIntervalType(\"day\");\ncontainer.appendChild(reportingChart);\n`// Include this element in your HTML\nconst container = document.getElementById(\"container\");\nconst reportingChart = stripeConnectInstance.create(\"reporting-chart\");\nreportingChart.setReportName(\"netvolume\");\nreportingChart.setIntervalStart(new Date(2023, 11, 17));\nreportingChart.setIntervalEnd(new Date(2024, 08, 18));\nreportingChart.setIntervalType(\"day\");\ncontainer.appendChild(reportingChart);`| Method | Type | Description | Default | Required or Optional |\n --- | --- | --- | --- | --- \n setReportName | 'netvolume' |  'grossvolume' | The name of the report to render as a chart. |  | required \n setIntervalStart | Date | The start time to query data. Returned data might start later than this timestamp if data is sparse. | The time of the connected account’s first data point for the report specified. | optional \n setIntervalEnd | Date | The end time to query data. Returned data might end earlier than this timestamp if data is sparse. | The time of the connected account’s last data point for the report specified. | optional \n setIntervalType | 'day' | 'month' | 'quarter' | 'year' | Used to determine granularity of the data. | Based on the duration between intervalStart and intervalEnd. A longer time frame defaults to showing less granular data. | optional \n`setReportName``'netvolume' |  'grossvolume'``setIntervalStart``Date``setIntervalEnd``Date``setIntervalType``'day' | 'month' | 'quarter' | 'year'``intervalStart``intervalEnd`## Request access  Private preview\nSign in to request access to this Connect embedded component in private preview.\nIf you don’t have a Stripe account, you can register here."}, {"path": "connect\\supported-embedded-components\\tax-registrations.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/tax-registrations", "content": "#Tax registrations | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/tax-registrations\n\n#Tax registrations\n#Learn how to allow connected accounts to manage their tax registrations for Stripe Tax.\nThe Tax registrations component gives your connected accounts control over their tax compliance. Your connected accounts interact with this component by managing their tax registrations directly in your platform. This component is suitable for software platforms, which means that your connected accounts are liable to collect taxes.\nIf you’re a platform integrating Stripe Tax, you must collect information about the registrations with tax authorities of your connected accounts in the applicable jurisdictions. Your connected accounts need to register with their tax authorities before they add their tax registrations in your platform. To correctly calculate and collect taxes for your platform, you must collect the tax registrations of your connected accounts.\nThe Tax registrations component uses the Tax Registrations API to display a list of tax registrations to your connected accounts. To calculate tax on their payments in a location, connected accounts need to add their tax registration with the Tax registrations component. If the connected account wish to stop calculating tax in a certain location, they can end the tax registration in the component.\n#Requirements\n• Your integration must follow the software platforms guide for Tax on Connect. This means that your connected accounts are liable to collect taxes.\n• If you haven’t already, render the Tax settings component. You need both the Tax settings component and the Tax registrations component to provide tax compliance control to your connected accounts.\n#Integrate the tax registrations component\nWhen creating an Account Session, enable tax registrations by specifying taxregistrations in the components parameter.\n`taxregistrations``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[taxregistrations][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[taxregistrations][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the tax registrations component in the frontend:\n// Include this React component\nimport {\n  ConnectTaxRegistrations,\n  ConnectComponentsProvider,\n} from \"@stripe/react-connect-js\";\nreturn (\n  \n    \n      Tax Registrations\n       console.log({registrationId})}\n       />\n    \n  \n);\n`// Include this React component\nimport {\n  ConnectTaxRegistrations,\n  ConnectComponentsProvider,\n} from \"@stripe/react-connect-js\";\nreturn (\n  \n    \n      Tax Registrations\n       console.log({registrationId})}\n       />\n    \n  \n);`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setDisplayCountries | string[] | Array of two-letter country codes that the connected account can choose from for a new tax registration. | undefined (all countries permitted) \n setOnAfterTaxRegistrationAdded | ({id: string}) => void | Callback executed with an object containing the newly added tax registration ID | undefined (not a required method) \n`setDisplayCountries``string[]``setOnAfterTaxRegistrationAdded``({id: string}) => void`## Limitations\nThe following features are available in the Dashboard and the API, but aren’t currently supported by the Tax registrations component:\n• Scheduling start or end dates for registrations. You can only create or end registrations immediately.\n• Specifying US state sales tax elections when creating tax registrations.\n#See also\n• Tax on Connect\n• Tax for software platforms\n• Tax settings component"}, {"path": "connect\\supported-embedded-components\\tax-settings.md", "url": "https://docs.stripe.com/connect/supported-embedded-components/tax-settings", "content": "#Tax settings | Stripe Documentation\nURL: https://docs.stripe.com/connect/supported-embedded-components/tax-settings\n\n#Tax settings\n#Learn how to allow connected accounts to set up Stripe Tax.\nThe Tax settings component allows your connected accounts to set up Stripe Tax in your platform. Connected accounts can change their head office address and preset tax code with this component. This component is suitable for software platforms, which means that your connected accounts are liable to collect taxes.\nTo calculate taxes on payments of your connected accounts you have to collect four data points of information:\n• The head office address\n• The type of product the connected account sells\n• The address of the customer\n• The registrations of the connected account with the tax authorities\nThe tax settings component helps you to collect the first two pieces of information of your connected accounts with minimal integration effort.\nThe embedded tax settings component uses the Tax Settings API to display the head office address and preset tax code to your connected accounts.\n#Requirements\n• Your integration must follow the software platforms guide for Tax on Connect. This means that your connected accounts are liable to collect taxes.\n• After integrating the Tax settings component, render the Tax registrations component to collect tax registration information of your connected accounts. This is a requirement for Tax to calculate tax in a specific location.\n#Integrate the tax settings component\nWhen creating an Account Session, enable tax settings by specifying taxsettings in the components parameter.\n`taxsettings``components`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[taxsettings][enabled]\"=true\n`curl https://api.stripe.com/v1/accountsessions \\\n  -u \"sktestY17KokhC3SRYCQTLYiU5ZCD2:\" \\\n  -d account={{CONNECTEDACCOUNTID}} \\\n  -d \"components[taxsettings][enabled]\"=true`After creating the account session and initializing ConnectJS, you can render the tax settings component in the frontend:\n// Include this React component\nimport {\n  ConnectTaxSettings,\n  ConnectComponentsProvider,\n} from \"@stripe/react-connect-js\";\nreturn (\n  \n    \n      Tax Settings\n       console.log({settingsId})}\n        // hideProductTaxCodeSelector\n       />\n    \n  \n);\n`// Include this React component\nimport {\n  ConnectTaxSettings,\n  ConnectComponentsProvider,\n} from \"@stripe/react-connect-js\";\nreturn (\n  \n    \n      Tax Settings\n       console.log({settingsId})}\n        // hideProductTaxCodeSelector\n       />\n    \n  \n);`| Method | Type | Description | Default |\n --- | --- | --- | --- \n setDisplayHeadOfficeCountries | string[] | Array of two-letter country codes that the connected account can choose from for their head office. | undefined (all countries permitted) \n setOnTaxSettingsUpdated | ({id: string}) => void | Callback executed with an object containing the newly updated tax settings ID | undefined (not a required method) \n setHideProductTaxCodeSelector | Boolean | Set to true to hide the tab where users select a default Product Tax Code | false (users can by default set a default PTC) \n`setDisplayHeadOfficeCountries``string[]``setOnTaxSettingsUpdated``({id: string}) => void``setHideProductTaxCodeSelector`To give your connected accounts full control over their tax compliance, you need to integrate the tax registrations component as well. Please follow the guide for tax compliance for software platforms. The guide also covers how to calculate and collect the taxes and help your connected accounts to report their taxes.\n#See also\n• Tax on Connect\n• Tax for software platforms\n• Tax registrations component"}, {"path": "connect\\tax\\whats-new-2023.md", "url": "https://docs.stripe.com/connect/tax/whats-new-2023", "content": "#What's new for tax year 2023 | Stripe Documentation\nURL: https://docs.stripe.com/connect/tax/whats-new-2023\n\n#What's new for tax year 2023\n#Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe.\nFor tax year 2023, Stripe is introducing features that help Connect platforms efficiently and accurately meet their 1099 tax reporting obligations for Custom and Express US-based accounts. The 2023 tax year features help platforms comply with their 1099 tax reporting obligations at scale.\n#Note\nStripe delivers 1099 forms to Standard accounts through the Stripe Dashboard.\n#Early access to editable tax forms\nStarting in August, you can access preliminary 2023 tax forms and associated tax reporting features directly from your Stripe Connect Dashboard. Your team needs either Administrator or Tax analyst user permissions to get started.\nAlong with early access to tax forms, you can start editing tax forms right away, as opposed to waiting to make edits in January. You can do so for individual tax forms or in bulk by importing a CSV file.\n#Improved state ID collection\nIn our platform onboarding flow for tax year 2023, we clarified the strict ID requirements for filing in two states: Delaware and Pennsylvania. If you intend to file in either of these states, include your state IDs during this step to prevent possible rejection of your filings.\n#Create and update tax forms\nStripe provides several features to help you create and update tax forms.\n#Deltas\nImporting tax forms using Delta allows you to add to (or subtract from) the values on the initial tax form totals from Stripe. This lets you report just the totals of transactions that happened outside of Stripe. You don’t need to sum the values from Stripe with external values—instead, you only need to provide the delta amounts and Stripe does the rest. This is particularly useful if you have multiple payout mechanisms or reimbursements on Stripe connected accounts for activity that happened outside of Stripe.\n#Zero dollar tax forms\nPlatforms can generate tax forms for a Stripe account ID, even when it hasn’t received any payouts in 2023. If your connected account doesn’t already have a tax form, performing Update imports (to override form values supplied by Stripe) or Delta imports (to make incremental changes to form values supplied by Stripe) automatically creates the form.\n#Standalone tax forms\nYou can create standalone tax forms for accounts that might not be a connected account (for example, accounts from a different provider). You can create them seamlessly by using a Create import with a CSV file containing the data of the form you want to generate. You must include all columns except for formid and stripeaccountid. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery).\n`formid``stripeaccountid`### Increased CSV import and export speed\nIf you’re using CSV imports to create or modify tax forms, we’ve increased the speed of CSV imports and exports by up to 10 times the speed of previous years.\n#Improved splitting and grouping of forms\nYou can use pre-filing splits and improved TIN aggregation to reduce the amount of overhead for filing taxes.\n#Pre-filing splits\nYou can now split tax forms to handle account ownership changes before filing the forms. Splitting a 1099 tax form means that you distribute the amount initially reported on a single 1099 form across two 1099 forms. Previously, you could only split tax forms post-filing, meaning you might have needed to file the wrong tax forms and then correct them. Now, after January 1, you can do so before filing from the 1099 Dashboard.\n#Improved TIN aggregation of tax forms\nForms that share the same TIN get their totals aggregated to determine filing eligibility at all times, even when the platform updates the tax form totals or identity data. When there are multiple forms with the same TIN, we aggregate the totals from each form with a maximum of 100 other forms. However, if forms of different types share the same TIN, we might not aggregate them. In these cases, check your filing eligibility and apply an override if necessary. To simplify finding other forms grouped with a particular form, use the Forms grouped with filter.\n#Form Delivery Improvements\nYou can use the Dashboard to track delivery status and Stripe outreach emails, and to address missing emails.\n#Delivery status visibility\nYou can now view both postal delivery and e-delivery statuses directly in the 1099 Dashboard. You can also filter for both statuses. Previously, we only showed a combined delivery status, which reported the best result between the e-delivery and postal delivery status. With the combined status, if one of the forms was successfully delivered (but not the other) it showed a status of delivered.  In other words, if e-delivery was successful and postal delivery was unsuccessful, the combined status was delivered. Going forward, you can track the individual status for each of the forms you deliver.\n`delivered``delivered`### Tracking Stripe outreach\nIf your platform opts for e-delivery through Stripe Express and enables the collection of tax information in advance using 1099 tax form settings, Stripe sends emails to the connected accounts on behalf of platforms. We do this to confirm their tax information and provide e-delivery consent through Stripe Express. You can now track the status of that outreach directly in the 1099 Dashboard, and use the Pre-filing confirmation status filter. The status is either ineligible, queued, sent, or not sent.\n`Pre-filing confirmation status``ineligible``queued``sent``not sent`### Addressing missing emails\nFor e-delivery with Stripe Express, the connected account owner must be able to receive the email from Stripe inviting them to create their account. Stripe can’t electronically deliver the forms without the email address for the account. If you’ve opted in to paper delivery, we send paper forms (assuming we have a valid delivery address). You can now filter for any accounts with missing emails and add them to allow e-delivery.  Any emails added by the following methods will result in updating the email on the connected account, which will carry over each year.\n• Use the Update API.\n• Use the CSV import functionality on the Emails page in the Dashboard. New\n• Edit the email addresses in the Payee Details section in the 1099 dashboard. New\nYou can no longer update email addresses using the email_address field in a CSV import directly into the 1099 product. Changes made using this method don’t carry over each year.\n#Send Stripe pre-filing confirmation invites\nPlatforms who enable e-delivery can choose to have Stripe collect identity information and paperless delivery consent directly from their connected accounts through pre-filing confirmation. This email invites your user to Stripe Express. If you need to send a one-off pre-filing confirmation email (for example, your user didn’t receive one since they had the wrong email on file), you can now do it from the 1099 dashboard. Learn more about how to resolve issues related to your user not receiving a pre-filing confirmation email.\n#Reset account claim attempts\nConnected accounts must claim their Stripe accounts to view the Tax Center in the Express dashboard. To authorize the claim, Stripe asks the user a series of questions to verify their identity. For security reasons, if the user fails to correctly answer the verification questions too many times, Stripe locks their account. You can now see the status in the 1099 dashboard, and you can reset your user’s claim attempts directly in the 1099 Dashboard. Learn more about how you can use these new features to self-resolve account claim issues."}]}